version: '3'

vars:
  BUILD_DATE:
    sh: date +%FT%T%z
  GO: go
  BINARY_DIR: bin
  BUILD_INFO_LDFLAGS: -ldflags "-w -extldflags '"-static"' -X main.buildDate={{.BUILD_DATE}} -X main.version={{.VERSION}}"
  GOLANG_CI: docker run --rm -v $(pwd):/app -w /app golangci/golangci-lint:v2.1.6 golangci-lint
  OUTPUT_DIR: "pkg/openapi"
  CLIENT_FILE: "{{.OUTPUT_DIR}}/client.go"
  SPEC_PATH: "openapi.json"
  MODIFIED_SPEC_PATH: "openapi-modified.json"

tasks:
  test:
    desc: Run Go tests with coverage
    cmds:
      - "{{.GO}} test -cover ./..."

  lint:
    desc: Run golangci-lint
    cmds:
      - "{{.GOLANG_CI}} run ./..."

  fmt:
    desc: Format code with golangci-lint
    cmds:
      - "{{.GO}} fmt ./..."
      - "{{.GOLANG_CI}} fmt ./..."

  build:
    desc: Build the Go binary
    # deps: [checkstyle, test]  # Uncomment if you want to run these before build
    cmds:
      - "{{.GO}} build {{.BUILD_INFO_LDFLAGS}} -o {{.BINARY_DIR}}/gorp ./"

  tag:
    desc: Create and push a git tag
    cmds:
      - git tag -a v{{.VERSION}} -m "creating tag {{.VERSION}}"
      - git push origin "refs/tags/v{{.VERSION}}"
    requires:
      vars: [ VERSION ]

  release:
    desc: Run goreleaser to create a release
    cmds:
      - rm -rf dist
      - goreleaser release

  create-output-dir:
    desc: "Create output directory if it doesn't exist"
    cmds:
      - mkdir -p {{.OUTPUT_DIR}}
    status:
      - test -d {{.OUTPUT_DIR}}

  clean:
    desc: "Remove binary,build,generated Remove binary and build directories/files"
    cmds:
      - rm -rf {{.OUTPUT_DIR}}
      - rm -rf {{.BINARY_DIR}} || true
      - rm -rf build || true

 # Generate OpenAPI client code from the ReportPortal's OpenAPI schema
 # Note that not all additional properties are properly documented in the OpenAPI generator documentation
 # For instance, the `withCustomMiddlewareFunction` property is not documented, but can be found here:
 # https://github.com/OpenAPITools/openapi-generator/blob/v7.14.0/modules/openapi-generator/src/main/resources/go/configuration.mustache#L106C4-L106C32
  
  generate-openapi-client:
    depends: [ clean, create-output-dir ]
    desc: "Generate client code"
    cmds:
      - >-
        docker run --rm -v $(pwd)/{{.OUTPUT_DIR}}:/generated 
        -v $(pwd)/{{.MODIFIED_SPEC_PATH}}:/local/openapi.json openapitools/openapi-generator-cli:v7.13.0 generate 
        -i /local/openapi.json -g go -o /generated --package-name openapi 
        --additional-properties=withGoCodegenComment=true,enumClassPrefix=true,onlyGenerateClient=true,withGoMod=false,withCustomMiddlewareFunction=true 
        --git-repo-id gorp/v5/pkg/openapi --git-user-id reportportal
        --global-property modelDocs=false,apiDocs=false,apiTests=false

  # Default ReportPortal's OpenAPI schema needs to be preprocessed
  # due to incorrect map/dictionary type handling in the Golang OpenAPI generator
  # For the Java code containing type Map<String, Object> the following OpenAPI schema is generated:
  # {
  #   "type": "object",
  #   "additionalProperties": {
  #     "type": "object"
  #   }
  # }
  # Which results in a Go type of map[string]map[string]interface{} that
  # is not compatible with the ReportPortal's API responses, for instance:
  #     "metadata" : {
  #      "qualityGate" : {
  #        "id" : 415,
  #        "status" : "FAILED"
  #      },
  #      "rp.cluster.lastRun" : "1749732585366"
  #    },
  # The following JQ command converts mentioned types to:
  #  {
  #     "type": "object",
  #     "additionalProperties": true
  #  }
  # This allows the Go OpenAPI generator to create a map[string]interface{} type which accepts any JSON object
  preprocess:schema:
    desc: Preprocess OpenAPI schema using JQ to fix Map<String,Object> / Dictionary field type
    cmds:
      - |
        echo "Preprocessing OpenAPI schema with JQ..."
        # Create a temporary modified schema using JQ in Docker
        docker run --rm \
          -v ${PWD}:/workdir \
          -w /workdir \
          ghcr.io/jqlang/jq \
          'walk(if type == "object" and .additionalProperties and .additionalProperties.type == "object" and (.additionalProperties.additionalProperties | not) then .additionalProperties = true else . end)' \
          {{.SPEC_PATH}} > {{.MODIFIED_SPEC_PATH}}
        echo "Modified schema saved to {{.MODIFIED_SPEC_PATH}}"

  report-example:
    deps: [build]
    desc: "Run ReportExample to test the generated client"
    cmd: go test -json ./... | bin/gorp report test2json --launchName gorp-test