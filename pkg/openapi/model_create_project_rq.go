/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateProjectRQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateProjectRQ{}

// CreateProjectRQ struct for CreateProjectRQ
type CreateProjectRQ struct {
	ProjectName string `json:"projectName" validate:"regexp=[a-zA-Z0-9-_]+"`
	EntryType   string `json:"entryType"`
}

type _CreateProjectRQ CreateProjectRQ

// NewCreateProjectRQ instantiates a new CreateProjectRQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateProjectRQ(projectName string, entryType string) *CreateProjectRQ {
	this := CreateProjectRQ{}
	this.ProjectName = projectName
	this.EntryType = entryType
	return &this
}

// NewCreateProjectRQWithDefaults instantiates a new CreateProjectRQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateProjectRQWithDefaults() *CreateProjectRQ {
	this := CreateProjectRQ{}
	return &this
}

// GetProjectName returns the ProjectName field value
func (o *CreateProjectRQ) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *CreateProjectRQ) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *CreateProjectRQ) SetProjectName(v string) {
	o.ProjectName = v
}

// GetEntryType returns the EntryType field value
func (o *CreateProjectRQ) GetEntryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntryType
}

// GetEntryTypeOk returns a tuple with the EntryType field value
// and a boolean to check if the value has been set.
func (o *CreateProjectRQ) GetEntryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntryType, true
}

// SetEntryType sets field value
func (o *CreateProjectRQ) SetEntryType(v string) {
	o.EntryType = v
}

func (o CreateProjectRQ) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateProjectRQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["projectName"] = o.ProjectName
	toSerialize["entryType"] = o.EntryType
	return toSerialize, nil
}

func (o *CreateProjectRQ) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"projectName",
		"entryType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateProjectRQ := _CreateProjectRQ{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateProjectRQ)

	if err != nil {
		return err
	}

	*o = CreateProjectRQ(varCreateProjectRQ)

	return err
}

type NullableCreateProjectRQ struct {
	value *CreateProjectRQ
	isSet bool
}

func (v NullableCreateProjectRQ) Get() *CreateProjectRQ {
	return v.value
}

func (v *NullableCreateProjectRQ) Set(val *CreateProjectRQ) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateProjectRQ) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateProjectRQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateProjectRQ(val *CreateProjectRQ) *NullableCreateProjectRQ {
	return &NullableCreateProjectRQ{value: val, isSet: true}
}

func (v NullableCreateProjectRQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateProjectRQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
