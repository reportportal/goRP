/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DashboardResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DashboardResource{}

// DashboardResource struct for DashboardResource
type DashboardResource struct {
	Description *string             `json:"description,omitempty"`
	Owner       *string             `json:"owner,omitempty"`
	Id          int64               `json:"id"`
	Name        string              `json:"name"`
	Widgets     []WidgetObjectModel `json:"widgets,omitempty"`
}

type _DashboardResource DashboardResource

// NewDashboardResource instantiates a new DashboardResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardResource(id int64, name string) *DashboardResource {
	this := DashboardResource{}
	this.Id = id
	this.Name = name
	return &this
}

// NewDashboardResourceWithDefaults instantiates a new DashboardResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardResourceWithDefaults() *DashboardResource {
	this := DashboardResource{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DashboardResource) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardResource) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DashboardResource) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DashboardResource) SetDescription(v string) {
	o.Description = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *DashboardResource) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardResource) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *DashboardResource) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *DashboardResource) SetOwner(v string) {
	o.Owner = &v
}

// GetId returns the Id field value
func (o *DashboardResource) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DashboardResource) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DashboardResource) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DashboardResource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DashboardResource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DashboardResource) SetName(v string) {
	o.Name = v
}

// GetWidgets returns the Widgets field value if set, zero value otherwise.
func (o *DashboardResource) GetWidgets() []WidgetObjectModel {
	if o == nil || IsNil(o.Widgets) {
		var ret []WidgetObjectModel
		return ret
	}
	return o.Widgets
}

// GetWidgetsOk returns a tuple with the Widgets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardResource) GetWidgetsOk() ([]WidgetObjectModel, bool) {
	if o == nil || IsNil(o.Widgets) {
		return nil, false
	}
	return o.Widgets, true
}

// HasWidgets returns a boolean if a field has been set.
func (o *DashboardResource) HasWidgets() bool {
	if o != nil && !IsNil(o.Widgets) {
		return true
	}

	return false
}

// SetWidgets gets a reference to the given []WidgetObjectModel and assigns it to the Widgets field.
func (o *DashboardResource) SetWidgets(v []WidgetObjectModel) {
	o.Widgets = v
}

func (o DashboardResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DashboardResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Widgets) {
		toSerialize["widgets"] = o.Widgets
	}
	return toSerialize, nil
}

func (o *DashboardResource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDashboardResource := _DashboardResource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDashboardResource)

	if err != nil {
		return err
	}

	*o = DashboardResource(varDashboardResource)

	return err
}

type NullableDashboardResource struct {
	value *DashboardResource
	isSet bool
}

func (v NullableDashboardResource) Get() *DashboardResource {
	return v.value
}

func (v *NullableDashboardResource) Set(val *DashboardResource) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardResource) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardResource(val *DashboardResource) *NullableDashboardResource {
	return &NullableDashboardResource{value: val, isSet: true}
}

func (v NullableDashboardResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
