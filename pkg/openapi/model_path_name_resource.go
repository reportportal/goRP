/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PathNameResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PathNameResource{}

// PathNameResource struct for PathNameResource
type PathNameResource struct {
	LaunchPathName *LaunchPathName `json:"launchPathName,omitempty"`
	ItemPaths      []ItemPathName  `json:"itemPaths,omitempty"`
}

// NewPathNameResource instantiates a new PathNameResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPathNameResource() *PathNameResource {
	this := PathNameResource{}
	return &this
}

// NewPathNameResourceWithDefaults instantiates a new PathNameResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPathNameResourceWithDefaults() *PathNameResource {
	this := PathNameResource{}
	return &this
}

// GetLaunchPathName returns the LaunchPathName field value if set, zero value otherwise.
func (o *PathNameResource) GetLaunchPathName() LaunchPathName {
	if o == nil || IsNil(o.LaunchPathName) {
		var ret LaunchPathName
		return ret
	}
	return *o.LaunchPathName
}

// GetLaunchPathNameOk returns a tuple with the LaunchPathName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathNameResource) GetLaunchPathNameOk() (*LaunchPathName, bool) {
	if o == nil || IsNil(o.LaunchPathName) {
		return nil, false
	}
	return o.LaunchPathName, true
}

// HasLaunchPathName returns a boolean if a field has been set.
func (o *PathNameResource) HasLaunchPathName() bool {
	if o != nil && !IsNil(o.LaunchPathName) {
		return true
	}

	return false
}

// SetLaunchPathName gets a reference to the given LaunchPathName and assigns it to the LaunchPathName field.
func (o *PathNameResource) SetLaunchPathName(v LaunchPathName) {
	o.LaunchPathName = &v
}

// GetItemPaths returns the ItemPaths field value if set, zero value otherwise.
func (o *PathNameResource) GetItemPaths() []ItemPathName {
	if o == nil || IsNil(o.ItemPaths) {
		var ret []ItemPathName
		return ret
	}
	return o.ItemPaths
}

// GetItemPathsOk returns a tuple with the ItemPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PathNameResource) GetItemPathsOk() ([]ItemPathName, bool) {
	if o == nil || IsNil(o.ItemPaths) {
		return nil, false
	}
	return o.ItemPaths, true
}

// HasItemPaths returns a boolean if a field has been set.
func (o *PathNameResource) HasItemPaths() bool {
	if o != nil && !IsNil(o.ItemPaths) {
		return true
	}

	return false
}

// SetItemPaths gets a reference to the given []ItemPathName and assigns it to the ItemPaths field.
func (o *PathNameResource) SetItemPaths(v []ItemPathName) {
	o.ItemPaths = v
}

func (o PathNameResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PathNameResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LaunchPathName) {
		toSerialize["launchPathName"] = o.LaunchPathName
	}
	if !IsNil(o.ItemPaths) {
		toSerialize["itemPaths"] = o.ItemPaths
	}
	return toSerialize, nil
}

type NullablePathNameResource struct {
	value *PathNameResource
	isSet bool
}

func (v NullablePathNameResource) Get() *PathNameResource {
	return v.value
}

func (v *NullablePathNameResource) Set(val *PathNameResource) {
	v.value = val
	v.isSet = true
}

func (v NullablePathNameResource) IsSet() bool {
	return v.isSet
}

func (v *NullablePathNameResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePathNameResource(val *PathNameResource) *NullablePathNameResource {
	return &NullablePathNameResource{value: val, isSet: true}
}

func (v NullablePathNameResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePathNameResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
