/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the MergeLaunchesRQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MergeLaunchesRQ{}

// MergeLaunchesRQ Merge launches request body
type MergeLaunchesRQ struct {
	Name        string                  `json:"name"`
	Description *string                 `json:"description,omitempty"`
	Attributes  []ItemAttributeResource `json:"attributes,omitempty"`
	StartTime   *time.Time              `json:"startTime,omitempty"`
	Mode        *string                 `json:"mode,omitempty"`
	// A set of IDs of the launches to be merged.
	Launches                []int64    `json:"launches"`
	EndTime                 *time.Time `json:"endTime,omitempty"`
	MergeType               string     `json:"mergeType"`
	ExtendSuitesDescription bool       `json:"extendSuitesDescription"`
}

type _MergeLaunchesRQ MergeLaunchesRQ

// NewMergeLaunchesRQ instantiates a new MergeLaunchesRQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeLaunchesRQ(name string, launches []int64, mergeType string, extendSuitesDescription bool) *MergeLaunchesRQ {
	this := MergeLaunchesRQ{}
	this.Name = name
	this.Launches = launches
	this.MergeType = mergeType
	this.ExtendSuitesDescription = extendSuitesDescription
	return &this
}

// NewMergeLaunchesRQWithDefaults instantiates a new MergeLaunchesRQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeLaunchesRQWithDefaults() *MergeLaunchesRQ {
	this := MergeLaunchesRQ{}
	return &this
}

// GetName returns the Name field value
func (o *MergeLaunchesRQ) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MergeLaunchesRQ) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MergeLaunchesRQ) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MergeLaunchesRQ) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeLaunchesRQ) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MergeLaunchesRQ) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MergeLaunchesRQ) SetDescription(v string) {
	o.Description = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *MergeLaunchesRQ) GetAttributes() []ItemAttributeResource {
	if o == nil || IsNil(o.Attributes) {
		var ret []ItemAttributeResource
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeLaunchesRQ) GetAttributesOk() ([]ItemAttributeResource, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *MergeLaunchesRQ) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []ItemAttributeResource and assigns it to the Attributes field.
func (o *MergeLaunchesRQ) SetAttributes(v []ItemAttributeResource) {
	o.Attributes = v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *MergeLaunchesRQ) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeLaunchesRQ) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *MergeLaunchesRQ) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *MergeLaunchesRQ) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *MergeLaunchesRQ) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeLaunchesRQ) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *MergeLaunchesRQ) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *MergeLaunchesRQ) SetMode(v string) {
	o.Mode = &v
}

// GetLaunches returns the Launches field value
func (o *MergeLaunchesRQ) GetLaunches() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.Launches
}

// GetLaunchesOk returns a tuple with the Launches field value
// and a boolean to check if the value has been set.
func (o *MergeLaunchesRQ) GetLaunchesOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Launches, true
}

// SetLaunches sets field value
func (o *MergeLaunchesRQ) SetLaunches(v []int64) {
	o.Launches = v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *MergeLaunchesRQ) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeLaunchesRQ) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *MergeLaunchesRQ) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *MergeLaunchesRQ) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetMergeType returns the MergeType field value
func (o *MergeLaunchesRQ) GetMergeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MergeType
}

// GetMergeTypeOk returns a tuple with the MergeType field value
// and a boolean to check if the value has been set.
func (o *MergeLaunchesRQ) GetMergeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MergeType, true
}

// SetMergeType sets field value
func (o *MergeLaunchesRQ) SetMergeType(v string) {
	o.MergeType = v
}

// GetExtendSuitesDescription returns the ExtendSuitesDescription field value
func (o *MergeLaunchesRQ) GetExtendSuitesDescription() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ExtendSuitesDescription
}

// GetExtendSuitesDescriptionOk returns a tuple with the ExtendSuitesDescription field value
// and a boolean to check if the value has been set.
func (o *MergeLaunchesRQ) GetExtendSuitesDescriptionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExtendSuitesDescription, true
}

// SetExtendSuitesDescription sets field value
func (o *MergeLaunchesRQ) SetExtendSuitesDescription(v bool) {
	o.ExtendSuitesDescription = v
}

func (o MergeLaunchesRQ) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MergeLaunchesRQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	toSerialize["launches"] = o.Launches
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	toSerialize["mergeType"] = o.MergeType
	toSerialize["extendSuitesDescription"] = o.ExtendSuitesDescription
	return toSerialize, nil
}

func (o *MergeLaunchesRQ) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"launches",
		"mergeType",
		"extendSuitesDescription",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMergeLaunchesRQ := _MergeLaunchesRQ{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMergeLaunchesRQ)

	if err != nil {
		return err
	}

	*o = MergeLaunchesRQ(varMergeLaunchesRQ)

	return err
}

type NullableMergeLaunchesRQ struct {
	value *MergeLaunchesRQ
	isSet bool
}

func (v NullableMergeLaunchesRQ) Get() *MergeLaunchesRQ {
	return v.value
}

func (v *NullableMergeLaunchesRQ) Set(val *MergeLaunchesRQ) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeLaunchesRQ) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeLaunchesRQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeLaunchesRQ(val *MergeLaunchesRQ) *NullableMergeLaunchesRQ {
	return &NullableMergeLaunchesRQ{value: val, isSet: true}
}

func (v NullableMergeLaunchesRQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeLaunchesRQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
