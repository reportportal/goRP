/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the GroupUserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupUserInfo{}

// GroupUserInfo Information about a user as a group member.
type GroupUserInfo struct {
	// Resource identifier.
	Id *int64 `json:"id,omitempty"`
	// User identifier for external systems.
	Uuid *string `json:"uuid,omitempty"`
	// User email.
	Email *string `json:"email,omitempty"`
	// Display name.
	FullName *string `json:"full_name,omitempty" validate:"regexp=^[A-Za-z0-9.'_\\\\- ]+$"`
	// External user identifier.
	ExternalId   *string `json:"external_id,omitempty"`
	InstanceRole *string `json:"instance_role,omitempty"`
	// User activity status.
	Active      *bool   `json:"active,omitempty"`
	AccountType *string `json:"account_type,omitempty"`
	// Timestamp of user adding to group.
	AddedAt *time.Time `json:"added_at,omitempty"`
}

// NewGroupUserInfo instantiates a new GroupUserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupUserInfo() *GroupUserInfo {
	this := GroupUserInfo{}
	return &this
}

// NewGroupUserInfoWithDefaults instantiates a new GroupUserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupUserInfoWithDefaults() *GroupUserInfo {
	this := GroupUserInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GroupUserInfo) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUserInfo) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GroupUserInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *GroupUserInfo) SetId(v int64) {
	o.Id = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *GroupUserInfo) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUserInfo) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *GroupUserInfo) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *GroupUserInfo) SetUuid(v string) {
	o.Uuid = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *GroupUserInfo) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUserInfo) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *GroupUserInfo) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *GroupUserInfo) SetEmail(v string) {
	o.Email = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *GroupUserInfo) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUserInfo) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *GroupUserInfo) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *GroupUserInfo) SetFullName(v string) {
	o.FullName = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *GroupUserInfo) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUserInfo) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *GroupUserInfo) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *GroupUserInfo) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetInstanceRole returns the InstanceRole field value if set, zero value otherwise.
func (o *GroupUserInfo) GetInstanceRole() string {
	if o == nil || IsNil(o.InstanceRole) {
		var ret string
		return ret
	}
	return *o.InstanceRole
}

// GetInstanceRoleOk returns a tuple with the InstanceRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUserInfo) GetInstanceRoleOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceRole) {
		return nil, false
	}
	return o.InstanceRole, true
}

// HasInstanceRole returns a boolean if a field has been set.
func (o *GroupUserInfo) HasInstanceRole() bool {
	if o != nil && !IsNil(o.InstanceRole) {
		return true
	}

	return false
}

// SetInstanceRole gets a reference to the given string and assigns it to the InstanceRole field.
func (o *GroupUserInfo) SetInstanceRole(v string) {
	o.InstanceRole = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *GroupUserInfo) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUserInfo) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *GroupUserInfo) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *GroupUserInfo) SetActive(v bool) {
	o.Active = &v
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *GroupUserInfo) GetAccountType() string {
	if o == nil || IsNil(o.AccountType) {
		var ret string
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUserInfo) GetAccountTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AccountType) {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *GroupUserInfo) HasAccountType() bool {
	if o != nil && !IsNil(o.AccountType) {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given string and assigns it to the AccountType field.
func (o *GroupUserInfo) SetAccountType(v string) {
	o.AccountType = &v
}

// GetAddedAt returns the AddedAt field value if set, zero value otherwise.
func (o *GroupUserInfo) GetAddedAt() time.Time {
	if o == nil || IsNil(o.AddedAt) {
		var ret time.Time
		return ret
	}
	return *o.AddedAt
}

// GetAddedAtOk returns a tuple with the AddedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupUserInfo) GetAddedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AddedAt) {
		return nil, false
	}
	return o.AddedAt, true
}

// HasAddedAt returns a boolean if a field has been set.
func (o *GroupUserInfo) HasAddedAt() bool {
	if o != nil && !IsNil(o.AddedAt) {
		return true
	}

	return false
}

// SetAddedAt gets a reference to the given time.Time and assigns it to the AddedAt field.
func (o *GroupUserInfo) SetAddedAt(v time.Time) {
	o.AddedAt = &v
}

func (o GroupUserInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupUserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.FullName) {
		toSerialize["full_name"] = o.FullName
	}
	if !IsNil(o.ExternalId) {
		toSerialize["external_id"] = o.ExternalId
	}
	if !IsNil(o.InstanceRole) {
		toSerialize["instance_role"] = o.InstanceRole
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.AccountType) {
		toSerialize["account_type"] = o.AccountType
	}
	if !IsNil(o.AddedAt) {
		toSerialize["added_at"] = o.AddedAt
	}
	return toSerialize, nil
}

type NullableGroupUserInfo struct {
	value *GroupUserInfo
	isSet bool
}

func (v NullableGroupUserInfo) Get() *GroupUserInfo {
	return v.value
}

func (v *NullableGroupUserInfo) Set(val *GroupUserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupUserInfo(val *GroupUserInfo) *NullableGroupUserInfo {
	return &NullableGroupUserInfo{value: val, isSet: true}
}

func (v NullableGroupUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
