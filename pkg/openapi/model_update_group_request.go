/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateGroupRequest{}

// UpdateGroupRequest Update group request.
type UpdateGroupRequest struct {
	// Display name.
	Name string `json:"name" validate:"regexp=^[A-Za-z0-9.'_\\\\- ]+$"`
	// A slug is used to identify a resource. It should be unique and contain only lowercase letters, numbers, and hyphens. It should not start or end with a hyphen.
	Slug *string `json:"slug,omitempty" validate:"regexp=^[a-z0-9]+(?:-[a-z0-9]+)*$"`
}

type _UpdateGroupRequest UpdateGroupRequest

// NewUpdateGroupRequest instantiates a new UpdateGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateGroupRequest(name string) *UpdateGroupRequest {
	this := UpdateGroupRequest{}
	this.Name = name
	return &this
}

// NewUpdateGroupRequestWithDefaults instantiates a new UpdateGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateGroupRequestWithDefaults() *UpdateGroupRequest {
	this := UpdateGroupRequest{}
	return &this
}

// GetName returns the Name field value
func (o *UpdateGroupRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateGroupRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateGroupRequest) SetName(v string) {
	o.Name = v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *UpdateGroupRequest) GetSlug() string {
	if o == nil || IsNil(o.Slug) {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGroupRequest) GetSlugOk() (*string, bool) {
	if o == nil || IsNil(o.Slug) {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *UpdateGroupRequest) HasSlug() bool {
	if o != nil && !IsNil(o.Slug) {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *UpdateGroupRequest) SetSlug(v string) {
	o.Slug = &v
}

func (o UpdateGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Slug) {
		toSerialize["slug"] = o.Slug
	}
	return toSerialize, nil
}

func (o *UpdateGroupRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateGroupRequest := _UpdateGroupRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateGroupRequest)

	if err != nil {
		return err
	}

	*o = UpdateGroupRequest(varUpdateGroupRequest)

	return err
}

type NullableUpdateGroupRequest struct {
	value *UpdateGroupRequest
	isSet bool
}

func (v NullableUpdateGroupRequest) Get() *UpdateGroupRequest {
	return v.value
}

func (v *NullableUpdateGroupRequest) Set(val *UpdateGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateGroupRequest(val *UpdateGroupRequest) *NullableUpdateGroupRequest {
	return &NullableUpdateGroupRequest{value: val, isSet: true}
}

func (v NullableUpdateGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
