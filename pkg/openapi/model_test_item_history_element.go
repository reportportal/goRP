/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TestItemHistoryElement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestItemHistoryElement{}

// TestItemHistoryElement struct for TestItemHistoryElement
type TestItemHistoryElement struct {
	GroupingField *string            `json:"groupingField,omitempty"`
	Resources     []TestItemResource `json:"resources,omitempty"`
}

// NewTestItemHistoryElement instantiates a new TestItemHistoryElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestItemHistoryElement() *TestItemHistoryElement {
	this := TestItemHistoryElement{}
	return &this
}

// NewTestItemHistoryElementWithDefaults instantiates a new TestItemHistoryElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestItemHistoryElementWithDefaults() *TestItemHistoryElement {
	this := TestItemHistoryElement{}
	return &this
}

// GetGroupingField returns the GroupingField field value if set, zero value otherwise.
func (o *TestItemHistoryElement) GetGroupingField() string {
	if o == nil || IsNil(o.GroupingField) {
		var ret string
		return ret
	}
	return *o.GroupingField
}

// GetGroupingFieldOk returns a tuple with the GroupingField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestItemHistoryElement) GetGroupingFieldOk() (*string, bool) {
	if o == nil || IsNil(o.GroupingField) {
		return nil, false
	}
	return o.GroupingField, true
}

// HasGroupingField returns a boolean if a field has been set.
func (o *TestItemHistoryElement) HasGroupingField() bool {
	if o != nil && !IsNil(o.GroupingField) {
		return true
	}

	return false
}

// SetGroupingField gets a reference to the given string and assigns it to the GroupingField field.
func (o *TestItemHistoryElement) SetGroupingField(v string) {
	o.GroupingField = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *TestItemHistoryElement) GetResources() []TestItemResource {
	if o == nil || IsNil(o.Resources) {
		var ret []TestItemResource
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestItemHistoryElement) GetResourcesOk() ([]TestItemResource, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *TestItemHistoryElement) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []TestItemResource and assigns it to the Resources field.
func (o *TestItemHistoryElement) SetResources(v []TestItemResource) {
	o.Resources = v
}

func (o TestItemHistoryElement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestItemHistoryElement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupingField) {
		toSerialize["groupingField"] = o.GroupingField
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	return toSerialize, nil
}

type NullableTestItemHistoryElement struct {
	value *TestItemHistoryElement
	isSet bool
}

func (v NullableTestItemHistoryElement) Get() *TestItemHistoryElement {
	return v.value
}

func (v *NullableTestItemHistoryElement) Set(val *TestItemHistoryElement) {
	v.value = val
	v.isSet = true
}

func (v NullableTestItemHistoryElement) IsSet() bool {
	return v.isSet
}

func (v *NullableTestItemHistoryElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestItemHistoryElement(val *TestItemHistoryElement) *NullableTestItemHistoryElement {
	return &NullableTestItemHistoryElement{value: val, isSet: true}
}

func (v NullableTestItemHistoryElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestItemHistoryElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
