/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PostTicketRQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostTicketRQ{}

// PostTicketRQ struct for PostTicketRQ
type PostTicketRQ struct {
	Username        *string           `json:"username,omitempty"`
	Password        *string           `json:"password,omitempty"`
	Domain          *string           `json:"domain,omitempty"`
	Token           *string           `json:"token,omitempty"`
	Fields          []PostFormField   `json:"fields"`
	IncludeLogs     *bool             `json:"includeLogs,omitempty"`
	IncludeData     *bool             `json:"includeData,omitempty"`
	IncludeComments *bool             `json:"includeComments,omitempty"`
	LogQuantity     *int32            `json:"logQuantity,omitempty"`
	Item            int64             `json:"item"`
	BackLinks       map[string]string `json:"backLinks"`
}

type _PostTicketRQ PostTicketRQ

// NewPostTicketRQ instantiates a new PostTicketRQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostTicketRQ(fields []PostFormField, item int64, backLinks map[string]string) *PostTicketRQ {
	this := PostTicketRQ{}
	this.Fields = fields
	this.Item = item
	this.BackLinks = backLinks
	return &this
}

// NewPostTicketRQWithDefaults instantiates a new PostTicketRQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostTicketRQWithDefaults() *PostTicketRQ {
	this := PostTicketRQ{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *PostTicketRQ) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostTicketRQ) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *PostTicketRQ) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *PostTicketRQ) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *PostTicketRQ) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostTicketRQ) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *PostTicketRQ) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *PostTicketRQ) SetPassword(v string) {
	o.Password = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *PostTicketRQ) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostTicketRQ) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *PostTicketRQ) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *PostTicketRQ) SetDomain(v string) {
	o.Domain = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *PostTicketRQ) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostTicketRQ) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *PostTicketRQ) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *PostTicketRQ) SetToken(v string) {
	o.Token = &v
}

// GetFields returns the Fields field value
func (o *PostTicketRQ) GetFields() []PostFormField {
	if o == nil {
		var ret []PostFormField
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *PostTicketRQ) GetFieldsOk() ([]PostFormField, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fields, true
}

// SetFields sets field value
func (o *PostTicketRQ) SetFields(v []PostFormField) {
	o.Fields = v
}

// GetIncludeLogs returns the IncludeLogs field value if set, zero value otherwise.
func (o *PostTicketRQ) GetIncludeLogs() bool {
	if o == nil || IsNil(o.IncludeLogs) {
		var ret bool
		return ret
	}
	return *o.IncludeLogs
}

// GetIncludeLogsOk returns a tuple with the IncludeLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostTicketRQ) GetIncludeLogsOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeLogs) {
		return nil, false
	}
	return o.IncludeLogs, true
}

// HasIncludeLogs returns a boolean if a field has been set.
func (o *PostTicketRQ) HasIncludeLogs() bool {
	if o != nil && !IsNil(o.IncludeLogs) {
		return true
	}

	return false
}

// SetIncludeLogs gets a reference to the given bool and assigns it to the IncludeLogs field.
func (o *PostTicketRQ) SetIncludeLogs(v bool) {
	o.IncludeLogs = &v
}

// GetIncludeData returns the IncludeData field value if set, zero value otherwise.
func (o *PostTicketRQ) GetIncludeData() bool {
	if o == nil || IsNil(o.IncludeData) {
		var ret bool
		return ret
	}
	return *o.IncludeData
}

// GetIncludeDataOk returns a tuple with the IncludeData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostTicketRQ) GetIncludeDataOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeData) {
		return nil, false
	}
	return o.IncludeData, true
}

// HasIncludeData returns a boolean if a field has been set.
func (o *PostTicketRQ) HasIncludeData() bool {
	if o != nil && !IsNil(o.IncludeData) {
		return true
	}

	return false
}

// SetIncludeData gets a reference to the given bool and assigns it to the IncludeData field.
func (o *PostTicketRQ) SetIncludeData(v bool) {
	o.IncludeData = &v
}

// GetIncludeComments returns the IncludeComments field value if set, zero value otherwise.
func (o *PostTicketRQ) GetIncludeComments() bool {
	if o == nil || IsNil(o.IncludeComments) {
		var ret bool
		return ret
	}
	return *o.IncludeComments
}

// GetIncludeCommentsOk returns a tuple with the IncludeComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostTicketRQ) GetIncludeCommentsOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeComments) {
		return nil, false
	}
	return o.IncludeComments, true
}

// HasIncludeComments returns a boolean if a field has been set.
func (o *PostTicketRQ) HasIncludeComments() bool {
	if o != nil && !IsNil(o.IncludeComments) {
		return true
	}

	return false
}

// SetIncludeComments gets a reference to the given bool and assigns it to the IncludeComments field.
func (o *PostTicketRQ) SetIncludeComments(v bool) {
	o.IncludeComments = &v
}

// GetLogQuantity returns the LogQuantity field value if set, zero value otherwise.
func (o *PostTicketRQ) GetLogQuantity() int32 {
	if o == nil || IsNil(o.LogQuantity) {
		var ret int32
		return ret
	}
	return *o.LogQuantity
}

// GetLogQuantityOk returns a tuple with the LogQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostTicketRQ) GetLogQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.LogQuantity) {
		return nil, false
	}
	return o.LogQuantity, true
}

// HasLogQuantity returns a boolean if a field has been set.
func (o *PostTicketRQ) HasLogQuantity() bool {
	if o != nil && !IsNil(o.LogQuantity) {
		return true
	}

	return false
}

// SetLogQuantity gets a reference to the given int32 and assigns it to the LogQuantity field.
func (o *PostTicketRQ) SetLogQuantity(v int32) {
	o.LogQuantity = &v
}

// GetItem returns the Item field value
func (o *PostTicketRQ) GetItem() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Item
}

// GetItemOk returns a tuple with the Item field value
// and a boolean to check if the value has been set.
func (o *PostTicketRQ) GetItemOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Item, true
}

// SetItem sets field value
func (o *PostTicketRQ) SetItem(v int64) {
	o.Item = v
}

// GetBackLinks returns the BackLinks field value
func (o *PostTicketRQ) GetBackLinks() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.BackLinks
}

// GetBackLinksOk returns a tuple with the BackLinks field value
// and a boolean to check if the value has been set.
func (o *PostTicketRQ) GetBackLinksOk() (map[string]string, bool) {
	if o == nil {
		return map[string]string{}, false
	}
	return o.BackLinks, true
}

// SetBackLinks sets field value
func (o *PostTicketRQ) SetBackLinks(v map[string]string) {
	o.BackLinks = v
}

func (o PostTicketRQ) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostTicketRQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	toSerialize["fields"] = o.Fields
	if !IsNil(o.IncludeLogs) {
		toSerialize["includeLogs"] = o.IncludeLogs
	}
	if !IsNil(o.IncludeData) {
		toSerialize["includeData"] = o.IncludeData
	}
	if !IsNil(o.IncludeComments) {
		toSerialize["includeComments"] = o.IncludeComments
	}
	if !IsNil(o.LogQuantity) {
		toSerialize["logQuantity"] = o.LogQuantity
	}
	toSerialize["item"] = o.Item
	toSerialize["backLinks"] = o.BackLinks
	return toSerialize, nil
}

func (o *PostTicketRQ) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fields",
		"item",
		"backLinks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostTicketRQ := _PostTicketRQ{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostTicketRQ)

	if err != nil {
		return err
	}

	*o = PostTicketRQ(varPostTicketRQ)

	return err
}

type NullablePostTicketRQ struct {
	value *PostTicketRQ
	isSet bool
}

func (v NullablePostTicketRQ) Get() *PostTicketRQ {
	return v.value
}

func (v *NullablePostTicketRQ) Set(val *PostTicketRQ) {
	v.value = val
	v.isSet = true
}

func (v NullablePostTicketRQ) IsSet() bool {
	return v.isSet
}

func (v *NullablePostTicketRQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostTicketRQ(val *PostTicketRQ) *NullablePostTicketRQ {
	return &NullablePostTicketRQ{value: val, isSet: true}
}

func (v NullablePostTicketRQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostTicketRQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
