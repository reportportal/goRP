/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PagedLogResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PagedLogResource{}

// PagedLogResource struct for PagedLogResource
type PagedLogResource struct {
	PagesLocation []PagedLogResourcePagesLocationInner `json:"pagesLocation,omitempty"`
	Id            int64                                `json:"id"`
	Uuid          string                               `json:"uuid"`
	Time          *time.Time                           `json:"time,omitempty"`
	Message       *string                              `json:"message,omitempty"`
	BinaryContent *BinaryContent                       `json:"binaryContent,omitempty"`
	Thumbnail     *string                              `json:"thumbnail,omitempty"`
	Level         *string                              `json:"level,omitempty"`
	ItemId        *int64                               `json:"itemId,omitempty"`
	LaunchId      *int64                               `json:"launchId,omitempty"`
}

type _PagedLogResource PagedLogResource

// NewPagedLogResource instantiates a new PagedLogResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPagedLogResource(id int64, uuid string) *PagedLogResource {
	this := PagedLogResource{}
	this.Id = id
	this.Uuid = uuid
	return &this
}

// NewPagedLogResourceWithDefaults instantiates a new PagedLogResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPagedLogResourceWithDefaults() *PagedLogResource {
	this := PagedLogResource{}
	return &this
}

// GetPagesLocation returns the PagesLocation field value if set, zero value otherwise.
func (o *PagedLogResource) GetPagesLocation() []PagedLogResourcePagesLocationInner {
	if o == nil || IsNil(o.PagesLocation) {
		var ret []PagedLogResourcePagesLocationInner
		return ret
	}
	return o.PagesLocation
}

// GetPagesLocationOk returns a tuple with the PagesLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PagedLogResource) GetPagesLocationOk() ([]PagedLogResourcePagesLocationInner, bool) {
	if o == nil || IsNil(o.PagesLocation) {
		return nil, false
	}
	return o.PagesLocation, true
}

// HasPagesLocation returns a boolean if a field has been set.
func (o *PagedLogResource) HasPagesLocation() bool {
	if o != nil && !IsNil(o.PagesLocation) {
		return true
	}

	return false
}

// SetPagesLocation gets a reference to the given []PagedLogResourcePagesLocationInner and assigns it to the PagesLocation field.
func (o *PagedLogResource) SetPagesLocation(v []PagedLogResourcePagesLocationInner) {
	o.PagesLocation = v
}

// GetId returns the Id field value
func (o *PagedLogResource) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PagedLogResource) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PagedLogResource) SetId(v int64) {
	o.Id = v
}

// GetUuid returns the Uuid field value
func (o *PagedLogResource) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *PagedLogResource) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *PagedLogResource) SetUuid(v string) {
	o.Uuid = v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *PagedLogResource) GetTime() time.Time {
	if o == nil || IsNil(o.Time) {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PagedLogResource) GetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *PagedLogResource) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *PagedLogResource) SetTime(v time.Time) {
	o.Time = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *PagedLogResource) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PagedLogResource) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *PagedLogResource) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *PagedLogResource) SetMessage(v string) {
	o.Message = &v
}

// GetBinaryContent returns the BinaryContent field value if set, zero value otherwise.
func (o *PagedLogResource) GetBinaryContent() BinaryContent {
	if o == nil || IsNil(o.BinaryContent) {
		var ret BinaryContent
		return ret
	}
	return *o.BinaryContent
}

// GetBinaryContentOk returns a tuple with the BinaryContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PagedLogResource) GetBinaryContentOk() (*BinaryContent, bool) {
	if o == nil || IsNil(o.BinaryContent) {
		return nil, false
	}
	return o.BinaryContent, true
}

// HasBinaryContent returns a boolean if a field has been set.
func (o *PagedLogResource) HasBinaryContent() bool {
	if o != nil && !IsNil(o.BinaryContent) {
		return true
	}

	return false
}

// SetBinaryContent gets a reference to the given BinaryContent and assigns it to the BinaryContent field.
func (o *PagedLogResource) SetBinaryContent(v BinaryContent) {
	o.BinaryContent = &v
}

// GetThumbnail returns the Thumbnail field value if set, zero value otherwise.
func (o *PagedLogResource) GetThumbnail() string {
	if o == nil || IsNil(o.Thumbnail) {
		var ret string
		return ret
	}
	return *o.Thumbnail
}

// GetThumbnailOk returns a tuple with the Thumbnail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PagedLogResource) GetThumbnailOk() (*string, bool) {
	if o == nil || IsNil(o.Thumbnail) {
		return nil, false
	}
	return o.Thumbnail, true
}

// HasThumbnail returns a boolean if a field has been set.
func (o *PagedLogResource) HasThumbnail() bool {
	if o != nil && !IsNil(o.Thumbnail) {
		return true
	}

	return false
}

// SetThumbnail gets a reference to the given string and assigns it to the Thumbnail field.
func (o *PagedLogResource) SetThumbnail(v string) {
	o.Thumbnail = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *PagedLogResource) GetLevel() string {
	if o == nil || IsNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PagedLogResource) GetLevelOk() (*string, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *PagedLogResource) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *PagedLogResource) SetLevel(v string) {
	o.Level = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *PagedLogResource) GetItemId() int64 {
	if o == nil || IsNil(o.ItemId) {
		var ret int64
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PagedLogResource) GetItemIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *PagedLogResource) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given int64 and assigns it to the ItemId field.
func (o *PagedLogResource) SetItemId(v int64) {
	o.ItemId = &v
}

// GetLaunchId returns the LaunchId field value if set, zero value otherwise.
func (o *PagedLogResource) GetLaunchId() int64 {
	if o == nil || IsNil(o.LaunchId) {
		var ret int64
		return ret
	}
	return *o.LaunchId
}

// GetLaunchIdOk returns a tuple with the LaunchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PagedLogResource) GetLaunchIdOk() (*int64, bool) {
	if o == nil || IsNil(o.LaunchId) {
		return nil, false
	}
	return o.LaunchId, true
}

// HasLaunchId returns a boolean if a field has been set.
func (o *PagedLogResource) HasLaunchId() bool {
	if o != nil && !IsNil(o.LaunchId) {
		return true
	}

	return false
}

// SetLaunchId gets a reference to the given int64 and assigns it to the LaunchId field.
func (o *PagedLogResource) SetLaunchId(v int64) {
	o.LaunchId = &v
}

func (o PagedLogResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PagedLogResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PagesLocation) {
		toSerialize["pagesLocation"] = o.PagesLocation
	}
	toSerialize["id"] = o.Id
	toSerialize["uuid"] = o.Uuid
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.BinaryContent) {
		toSerialize["binaryContent"] = o.BinaryContent
	}
	if !IsNil(o.Thumbnail) {
		toSerialize["thumbnail"] = o.Thumbnail
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.ItemId) {
		toSerialize["itemId"] = o.ItemId
	}
	if !IsNil(o.LaunchId) {
		toSerialize["launchId"] = o.LaunchId
	}
	return toSerialize, nil
}

func (o *PagedLogResource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPagedLogResource := _PagedLogResource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPagedLogResource)

	if err != nil {
		return err
	}

	*o = PagedLogResource(varPagedLogResource)

	return err
}

type NullablePagedLogResource struct {
	value *PagedLogResource
	isSet bool
}

func (v NullablePagedLogResource) Get() *PagedLogResource {
	return v.value
}

func (v *NullablePagedLogResource) Set(val *PagedLogResource) {
	v.value = val
	v.isSet = true
}

func (v NullablePagedLogResource) IsSet() bool {
	return v.isSet
}

func (v *NullablePagedLogResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePagedLogResource(val *PagedLogResource) *NullablePagedLogResource {
	return &NullablePagedLogResource{value: val, isSet: true}
}

func (v NullablePagedLogResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePagedLogResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
