/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// TestItemAsyncAPIService TestItemAsyncAPI service
type TestItemAsyncAPIService service

type ApiFinishTestItemRequest struct {
	ctx              context.Context
	ApiService       *TestItemAsyncAPIService
	projectName      string
	testItemId       string
	finishTestItemRQ *FinishTestItemRQ
}

func (r ApiFinishTestItemRequest) FinishTestItemRQ(finishTestItemRQ FinishTestItemRQ) ApiFinishTestItemRequest {
	r.finishTestItemRQ = &finishTestItemRQ
	return r
}

func (r ApiFinishTestItemRequest) Execute() (*OperationCompletionRS, *http.Response, error) {
	return r.ApiService.FinishTestItemExecute(r)
}

/*
FinishTestItem Finish Test Item

Finish test item

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectName
	@param testItemId
	@return ApiFinishTestItemRequest
*/
func (a *TestItemAsyncAPIService) FinishTestItem(ctx context.Context, projectName, testItemId string) ApiFinishTestItemRequest {
	return ApiFinishTestItemRequest{
		ApiService:  a,
		ctx:         ctx,
		projectName: projectName,
		testItemId:  testItemId,
	}
}

// Execute executes the request
//
//	@return OperationCompletionRS
func (a *TestItemAsyncAPIService) FinishTestItemExecute(r ApiFinishTestItemRequest) (*OperationCompletionRS, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OperationCompletionRS
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TestItemAsyncAPIService.FinishTestItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{projectName}/item/{testItemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"projectName"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"testItemId"+"}", url.PathEscape(parameterValueToString(r.testItemId, "testItemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.finishTestItemRQ == nil {
		return localVarReturnValue, nil, reportError("finishTestItemRQ is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.finishTestItemRQ
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFinishTestItem1Request struct {
	ctx              context.Context
	ApiService       *TestItemAsyncAPIService
	projectName      string
	testItemId       string
	finishTestItemRQ *FinishTestItemRQ
}

func (r ApiFinishTestItem1Request) FinishTestItemRQ(finishTestItemRQ FinishTestItemRQ) ApiFinishTestItem1Request {
	r.finishTestItemRQ = &finishTestItemRQ
	return r
}

func (r ApiFinishTestItem1Request) Execute() (*OperationCompletionRS, *http.Response, error) {
	return r.ApiService.FinishTestItem1Execute(r)
}

/*
FinishTestItem1 Finish Test Item

Finish test item

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectName
	@param testItemId
	@return ApiFinishTestItem1Request
*/
func (a *TestItemAsyncAPIService) FinishTestItem1(ctx context.Context, projectName, testItemId string) ApiFinishTestItem1Request {
	return ApiFinishTestItem1Request{
		ApiService:  a,
		ctx:         ctx,
		projectName: projectName,
		testItemId:  testItemId,
	}
}

// Execute executes the request
//
//	@return OperationCompletionRS
func (a *TestItemAsyncAPIService) FinishTestItem1Execute(r ApiFinishTestItem1Request) (*OperationCompletionRS, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OperationCompletionRS
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TestItemAsyncAPIService.FinishTestItem1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{projectName}/item/{testItemId}/"
	localVarPath = strings.Replace(localVarPath, "{"+"projectName"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"testItemId"+"}", url.PathEscape(parameterValueToString(r.testItemId, "testItemId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.finishTestItemRQ == nil {
		return localVarReturnValue, nil, reportError("finishTestItemRQ is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.finishTestItemRQ
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStartChildItemRequest struct {
	ctx             context.Context
	ApiService      *TestItemAsyncAPIService
	parentItem      string
	projectName     string
	startTestItemRQ *StartTestItemRQ
}

func (r ApiStartChildItemRequest) StartTestItemRQ(startTestItemRQ StartTestItemRQ) ApiStartChildItemRequest {
	r.startTestItemRQ = &startTestItemRQ
	return r
}

func (r ApiStartChildItemRequest) Execute() (*EntryCreatedAsyncRS, *http.Response, error) {
	return r.ApiService.StartChildItemExecute(r)
}

/*
StartChildItem Start Child Item

Start a child test item

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentItem
	@param projectName
	@return ApiStartChildItemRequest
*/
func (a *TestItemAsyncAPIService) StartChildItem(ctx context.Context, parentItem, projectName string) ApiStartChildItemRequest {
	return ApiStartChildItemRequest{
		ApiService:  a,
		ctx:         ctx,
		parentItem:  parentItem,
		projectName: projectName,
	}
}

// Execute executes the request
//
//	@return EntryCreatedAsyncRS
func (a *TestItemAsyncAPIService) StartChildItemExecute(r ApiStartChildItemRequest) (*EntryCreatedAsyncRS, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EntryCreatedAsyncRS
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TestItemAsyncAPIService.StartChildItem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{projectName}/item/{parentItem}"
	localVarPath = strings.Replace(localVarPath, "{"+"parentItem"+"}", url.PathEscape(parameterValueToString(r.parentItem, "parentItem")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectName"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTestItemRQ == nil {
		return localVarReturnValue, nil, reportError("startTestItemRQ is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.startTestItemRQ
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStartChildItem1Request struct {
	ctx             context.Context
	ApiService      *TestItemAsyncAPIService
	parentItem      string
	projectName     string
	startTestItemRQ *StartTestItemRQ
}

func (r ApiStartChildItem1Request) StartTestItemRQ(startTestItemRQ StartTestItemRQ) ApiStartChildItem1Request {
	r.startTestItemRQ = &startTestItemRQ
	return r
}

func (r ApiStartChildItem1Request) Execute() (*EntryCreatedAsyncRS, *http.Response, error) {
	return r.ApiService.StartChildItem1Execute(r)
}

/*
StartChildItem1 Start Child Item

Start a child test item

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentItem
	@param projectName
	@return ApiStartChildItem1Request
*/
func (a *TestItemAsyncAPIService) StartChildItem1(ctx context.Context, parentItem, projectName string) ApiStartChildItem1Request {
	return ApiStartChildItem1Request{
		ApiService:  a,
		ctx:         ctx,
		parentItem:  parentItem,
		projectName: projectName,
	}
}

// Execute executes the request
//
//	@return EntryCreatedAsyncRS
func (a *TestItemAsyncAPIService) StartChildItem1Execute(r ApiStartChildItem1Request) (*EntryCreatedAsyncRS, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EntryCreatedAsyncRS
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TestItemAsyncAPIService.StartChildItem1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{projectName}/item/{parentItem}/"
	localVarPath = strings.Replace(localVarPath, "{"+"parentItem"+"}", url.PathEscape(parameterValueToString(r.parentItem, "parentItem")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectName"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTestItemRQ == nil {
		return localVarReturnValue, nil, reportError("startTestItemRQ is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.startTestItemRQ
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStartRootItem1Request struct {
	ctx             context.Context
	ApiService      *TestItemAsyncAPIService
	projectName     string
	startTestItemRQ *StartTestItemRQ
}

func (r ApiStartRootItem1Request) StartTestItemRQ(startTestItemRQ StartTestItemRQ) ApiStartRootItem1Request {
	r.startTestItemRQ = &startTestItemRQ
	return r
}

func (r ApiStartRootItem1Request) Execute() (*EntryCreatedAsyncRS, *http.Response, error) {
	return r.ApiService.StartRootItem1Execute(r)
}

/*
StartRootItem1 Start Root Item

Start a root test item

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectName
	@return ApiStartRootItem1Request
*/
func (a *TestItemAsyncAPIService) StartRootItem1(ctx context.Context, projectName string) ApiStartRootItem1Request {
	return ApiStartRootItem1Request{
		ApiService:  a,
		ctx:         ctx,
		projectName: projectName,
	}
}

// Execute executes the request
//
//	@return EntryCreatedAsyncRS
func (a *TestItemAsyncAPIService) StartRootItem1Execute(r ApiStartRootItem1Request) (*EntryCreatedAsyncRS, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EntryCreatedAsyncRS
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TestItemAsyncAPIService.StartRootItem1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{projectName}/item"
	localVarPath = strings.Replace(localVarPath, "{"+"projectName"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTestItemRQ == nil {
		return localVarReturnValue, nil, reportError("startTestItemRQ is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.startTestItemRQ
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStartRootItem2Request struct {
	ctx             context.Context
	ApiService      *TestItemAsyncAPIService
	projectName     string
	startTestItemRQ *StartTestItemRQ
}

func (r ApiStartRootItem2Request) StartTestItemRQ(startTestItemRQ StartTestItemRQ) ApiStartRootItem2Request {
	r.startTestItemRQ = &startTestItemRQ
	return r
}

func (r ApiStartRootItem2Request) Execute() (*EntryCreatedAsyncRS, *http.Response, error) {
	return r.ApiService.StartRootItem2Execute(r)
}

/*
StartRootItem2 Start Root Item

Start a root test item

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectName
	@return ApiStartRootItem2Request
*/
func (a *TestItemAsyncAPIService) StartRootItem2(ctx context.Context, projectName string) ApiStartRootItem2Request {
	return ApiStartRootItem2Request{
		ApiService:  a,
		ctx:         ctx,
		projectName: projectName,
	}
}

// Execute executes the request
//
//	@return EntryCreatedAsyncRS
func (a *TestItemAsyncAPIService) StartRootItem2Execute(r ApiStartRootItem2Request) (*EntryCreatedAsyncRS, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EntryCreatedAsyncRS
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TestItemAsyncAPIService.StartRootItem2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{projectName}/item/"
	localVarPath = strings.Replace(localVarPath, "{"+"projectName"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTestItemRQ == nil {
		return localVarReturnValue, nil, reportError("startTestItemRQ is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.startTestItemRQ
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
