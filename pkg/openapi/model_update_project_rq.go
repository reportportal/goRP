/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateProjectRQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProjectRQ{}

// UpdateProjectRQ struct for UpdateProjectRQ
type UpdateProjectRQ struct {
	Users         map[string]string           `json:"users,omitempty"`
	Configuration *ProjectConfigurationUpdate `json:"configuration,omitempty"`
}

// NewUpdateProjectRQ instantiates a new UpdateProjectRQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProjectRQ() *UpdateProjectRQ {
	this := UpdateProjectRQ{}
	return &this
}

// NewUpdateProjectRQWithDefaults instantiates a new UpdateProjectRQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProjectRQWithDefaults() *UpdateProjectRQ {
	this := UpdateProjectRQ{}
	return &this
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *UpdateProjectRQ) GetUsers() map[string]string {
	if o == nil || IsNil(o.Users) {
		var ret map[string]string
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProjectRQ) GetUsersOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Users) {
		return map[string]string{}, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *UpdateProjectRQ) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given map[string]string and assigns it to the Users field.
func (o *UpdateProjectRQ) SetUsers(v map[string]string) {
	o.Users = v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *UpdateProjectRQ) GetConfiguration() ProjectConfigurationUpdate {
	if o == nil || IsNil(o.Configuration) {
		var ret ProjectConfigurationUpdate
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProjectRQ) GetConfigurationOk() (*ProjectConfigurationUpdate, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *UpdateProjectRQ) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given ProjectConfigurationUpdate and assigns it to the Configuration field.
func (o *UpdateProjectRQ) SetConfiguration(v ProjectConfigurationUpdate) {
	o.Configuration = &v
}

func (o UpdateProjectRQ) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProjectRQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	return toSerialize, nil
}

type NullableUpdateProjectRQ struct {
	value *UpdateProjectRQ
	isSet bool
}

func (v NullableUpdateProjectRQ) Get() *UpdateProjectRQ {
	return v.value
}

func (v *NullableUpdateProjectRQ) Set(val *UpdateProjectRQ) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProjectRQ) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProjectRQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProjectRQ(val *UpdateProjectRQ) *NullableUpdateProjectRQ {
	return &NullableUpdateProjectRQ{value: val, isSet: true}
}

func (v NullableUpdateProjectRQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProjectRQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
