/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DeleteBulkRS type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteBulkRS{}

// DeleteBulkRS struct for DeleteBulkRS
type DeleteBulkRS struct {
	SuccessfullyDeleted []int64   `json:"successfullyDeleted,omitempty"`
	NotFound            []int64   `json:"notFound,omitempty"`
	Errors              []ErrorRS `json:"errors,omitempty"`
}

// NewDeleteBulkRS instantiates a new DeleteBulkRS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteBulkRS() *DeleteBulkRS {
	this := DeleteBulkRS{}
	return &this
}

// NewDeleteBulkRSWithDefaults instantiates a new DeleteBulkRS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteBulkRSWithDefaults() *DeleteBulkRS {
	this := DeleteBulkRS{}
	return &this
}

// GetSuccessfullyDeleted returns the SuccessfullyDeleted field value if set, zero value otherwise.
func (o *DeleteBulkRS) GetSuccessfullyDeleted() []int64 {
	if o == nil || IsNil(o.SuccessfullyDeleted) {
		var ret []int64
		return ret
	}
	return o.SuccessfullyDeleted
}

// GetSuccessfullyDeletedOk returns a tuple with the SuccessfullyDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteBulkRS) GetSuccessfullyDeletedOk() ([]int64, bool) {
	if o == nil || IsNil(o.SuccessfullyDeleted) {
		return nil, false
	}
	return o.SuccessfullyDeleted, true
}

// HasSuccessfullyDeleted returns a boolean if a field has been set.
func (o *DeleteBulkRS) HasSuccessfullyDeleted() bool {
	if o != nil && !IsNil(o.SuccessfullyDeleted) {
		return true
	}

	return false
}

// SetSuccessfullyDeleted gets a reference to the given []int64 and assigns it to the SuccessfullyDeleted field.
func (o *DeleteBulkRS) SetSuccessfullyDeleted(v []int64) {
	o.SuccessfullyDeleted = v
}

// GetNotFound returns the NotFound field value if set, zero value otherwise.
func (o *DeleteBulkRS) GetNotFound() []int64 {
	if o == nil || IsNil(o.NotFound) {
		var ret []int64
		return ret
	}
	return o.NotFound
}

// GetNotFoundOk returns a tuple with the NotFound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteBulkRS) GetNotFoundOk() ([]int64, bool) {
	if o == nil || IsNil(o.NotFound) {
		return nil, false
	}
	return o.NotFound, true
}

// HasNotFound returns a boolean if a field has been set.
func (o *DeleteBulkRS) HasNotFound() bool {
	if o != nil && !IsNil(o.NotFound) {
		return true
	}

	return false
}

// SetNotFound gets a reference to the given []int64 and assigns it to the NotFound field.
func (o *DeleteBulkRS) SetNotFound(v []int64) {
	o.NotFound = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *DeleteBulkRS) GetErrors() []ErrorRS {
	if o == nil || IsNil(o.Errors) {
		var ret []ErrorRS
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteBulkRS) GetErrorsOk() ([]ErrorRS, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *DeleteBulkRS) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ErrorRS and assigns it to the Errors field.
func (o *DeleteBulkRS) SetErrors(v []ErrorRS) {
	o.Errors = v
}

func (o DeleteBulkRS) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteBulkRS) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SuccessfullyDeleted) {
		toSerialize["successfullyDeleted"] = o.SuccessfullyDeleted
	}
	if !IsNil(o.NotFound) {
		toSerialize["notFound"] = o.NotFound
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableDeleteBulkRS struct {
	value *DeleteBulkRS
	isSet bool
}

func (v NullableDeleteBulkRS) Get() *DeleteBulkRS {
	return v.value
}

func (v *NullableDeleteBulkRS) Set(val *DeleteBulkRS) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteBulkRS) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteBulkRS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteBulkRS(val *DeleteBulkRS) *NullableDeleteBulkRS {
	return &NullableDeleteBulkRS{value: val, isSet: true}
}

func (v NullableDeleteBulkRS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteBulkRS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
