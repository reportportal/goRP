/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IssueSubTypeResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssueSubTypeResource{}

// IssueSubTypeResource struct for IssueSubTypeResource
type IssueSubTypeResource struct {
	Id        *int64  `json:"id,omitempty"`
	Locator   *string `json:"locator,omitempty"`
	TypeRef   *string `json:"typeRef,omitempty"`
	LongName  *string `json:"longName,omitempty"`
	ShortName *string `json:"shortName,omitempty"`
	Color     *string `json:"color,omitempty"`
}

// NewIssueSubTypeResource instantiates a new IssueSubTypeResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueSubTypeResource() *IssueSubTypeResource {
	this := IssueSubTypeResource{}
	return &this
}

// NewIssueSubTypeResourceWithDefaults instantiates a new IssueSubTypeResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueSubTypeResourceWithDefaults() *IssueSubTypeResource {
	this := IssueSubTypeResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IssueSubTypeResource) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSubTypeResource) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IssueSubTypeResource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *IssueSubTypeResource) SetId(v int64) {
	o.Id = &v
}

// GetLocator returns the Locator field value if set, zero value otherwise.
func (o *IssueSubTypeResource) GetLocator() string {
	if o == nil || IsNil(o.Locator) {
		var ret string
		return ret
	}
	return *o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSubTypeResource) GetLocatorOk() (*string, bool) {
	if o == nil || IsNil(o.Locator) {
		return nil, false
	}
	return o.Locator, true
}

// HasLocator returns a boolean if a field has been set.
func (o *IssueSubTypeResource) HasLocator() bool {
	if o != nil && !IsNil(o.Locator) {
		return true
	}

	return false
}

// SetLocator gets a reference to the given string and assigns it to the Locator field.
func (o *IssueSubTypeResource) SetLocator(v string) {
	o.Locator = &v
}

// GetTypeRef returns the TypeRef field value if set, zero value otherwise.
func (o *IssueSubTypeResource) GetTypeRef() string {
	if o == nil || IsNil(o.TypeRef) {
		var ret string
		return ret
	}
	return *o.TypeRef
}

// GetTypeRefOk returns a tuple with the TypeRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSubTypeResource) GetTypeRefOk() (*string, bool) {
	if o == nil || IsNil(o.TypeRef) {
		return nil, false
	}
	return o.TypeRef, true
}

// HasTypeRef returns a boolean if a field has been set.
func (o *IssueSubTypeResource) HasTypeRef() bool {
	if o != nil && !IsNil(o.TypeRef) {
		return true
	}

	return false
}

// SetTypeRef gets a reference to the given string and assigns it to the TypeRef field.
func (o *IssueSubTypeResource) SetTypeRef(v string) {
	o.TypeRef = &v
}

// GetLongName returns the LongName field value if set, zero value otherwise.
func (o *IssueSubTypeResource) GetLongName() string {
	if o == nil || IsNil(o.LongName) {
		var ret string
		return ret
	}
	return *o.LongName
}

// GetLongNameOk returns a tuple with the LongName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSubTypeResource) GetLongNameOk() (*string, bool) {
	if o == nil || IsNil(o.LongName) {
		return nil, false
	}
	return o.LongName, true
}

// HasLongName returns a boolean if a field has been set.
func (o *IssueSubTypeResource) HasLongName() bool {
	if o != nil && !IsNil(o.LongName) {
		return true
	}

	return false
}

// SetLongName gets a reference to the given string and assigns it to the LongName field.
func (o *IssueSubTypeResource) SetLongName(v string) {
	o.LongName = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *IssueSubTypeResource) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSubTypeResource) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *IssueSubTypeResource) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *IssueSubTypeResource) SetShortName(v string) {
	o.ShortName = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *IssueSubTypeResource) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssueSubTypeResource) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *IssueSubTypeResource) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *IssueSubTypeResource) SetColor(v string) {
	o.Color = &v
}

func (o IssueSubTypeResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueSubTypeResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Locator) {
		toSerialize["locator"] = o.Locator
	}
	if !IsNil(o.TypeRef) {
		toSerialize["typeRef"] = o.TypeRef
	}
	if !IsNil(o.LongName) {
		toSerialize["longName"] = o.LongName
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	return toSerialize, nil
}

type NullableIssueSubTypeResource struct {
	value *IssueSubTypeResource
	isSet bool
}

func (v NullableIssueSubTypeResource) Get() *IssueSubTypeResource {
	return v.value
}

func (v *NullableIssueSubTypeResource) Set(val *IssueSubTypeResource) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueSubTypeResource) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueSubTypeResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueSubTypeResource(val *IssueSubTypeResource) *NullableIssueSubTypeResource {
	return &NullableIssueSubTypeResource{value: val, isSet: true}
}

func (v NullableIssueSubTypeResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueSubTypeResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
