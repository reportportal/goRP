/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ProjectInfoResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectInfoResource{}

// ProjectInfoResource struct for ProjectInfoResource
type ProjectInfoResource struct {
	Id               int64             `json:"id"`
	ProjectName      string            `json:"projectName"`
	UsersQuantity    int32             `json:"usersQuantity"`
	LaunchesQuantity int32             `json:"launchesQuantity"`
	LaunchesPerUser  []LaunchesPerUser `json:"launchesPerUser,omitempty"`
	UniqueTickets    *int32            `json:"uniqueTickets,omitempty"`
	LaunchesPerWeek  *string           `json:"launchesPerWeek,omitempty"`
	LastRun          time.Time         `json:"lastRun"`
	CreationDate     time.Time         `json:"creationDate"`
	EntryType        *string           `json:"entryType,omitempty"`
	Organization     *string           `json:"organization,omitempty"`
}

type _ProjectInfoResource ProjectInfoResource

// NewProjectInfoResource instantiates a new ProjectInfoResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectInfoResource(id int64, projectName string, usersQuantity, launchesQuantity int32, lastRun, creationDate time.Time) *ProjectInfoResource {
	this := ProjectInfoResource{}
	this.Id = id
	this.ProjectName = projectName
	this.UsersQuantity = usersQuantity
	this.LaunchesQuantity = launchesQuantity
	this.LastRun = lastRun
	this.CreationDate = creationDate
	return &this
}

// NewProjectInfoResourceWithDefaults instantiates a new ProjectInfoResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectInfoResourceWithDefaults() *ProjectInfoResource {
	this := ProjectInfoResource{}
	return &this
}

// GetId returns the Id field value
func (o *ProjectInfoResource) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProjectInfoResource) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProjectInfoResource) SetId(v int64) {
	o.Id = v
}

// GetProjectName returns the ProjectName field value
func (o *ProjectInfoResource) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *ProjectInfoResource) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *ProjectInfoResource) SetProjectName(v string) {
	o.ProjectName = v
}

// GetUsersQuantity returns the UsersQuantity field value
func (o *ProjectInfoResource) GetUsersQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UsersQuantity
}

// GetUsersQuantityOk returns a tuple with the UsersQuantity field value
// and a boolean to check if the value has been set.
func (o *ProjectInfoResource) GetUsersQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsersQuantity, true
}

// SetUsersQuantity sets field value
func (o *ProjectInfoResource) SetUsersQuantity(v int32) {
	o.UsersQuantity = v
}

// GetLaunchesQuantity returns the LaunchesQuantity field value
func (o *ProjectInfoResource) GetLaunchesQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LaunchesQuantity
}

// GetLaunchesQuantityOk returns a tuple with the LaunchesQuantity field value
// and a boolean to check if the value has been set.
func (o *ProjectInfoResource) GetLaunchesQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LaunchesQuantity, true
}

// SetLaunchesQuantity sets field value
func (o *ProjectInfoResource) SetLaunchesQuantity(v int32) {
	o.LaunchesQuantity = v
}

// GetLaunchesPerUser returns the LaunchesPerUser field value if set, zero value otherwise.
func (o *ProjectInfoResource) GetLaunchesPerUser() []LaunchesPerUser {
	if o == nil || IsNil(o.LaunchesPerUser) {
		var ret []LaunchesPerUser
		return ret
	}
	return o.LaunchesPerUser
}

// GetLaunchesPerUserOk returns a tuple with the LaunchesPerUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectInfoResource) GetLaunchesPerUserOk() ([]LaunchesPerUser, bool) {
	if o == nil || IsNil(o.LaunchesPerUser) {
		return nil, false
	}
	return o.LaunchesPerUser, true
}

// HasLaunchesPerUser returns a boolean if a field has been set.
func (o *ProjectInfoResource) HasLaunchesPerUser() bool {
	if o != nil && !IsNil(o.LaunchesPerUser) {
		return true
	}

	return false
}

// SetLaunchesPerUser gets a reference to the given []LaunchesPerUser and assigns it to the LaunchesPerUser field.
func (o *ProjectInfoResource) SetLaunchesPerUser(v []LaunchesPerUser) {
	o.LaunchesPerUser = v
}

// GetUniqueTickets returns the UniqueTickets field value if set, zero value otherwise.
func (o *ProjectInfoResource) GetUniqueTickets() int32 {
	if o == nil || IsNil(o.UniqueTickets) {
		var ret int32
		return ret
	}
	return *o.UniqueTickets
}

// GetUniqueTicketsOk returns a tuple with the UniqueTickets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectInfoResource) GetUniqueTicketsOk() (*int32, bool) {
	if o == nil || IsNil(o.UniqueTickets) {
		return nil, false
	}
	return o.UniqueTickets, true
}

// HasUniqueTickets returns a boolean if a field has been set.
func (o *ProjectInfoResource) HasUniqueTickets() bool {
	if o != nil && !IsNil(o.UniqueTickets) {
		return true
	}

	return false
}

// SetUniqueTickets gets a reference to the given int32 and assigns it to the UniqueTickets field.
func (o *ProjectInfoResource) SetUniqueTickets(v int32) {
	o.UniqueTickets = &v
}

// GetLaunchesPerWeek returns the LaunchesPerWeek field value if set, zero value otherwise.
func (o *ProjectInfoResource) GetLaunchesPerWeek() string {
	if o == nil || IsNil(o.LaunchesPerWeek) {
		var ret string
		return ret
	}
	return *o.LaunchesPerWeek
}

// GetLaunchesPerWeekOk returns a tuple with the LaunchesPerWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectInfoResource) GetLaunchesPerWeekOk() (*string, bool) {
	if o == nil || IsNil(o.LaunchesPerWeek) {
		return nil, false
	}
	return o.LaunchesPerWeek, true
}

// HasLaunchesPerWeek returns a boolean if a field has been set.
func (o *ProjectInfoResource) HasLaunchesPerWeek() bool {
	if o != nil && !IsNil(o.LaunchesPerWeek) {
		return true
	}

	return false
}

// SetLaunchesPerWeek gets a reference to the given string and assigns it to the LaunchesPerWeek field.
func (o *ProjectInfoResource) SetLaunchesPerWeek(v string) {
	o.LaunchesPerWeek = &v
}

// GetLastRun returns the LastRun field value
func (o *ProjectInfoResource) GetLastRun() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastRun
}

// GetLastRunOk returns a tuple with the LastRun field value
// and a boolean to check if the value has been set.
func (o *ProjectInfoResource) GetLastRunOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastRun, true
}

// SetLastRun sets field value
func (o *ProjectInfoResource) SetLastRun(v time.Time) {
	o.LastRun = v
}

// GetCreationDate returns the CreationDate field value
func (o *ProjectInfoResource) GetCreationDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value
// and a boolean to check if the value has been set.
func (o *ProjectInfoResource) GetCreationDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationDate, true
}

// SetCreationDate sets field value
func (o *ProjectInfoResource) SetCreationDate(v time.Time) {
	o.CreationDate = v
}

// GetEntryType returns the EntryType field value if set, zero value otherwise.
func (o *ProjectInfoResource) GetEntryType() string {
	if o == nil || IsNil(o.EntryType) {
		var ret string
		return ret
	}
	return *o.EntryType
}

// GetEntryTypeOk returns a tuple with the EntryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectInfoResource) GetEntryTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntryType) {
		return nil, false
	}
	return o.EntryType, true
}

// HasEntryType returns a boolean if a field has been set.
func (o *ProjectInfoResource) HasEntryType() bool {
	if o != nil && !IsNil(o.EntryType) {
		return true
	}

	return false
}

// SetEntryType gets a reference to the given string and assigns it to the EntryType field.
func (o *ProjectInfoResource) SetEntryType(v string) {
	o.EntryType = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *ProjectInfoResource) GetOrganization() string {
	if o == nil || IsNil(o.Organization) {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectInfoResource) GetOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *ProjectInfoResource) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *ProjectInfoResource) SetOrganization(v string) {
	o.Organization = &v
}

func (o ProjectInfoResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectInfoResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["projectName"] = o.ProjectName
	toSerialize["usersQuantity"] = o.UsersQuantity
	toSerialize["launchesQuantity"] = o.LaunchesQuantity
	if !IsNil(o.LaunchesPerUser) {
		toSerialize["launchesPerUser"] = o.LaunchesPerUser
	}
	if !IsNil(o.UniqueTickets) {
		toSerialize["uniqueTickets"] = o.UniqueTickets
	}
	if !IsNil(o.LaunchesPerWeek) {
		toSerialize["launchesPerWeek"] = o.LaunchesPerWeek
	}
	toSerialize["lastRun"] = o.LastRun
	toSerialize["creationDate"] = o.CreationDate
	if !IsNil(o.EntryType) {
		toSerialize["entryType"] = o.EntryType
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	return toSerialize, nil
}

func (o *ProjectInfoResource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"projectName",
		"usersQuantity",
		"launchesQuantity",
		"lastRun",
		"creationDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectInfoResource := _ProjectInfoResource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectInfoResource)

	if err != nil {
		return err
	}

	*o = ProjectInfoResource(varProjectInfoResource)

	return err
}

type NullableProjectInfoResource struct {
	value *ProjectInfoResource
	isSet bool
}

func (v NullableProjectInfoResource) Get() *ProjectInfoResource {
	return v.value
}

func (v *NullableProjectInfoResource) Set(val *ProjectInfoResource) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectInfoResource) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectInfoResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectInfoResource(val *ProjectInfoResource) *NullableProjectInfoResource {
	return &NullableProjectInfoResource{value: val, isSet: true}
}

func (v NullableProjectInfoResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectInfoResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
