/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SearchLogRq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchLogRq{}

// SearchLogRq struct for SearchLogRq
type SearchLogRq struct {
	FilterId   *int64 `json:"filterId,omitempty"`
	SearchMode string `json:"searchMode"`
}

type _SearchLogRq SearchLogRq

// NewSearchLogRq instantiates a new SearchLogRq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchLogRq(searchMode string) *SearchLogRq {
	this := SearchLogRq{}
	this.SearchMode = searchMode
	return &this
}

// NewSearchLogRqWithDefaults instantiates a new SearchLogRq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchLogRqWithDefaults() *SearchLogRq {
	this := SearchLogRq{}
	return &this
}

// GetFilterId returns the FilterId field value if set, zero value otherwise.
func (o *SearchLogRq) GetFilterId() int64 {
	if o == nil || IsNil(o.FilterId) {
		var ret int64
		return ret
	}
	return *o.FilterId
}

// GetFilterIdOk returns a tuple with the FilterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchLogRq) GetFilterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FilterId) {
		return nil, false
	}
	return o.FilterId, true
}

// HasFilterId returns a boolean if a field has been set.
func (o *SearchLogRq) HasFilterId() bool {
	if o != nil && !IsNil(o.FilterId) {
		return true
	}

	return false
}

// SetFilterId gets a reference to the given int64 and assigns it to the FilterId field.
func (o *SearchLogRq) SetFilterId(v int64) {
	o.FilterId = &v
}

// GetSearchMode returns the SearchMode field value
func (o *SearchLogRq) GetSearchMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SearchMode
}

// GetSearchModeOk returns a tuple with the SearchMode field value
// and a boolean to check if the value has been set.
func (o *SearchLogRq) GetSearchModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchMode, true
}

// SetSearchMode sets field value
func (o *SearchLogRq) SetSearchMode(v string) {
	o.SearchMode = v
}

func (o SearchLogRq) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchLogRq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilterId) {
		toSerialize["filterId"] = o.FilterId
	}
	toSerialize["searchMode"] = o.SearchMode
	return toSerialize, nil
}

func (o *SearchLogRq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"searchMode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchLogRq := _SearchLogRq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchLogRq)

	if err != nil {
		return err
	}

	*o = SearchLogRq(varSearchLogRq)

	return err
}

type NullableSearchLogRq struct {
	value *SearchLogRq
	isSet bool
}

func (v NullableSearchLogRq) Get() *SearchLogRq {
	return v.value
}

func (v *NullableSearchLogRq) Set(val *SearchLogRq) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchLogRq) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchLogRq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchLogRq(val *SearchLogRq) *NullableSearchLogRq {
	return &NullableSearchLogRq{value: val, isSet: true}
}

func (v NullableSearchLogRq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchLogRq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
