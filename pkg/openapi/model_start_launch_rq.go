/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the StartLaunchRQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StartLaunchRQ{}

// StartLaunchRQ Start launch request body
type StartLaunchRQ struct {
	StartTime   time.Time          `json:"startTime"`
	Name        string             `json:"name"`
	Description *string            `json:"description,omitempty"`
	Attributes  []ItemAttributesRQ `json:"attributes,omitempty"`
	Uuid        string             `json:"uuid"`
	Mode        *string            `json:"mode,omitempty"`
	Rerun       *bool              `json:"rerun,omitempty"`
	// UUID of desired launch to rerun
	RerunOf *string `json:"rerunOf,omitempty"`
}

type _StartLaunchRQ StartLaunchRQ

// NewStartLaunchRQ instantiates a new StartLaunchRQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStartLaunchRQ(startTime time.Time, name string, uuid string) *StartLaunchRQ {
	this := StartLaunchRQ{}
	this.StartTime = startTime
	this.Name = name
	this.Uuid = uuid
	return &this
}

// NewStartLaunchRQWithDefaults instantiates a new StartLaunchRQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStartLaunchRQWithDefaults() *StartLaunchRQ {
	this := StartLaunchRQ{}
	return &this
}

// GetStartTime returns the StartTime field value
func (o *StartLaunchRQ) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *StartLaunchRQ) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *StartLaunchRQ) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetName returns the Name field value
func (o *StartLaunchRQ) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StartLaunchRQ) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StartLaunchRQ) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *StartLaunchRQ) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartLaunchRQ) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *StartLaunchRQ) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *StartLaunchRQ) SetDescription(v string) {
	o.Description = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *StartLaunchRQ) GetAttributes() []ItemAttributesRQ {
	if o == nil || IsNil(o.Attributes) {
		var ret []ItemAttributesRQ
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartLaunchRQ) GetAttributesOk() ([]ItemAttributesRQ, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *StartLaunchRQ) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []ItemAttributesRQ and assigns it to the Attributes field.
func (o *StartLaunchRQ) SetAttributes(v []ItemAttributesRQ) {
	o.Attributes = v
}

// GetUuid returns the Uuid field value
func (o *StartLaunchRQ) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *StartLaunchRQ) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *StartLaunchRQ) SetUuid(v string) {
	o.Uuid = v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *StartLaunchRQ) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartLaunchRQ) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *StartLaunchRQ) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *StartLaunchRQ) SetMode(v string) {
	o.Mode = &v
}

// GetRerun returns the Rerun field value if set, zero value otherwise.
func (o *StartLaunchRQ) GetRerun() bool {
	if o == nil || IsNil(o.Rerun) {
		var ret bool
		return ret
	}
	return *o.Rerun
}

// GetRerunOk returns a tuple with the Rerun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartLaunchRQ) GetRerunOk() (*bool, bool) {
	if o == nil || IsNil(o.Rerun) {
		return nil, false
	}
	return o.Rerun, true
}

// HasRerun returns a boolean if a field has been set.
func (o *StartLaunchRQ) HasRerun() bool {
	if o != nil && !IsNil(o.Rerun) {
		return true
	}

	return false
}

// SetRerun gets a reference to the given bool and assigns it to the Rerun field.
func (o *StartLaunchRQ) SetRerun(v bool) {
	o.Rerun = &v
}

// GetRerunOf returns the RerunOf field value if set, zero value otherwise.
func (o *StartLaunchRQ) GetRerunOf() string {
	if o == nil || IsNil(o.RerunOf) {
		var ret string
		return ret
	}
	return *o.RerunOf
}

// GetRerunOfOk returns a tuple with the RerunOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StartLaunchRQ) GetRerunOfOk() (*string, bool) {
	if o == nil || IsNil(o.RerunOf) {
		return nil, false
	}
	return o.RerunOf, true
}

// HasRerunOf returns a boolean if a field has been set.
func (o *StartLaunchRQ) HasRerunOf() bool {
	if o != nil && !IsNil(o.RerunOf) {
		return true
	}

	return false
}

// SetRerunOf gets a reference to the given string and assigns it to the RerunOf field.
func (o *StartLaunchRQ) SetRerunOf(v string) {
	o.RerunOf = &v
}

func (o StartLaunchRQ) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StartLaunchRQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["startTime"] = o.StartTime
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	toSerialize["uuid"] = o.Uuid
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Rerun) {
		toSerialize["rerun"] = o.Rerun
	}
	if !IsNil(o.RerunOf) {
		toSerialize["rerunOf"] = o.RerunOf
	}
	return toSerialize, nil
}

func (o *StartLaunchRQ) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"startTime",
		"name",
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStartLaunchRQ := _StartLaunchRQ{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStartLaunchRQ)

	if err != nil {
		return err
	}

	*o = StartLaunchRQ(varStartLaunchRQ)

	return err
}

type NullableStartLaunchRQ struct {
	value *StartLaunchRQ
	isSet bool
}

func (v NullableStartLaunchRQ) Get() *StartLaunchRQ {
	return v.value
}

func (v *NullableStartLaunchRQ) Set(val *StartLaunchRQ) {
	v.value = val
	v.isSet = true
}

func (v NullableStartLaunchRQ) IsSet() bool {
	return v.isSet
}

func (v *NullableStartLaunchRQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStartLaunchRQ(val *StartLaunchRQ) *NullableStartLaunchRQ {
	return &NullableStartLaunchRQ{value: val, isSet: true}
}

func (v NullableStartLaunchRQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStartLaunchRQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
