/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GroupProjectsPage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupProjectsPage{}

// GroupProjectsPage Page of group projects.
type GroupProjectsPage struct {
	// The offset used for this page of results.
	Offset *int32 `json:"offset,omitempty"`
	// The limit used for this page of results. This will be the same as the limit query parameter unless it exceeded the maximum value allowed for this API endpoint.
	Limit *int32 `json:"limit,omitempty"`
	// One greater than the offset of the last item in the entire collection. The total number of items in the collection may be less than total_count.
	TotalCount *int32 `json:"total_count,omitempty"`
	// Field to define the sort field.
	Sort  *string `json:"sort,omitempty"`
	Order *string `json:"order,omitempty"`
	// List of group projects.
	Items []GroupProjectInfo `json:"items,omitempty"`
}

// NewGroupProjectsPage instantiates a new GroupProjectsPage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupProjectsPage() *GroupProjectsPage {
	this := GroupProjectsPage{}
	return &this
}

// NewGroupProjectsPageWithDefaults instantiates a new GroupProjectsPage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupProjectsPageWithDefaults() *GroupProjectsPage {
	this := GroupProjectsPage{}
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *GroupProjectsPage) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupProjectsPage) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *GroupProjectsPage) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *GroupProjectsPage) SetOffset(v int32) {
	o.Offset = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *GroupProjectsPage) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupProjectsPage) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *GroupProjectsPage) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *GroupProjectsPage) SetLimit(v int32) {
	o.Limit = &v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *GroupProjectsPage) GetTotalCount() int32 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupProjectsPage) GetTotalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *GroupProjectsPage) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *GroupProjectsPage) SetTotalCount(v int32) {
	o.TotalCount = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *GroupProjectsPage) GetSort() string {
	if o == nil || IsNil(o.Sort) {
		var ret string
		return ret
	}
	return *o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupProjectsPage) GetSortOk() (*string, bool) {
	if o == nil || IsNil(o.Sort) {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *GroupProjectsPage) HasSort() bool {
	if o != nil && !IsNil(o.Sort) {
		return true
	}

	return false
}

// SetSort gets a reference to the given string and assigns it to the Sort field.
func (o *GroupProjectsPage) SetSort(v string) {
	o.Sort = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *GroupProjectsPage) GetOrder() string {
	if o == nil || IsNil(o.Order) {
		var ret string
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupProjectsPage) GetOrderOk() (*string, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *GroupProjectsPage) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given string and assigns it to the Order field.
func (o *GroupProjectsPage) SetOrder(v string) {
	o.Order = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *GroupProjectsPage) GetItems() []GroupProjectInfo {
	if o == nil || IsNil(o.Items) {
		var ret []GroupProjectInfo
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupProjectsPage) GetItemsOk() ([]GroupProjectInfo, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *GroupProjectsPage) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []GroupProjectInfo and assigns it to the Items field.
func (o *GroupProjectsPage) SetItems(v []GroupProjectInfo) {
	o.Items = v
}

func (o GroupProjectsPage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupProjectsPage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.TotalCount) {
		toSerialize["total_count"] = o.TotalCount
	}
	if !IsNil(o.Sort) {
		toSerialize["sort"] = o.Sort
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableGroupProjectsPage struct {
	value *GroupProjectsPage
	isSet bool
}

func (v NullableGroupProjectsPage) Get() *GroupProjectsPage {
	return v.value
}

func (v *NullableGroupProjectsPage) Set(val *GroupProjectsPage) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupProjectsPage) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupProjectsPage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupProjectsPage(val *GroupProjectsPage) *NullableGroupProjectsPage {
	return &NullableGroupProjectsPage{value: val, isSet: true}
}

func (v NullableGroupProjectsPage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupProjectsPage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
