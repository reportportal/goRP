/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ActivityEventAPIService ActivityEventAPI service
type ActivityEventAPIService service

type ApiGetActivitiesRequest struct {
	ctx              context.Context
	ApiService       *ActivityEventAPIService
	limit            *int32
	offset           *int32
	order            *string
	sort             *string
	searchCriteriaRQ *SearchCriteriaRQ
}

func (r ApiGetActivitiesRequest) Limit(limit int32) ApiGetActivitiesRequest {
	r.limit = &limit
	return r
}

func (r ApiGetActivitiesRequest) Offset(offset int32) ApiGetActivitiesRequest {
	r.offset = &offset
	return r
}

func (r ApiGetActivitiesRequest) Order(order string) ApiGetActivitiesRequest {
	r.order = &order
	return r
}

func (r ApiGetActivitiesRequest) Sort(sort string) ApiGetActivitiesRequest {
	r.sort = &sort
	return r
}

func (r ApiGetActivitiesRequest) SearchCriteriaRQ(searchCriteriaRQ SearchCriteriaRQ) ApiGetActivitiesRequest {
	r.searchCriteriaRQ = &searchCriteriaRQ
	return r
}

func (r ApiGetActivitiesRequest) Execute() (*PagedResponseActivityEventResource, *http.Response, error) {
	return r.ApiService.GetActivitiesExecute(r)
}

/*
GetActivities Get activities by search criteria

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetActivitiesRequest
*/
func (a *ActivityEventAPIService) GetActivities(ctx context.Context) ApiGetActivitiesRequest {
	return ApiGetActivitiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PagedResponseActivityEventResource
func (a *ActivityEventAPIService) GetActivitiesExecute(r ApiGetActivitiesRequest) (*PagedResponseActivityEventResource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PagedResponseActivityEventResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityEventAPIService.GetActivities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/activities/searches"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.limit == nil {
		return localVarReturnValue, nil, reportError("limit is required and must be specified")
	}
	if *r.limit < 0 {
		return localVarReturnValue, nil, reportError("limit must be greater than 0")
	}
	if *r.limit > 300 {
		return localVarReturnValue, nil, reportError("limit must be less than 300")
	}
	if r.offset == nil {
		return localVarReturnValue, nil, reportError("offset is required and must be specified")
	}
	if *r.offset < 0 {
		return localVarReturnValue, nil, reportError("offset must be greater than 0")
	}
	if r.order == nil {
		return localVarReturnValue, nil, reportError("order is required and must be specified")
	}
	if r.sort == nil {
		return localVarReturnValue, nil, reportError("sort is required and must be specified")
	}
	if r.searchCriteriaRQ == nil {
		return localVarReturnValue, nil, reportError("searchCriteriaRQ is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "order", r.order, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.searchCriteriaRQ
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectSubjectNameRequest struct {
	ctx                  context.Context
	ApiService           *ActivityEventAPIService
	filterCntSubjectName *string
	projectName          string
}

func (r ApiGetProjectSubjectNameRequest) FilterCntSubjectName(filterCntSubjectName string) ApiGetProjectSubjectNameRequest {
	r.filterCntSubjectName = &filterCntSubjectName
	return r
}

func (r ApiGetProjectSubjectNameRequest) Execute() ([]string, *http.Response, error) {
	return r.ApiService.GetProjectSubjectNameExecute(r)
}

/*
GetProjectSubjectName Load project activities subjectNames by filter

Only for current project

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectName
	@return ApiGetProjectSubjectNameRequest
*/
func (a *ActivityEventAPIService) GetProjectSubjectName(ctx context.Context, projectName string) ApiGetProjectSubjectNameRequest {
	return ApiGetProjectSubjectNameRequest{
		ApiService:  a,
		ctx:         ctx,
		projectName: projectName,
	}
}

// Execute executes the request
//
//	@return []string
func (a *ActivityEventAPIService) GetProjectSubjectNameExecute(r ApiGetProjectSubjectNameRequest) ([]string, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityEventAPIService.GetProjectSubjectName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/activities/{projectName}/subjectName"
	localVarPath = strings.Replace(localVarPath, "{"+"projectName"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filterCntSubjectName == nil {
		return localVarReturnValue, nil, reportError("filterCntSubjectName is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "filter.cnt.subjectName", r.filterCntSubjectName, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
