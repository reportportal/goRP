/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateUserRQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUserRQ{}

// CreateUserRQ struct for CreateUserRQ
type CreateUserRQ struct {
	Email          string `json:"email"`
	Role           string `json:"role"`
	DefaultProject string `json:"defaultProject"`
}

type _CreateUserRQ CreateUserRQ

// NewCreateUserRQ instantiates a new CreateUserRQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserRQ(email string, role string, defaultProject string) *CreateUserRQ {
	this := CreateUserRQ{}
	this.Email = email
	this.Role = role
	this.DefaultProject = defaultProject
	return &this
}

// NewCreateUserRQWithDefaults instantiates a new CreateUserRQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserRQWithDefaults() *CreateUserRQ {
	this := CreateUserRQ{}
	return &this
}

// GetEmail returns the Email field value
func (o *CreateUserRQ) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CreateUserRQ) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CreateUserRQ) SetEmail(v string) {
	o.Email = v
}

// GetRole returns the Role field value
func (o *CreateUserRQ) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *CreateUserRQ) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *CreateUserRQ) SetRole(v string) {
	o.Role = v
}

// GetDefaultProject returns the DefaultProject field value
func (o *CreateUserRQ) GetDefaultProject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultProject
}

// GetDefaultProjectOk returns a tuple with the DefaultProject field value
// and a boolean to check if the value has been set.
func (o *CreateUserRQ) GetDefaultProjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultProject, true
}

// SetDefaultProject sets field value
func (o *CreateUserRQ) SetDefaultProject(v string) {
	o.DefaultProject = v
}

func (o CreateUserRQ) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUserRQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["role"] = o.Role
	toSerialize["defaultProject"] = o.DefaultProject
	return toSerialize, nil
}

func (o *CreateUserRQ) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"role",
		"defaultProject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateUserRQ := _CreateUserRQ{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateUserRQ)

	if err != nil {
		return err
	}

	*o = CreateUserRQ(varCreateUserRQ)

	return err
}

type NullableCreateUserRQ struct {
	value *CreateUserRQ
	isSet bool
}

func (v NullableCreateUserRQ) Get() *CreateUserRQ {
	return v.value
}

func (v *NullableCreateUserRQ) Set(val *CreateUserRQ) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserRQ) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserRQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserRQ(val *CreateUserRQ) *NullableCreateUserRQ {
	return &NullableCreateUserRQ{value: val, isSet: true}
}

func (v NullableCreateUserRQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserRQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
