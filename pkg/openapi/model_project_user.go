/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProjectUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectUser{}

// ProjectUser struct for ProjectUser
type ProjectUser struct {
	Uuid        *string `json:"uuid,omitempty"`
	Login       *string `json:"login,omitempty"`
	Email       *string `json:"email,omitempty"`
	ProjectRole *string `json:"projectRole,omitempty"`
	AccountRole *string `json:"accountRole,omitempty"`
	AccountType *string `json:"accountType,omitempty"`
}

// NewProjectUser instantiates a new ProjectUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectUser() *ProjectUser {
	this := ProjectUser{}
	return &this
}

// NewProjectUserWithDefaults instantiates a new ProjectUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectUserWithDefaults() *ProjectUser {
	this := ProjectUser{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ProjectUser) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectUser) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ProjectUser) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ProjectUser) SetUuid(v string) {
	o.Uuid = &v
}

// GetLogin returns the Login field value if set, zero value otherwise.
func (o *ProjectUser) GetLogin() string {
	if o == nil || IsNil(o.Login) {
		var ret string
		return ret
	}
	return *o.Login
}

// GetLoginOk returns a tuple with the Login field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectUser) GetLoginOk() (*string, bool) {
	if o == nil || IsNil(o.Login) {
		return nil, false
	}
	return o.Login, true
}

// HasLogin returns a boolean if a field has been set.
func (o *ProjectUser) HasLogin() bool {
	if o != nil && !IsNil(o.Login) {
		return true
	}

	return false
}

// SetLogin gets a reference to the given string and assigns it to the Login field.
func (o *ProjectUser) SetLogin(v string) {
	o.Login = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ProjectUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ProjectUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ProjectUser) SetEmail(v string) {
	o.Email = &v
}

// GetProjectRole returns the ProjectRole field value if set, zero value otherwise.
func (o *ProjectUser) GetProjectRole() string {
	if o == nil || IsNil(o.ProjectRole) {
		var ret string
		return ret
	}
	return *o.ProjectRole
}

// GetProjectRoleOk returns a tuple with the ProjectRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectUser) GetProjectRoleOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectRole) {
		return nil, false
	}
	return o.ProjectRole, true
}

// HasProjectRole returns a boolean if a field has been set.
func (o *ProjectUser) HasProjectRole() bool {
	if o != nil && !IsNil(o.ProjectRole) {
		return true
	}

	return false
}

// SetProjectRole gets a reference to the given string and assigns it to the ProjectRole field.
func (o *ProjectUser) SetProjectRole(v string) {
	o.ProjectRole = &v
}

// GetAccountRole returns the AccountRole field value if set, zero value otherwise.
func (o *ProjectUser) GetAccountRole() string {
	if o == nil || IsNil(o.AccountRole) {
		var ret string
		return ret
	}
	return *o.AccountRole
}

// GetAccountRoleOk returns a tuple with the AccountRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectUser) GetAccountRoleOk() (*string, bool) {
	if o == nil || IsNil(o.AccountRole) {
		return nil, false
	}
	return o.AccountRole, true
}

// HasAccountRole returns a boolean if a field has been set.
func (o *ProjectUser) HasAccountRole() bool {
	if o != nil && !IsNil(o.AccountRole) {
		return true
	}

	return false
}

// SetAccountRole gets a reference to the given string and assigns it to the AccountRole field.
func (o *ProjectUser) SetAccountRole(v string) {
	o.AccountRole = &v
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *ProjectUser) GetAccountType() string {
	if o == nil || IsNil(o.AccountType) {
		var ret string
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectUser) GetAccountTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AccountType) {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *ProjectUser) HasAccountType() bool {
	if o != nil && !IsNil(o.AccountType) {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given string and assigns it to the AccountType field.
func (o *ProjectUser) SetAccountType(v string) {
	o.AccountType = &v
}

func (o ProjectUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.Login) {
		toSerialize["login"] = o.Login
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.ProjectRole) {
		toSerialize["projectRole"] = o.ProjectRole
	}
	if !IsNil(o.AccountRole) {
		toSerialize["accountRole"] = o.AccountRole
	}
	if !IsNil(o.AccountType) {
		toSerialize["accountType"] = o.AccountType
	}
	return toSerialize, nil
}

type NullableProjectUser struct {
	value *ProjectUser
	isSet bool
}

func (v NullableProjectUser) Get() *ProjectUser {
	return v.value
}

func (v *NullableProjectUser) Set(val *ProjectUser) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectUser) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectUser(val *ProjectUser) *NullableProjectUser {
	return &NullableProjectUser{value: val, isSet: true}
}

func (v NullableProjectUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
