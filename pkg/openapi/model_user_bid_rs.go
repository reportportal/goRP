/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserBidRS type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserBidRS{}

// UserBidRS struct for UserBidRS
type UserBidRS struct {
	Uuid     *string `json:"uuid,omitempty"`
	IsActive *bool   `json:"isActive,omitempty"`
	Email    *string `json:"email,omitempty"`
}

// NewUserBidRS instantiates a new UserBidRS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserBidRS() *UserBidRS {
	this := UserBidRS{}
	return &this
}

// NewUserBidRSWithDefaults instantiates a new UserBidRS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserBidRSWithDefaults() *UserBidRS {
	this := UserBidRS{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *UserBidRS) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserBidRS) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *UserBidRS) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *UserBidRS) SetUuid(v string) {
	o.Uuid = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *UserBidRS) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserBidRS) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *UserBidRS) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *UserBidRS) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserBidRS) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserBidRS) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserBidRS) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserBidRS) SetEmail(v string) {
	o.Email = &v
}

func (o UserBidRS) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserBidRS) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	return toSerialize, nil
}

type NullableUserBidRS struct {
	value *UserBidRS
	isSet bool
}

func (v NullableUserBidRS) Get() *UserBidRS {
	return v.value
}

func (v *NullableUserBidRS) Set(val *UserBidRS) {
	v.value = val
	v.isSet = true
}

func (v NullableUserBidRS) IsSet() bool {
	return v.isSet
}

func (v *NullableUserBidRS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserBidRS(val *UserBidRS) *NullableUserBidRS {
	return &NullableUserBidRS{value: val, isSet: true}
}

func (v NullableUserBidRS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserBidRS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
