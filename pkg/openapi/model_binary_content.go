/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BinaryContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BinaryContent{}

// BinaryContent struct for BinaryContent
type BinaryContent struct {
	Id          string `json:"id"`
	ThumbnailId string `json:"thumbnailId"`
	ContentType string `json:"contentType"`
}

type _BinaryContent BinaryContent

// NewBinaryContent instantiates a new BinaryContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBinaryContent(id, thumbnailId, contentType string) *BinaryContent {
	this := BinaryContent{}
	this.Id = id
	this.ThumbnailId = thumbnailId
	this.ContentType = contentType
	return &this
}

// NewBinaryContentWithDefaults instantiates a new BinaryContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBinaryContentWithDefaults() *BinaryContent {
	this := BinaryContent{}
	return &this
}

// GetId returns the Id field value
func (o *BinaryContent) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BinaryContent) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BinaryContent) SetId(v string) {
	o.Id = v
}

// GetThumbnailId returns the ThumbnailId field value
func (o *BinaryContent) GetThumbnailId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ThumbnailId
}

// GetThumbnailIdOk returns a tuple with the ThumbnailId field value
// and a boolean to check if the value has been set.
func (o *BinaryContent) GetThumbnailIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThumbnailId, true
}

// SetThumbnailId sets field value
func (o *BinaryContent) SetThumbnailId(v string) {
	o.ThumbnailId = v
}

// GetContentType returns the ContentType field value
func (o *BinaryContent) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *BinaryContent) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *BinaryContent) SetContentType(v string) {
	o.ContentType = v
}

func (o BinaryContent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BinaryContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["thumbnailId"] = o.ThumbnailId
	toSerialize["contentType"] = o.ContentType
	return toSerialize, nil
}

func (o *BinaryContent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"thumbnailId",
		"contentType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBinaryContent := _BinaryContent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBinaryContent)

	if err != nil {
		return err
	}

	*o = BinaryContent(varBinaryContent)

	return err
}

type NullableBinaryContent struct {
	value *BinaryContent
	isSet bool
}

func (v NullableBinaryContent) Get() *BinaryContent {
	return v.value
}

func (v *NullableBinaryContent) Set(val *BinaryContent) {
	v.value = val
	v.isSet = true
}

func (v NullableBinaryContent) IsSet() bool {
	return v.isSet
}

func (v *NullableBinaryContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBinaryContent(val *BinaryContent) *NullableBinaryContent {
	return &NullableBinaryContent{value: val, isSet: true}
}

func (v NullableBinaryContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBinaryContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
