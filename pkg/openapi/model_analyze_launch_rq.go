/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AnalyzeLaunchRQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnalyzeLaunchRQ{}

// AnalyzeLaunchRQ struct for AnalyzeLaunchRQ
type AnalyzeLaunchRQ struct {
	LaunchId         int64    `json:"launchId"`
	AnalyzerMode     string   `json:"analyzerMode"`
	AnalyzerTypeName string   `json:"analyzerTypeName"`
	AnalyzeItemsMode []string `json:"analyzeItemsMode"`
}

type _AnalyzeLaunchRQ AnalyzeLaunchRQ

// NewAnalyzeLaunchRQ instantiates a new AnalyzeLaunchRQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyzeLaunchRQ(launchId int64, analyzerMode string, analyzerTypeName string, analyzeItemsMode []string) *AnalyzeLaunchRQ {
	this := AnalyzeLaunchRQ{}
	this.LaunchId = launchId
	this.AnalyzerMode = analyzerMode
	this.AnalyzerTypeName = analyzerTypeName
	this.AnalyzeItemsMode = analyzeItemsMode
	return &this
}

// NewAnalyzeLaunchRQWithDefaults instantiates a new AnalyzeLaunchRQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyzeLaunchRQWithDefaults() *AnalyzeLaunchRQ {
	this := AnalyzeLaunchRQ{}
	return &this
}

// GetLaunchId returns the LaunchId field value
func (o *AnalyzeLaunchRQ) GetLaunchId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LaunchId
}

// GetLaunchIdOk returns a tuple with the LaunchId field value
// and a boolean to check if the value has been set.
func (o *AnalyzeLaunchRQ) GetLaunchIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LaunchId, true
}

// SetLaunchId sets field value
func (o *AnalyzeLaunchRQ) SetLaunchId(v int64) {
	o.LaunchId = v
}

// GetAnalyzerMode returns the AnalyzerMode field value
func (o *AnalyzeLaunchRQ) GetAnalyzerMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AnalyzerMode
}

// GetAnalyzerModeOk returns a tuple with the AnalyzerMode field value
// and a boolean to check if the value has been set.
func (o *AnalyzeLaunchRQ) GetAnalyzerModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnalyzerMode, true
}

// SetAnalyzerMode sets field value
func (o *AnalyzeLaunchRQ) SetAnalyzerMode(v string) {
	o.AnalyzerMode = v
}

// GetAnalyzerTypeName returns the AnalyzerTypeName field value
func (o *AnalyzeLaunchRQ) GetAnalyzerTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AnalyzerTypeName
}

// GetAnalyzerTypeNameOk returns a tuple with the AnalyzerTypeName field value
// and a boolean to check if the value has been set.
func (o *AnalyzeLaunchRQ) GetAnalyzerTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnalyzerTypeName, true
}

// SetAnalyzerTypeName sets field value
func (o *AnalyzeLaunchRQ) SetAnalyzerTypeName(v string) {
	o.AnalyzerTypeName = v
}

// GetAnalyzeItemsMode returns the AnalyzeItemsMode field value
func (o *AnalyzeLaunchRQ) GetAnalyzeItemsMode() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AnalyzeItemsMode
}

// GetAnalyzeItemsModeOk returns a tuple with the AnalyzeItemsMode field value
// and a boolean to check if the value has been set.
func (o *AnalyzeLaunchRQ) GetAnalyzeItemsModeOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AnalyzeItemsMode, true
}

// SetAnalyzeItemsMode sets field value
func (o *AnalyzeLaunchRQ) SetAnalyzeItemsMode(v []string) {
	o.AnalyzeItemsMode = v
}

func (o AnalyzeLaunchRQ) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnalyzeLaunchRQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["launchId"] = o.LaunchId
	toSerialize["analyzerMode"] = o.AnalyzerMode
	toSerialize["analyzerTypeName"] = o.AnalyzerTypeName
	toSerialize["analyzeItemsMode"] = o.AnalyzeItemsMode
	return toSerialize, nil
}

func (o *AnalyzeLaunchRQ) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"launchId",
		"analyzerMode",
		"analyzerTypeName",
		"analyzeItemsMode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnalyzeLaunchRQ := _AnalyzeLaunchRQ{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnalyzeLaunchRQ)

	if err != nil {
		return err
	}

	*o = AnalyzeLaunchRQ(varAnalyzeLaunchRQ)

	return err
}

type NullableAnalyzeLaunchRQ struct {
	value *AnalyzeLaunchRQ
	isSet bool
}

func (v NullableAnalyzeLaunchRQ) Get() *AnalyzeLaunchRQ {
	return v.value
}

func (v *NullableAnalyzeLaunchRQ) Set(val *AnalyzeLaunchRQ) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyzeLaunchRQ) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyzeLaunchRQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyzeLaunchRQ(val *AnalyzeLaunchRQ) *NullableAnalyzeLaunchRQ {
	return &NullableAnalyzeLaunchRQ{value: val, isSet: true}
}

func (v NullableAnalyzeLaunchRQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyzeLaunchRQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
