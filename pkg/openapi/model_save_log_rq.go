/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SaveLogRQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SaveLogRQ{}

// SaveLogRQ struct for SaveLogRQ
type SaveLogRQ struct {
	// UUID of test item owned this log
	ItemUuid   *string   `json:"itemUuid,omitempty"`
	Uuid       *string   `json:"uuid,omitempty"`
	LaunchUuid string    `json:"launchUuid"`
	Time       time.Time `json:"time"`
	Message    *string   `json:"message,omitempty"`
	Level      *string   `json:"level,omitempty"`
	File       *File     `json:"file,omitempty"`
}

type _SaveLogRQ SaveLogRQ

// NewSaveLogRQ instantiates a new SaveLogRQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSaveLogRQ(launchUuid string, time time.Time) *SaveLogRQ {
	this := SaveLogRQ{}
	this.LaunchUuid = launchUuid
	this.Time = time
	return &this
}

// NewSaveLogRQWithDefaults instantiates a new SaveLogRQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaveLogRQWithDefaults() *SaveLogRQ {
	this := SaveLogRQ{}
	return &this
}

// GetItemUuid returns the ItemUuid field value if set, zero value otherwise.
func (o *SaveLogRQ) GetItemUuid() string {
	if o == nil || IsNil(o.ItemUuid) {
		var ret string
		return ret
	}
	return *o.ItemUuid
}

// GetItemUuidOk returns a tuple with the ItemUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveLogRQ) GetItemUuidOk() (*string, bool) {
	if o == nil || IsNil(o.ItemUuid) {
		return nil, false
	}
	return o.ItemUuid, true
}

// HasItemUuid returns a boolean if a field has been set.
func (o *SaveLogRQ) HasItemUuid() bool {
	if o != nil && !IsNil(o.ItemUuid) {
		return true
	}

	return false
}

// SetItemUuid gets a reference to the given string and assigns it to the ItemUuid field.
func (o *SaveLogRQ) SetItemUuid(v string) {
	o.ItemUuid = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *SaveLogRQ) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveLogRQ) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *SaveLogRQ) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *SaveLogRQ) SetUuid(v string) {
	o.Uuid = &v
}

// GetLaunchUuid returns the LaunchUuid field value
func (o *SaveLogRQ) GetLaunchUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LaunchUuid
}

// GetLaunchUuidOk returns a tuple with the LaunchUuid field value
// and a boolean to check if the value has been set.
func (o *SaveLogRQ) GetLaunchUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LaunchUuid, true
}

// SetLaunchUuid sets field value
func (o *SaveLogRQ) SetLaunchUuid(v string) {
	o.LaunchUuid = v
}

// GetTime returns the Time field value
func (o *SaveLogRQ) GetTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *SaveLogRQ) GetTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *SaveLogRQ) SetTime(v time.Time) {
	o.Time = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *SaveLogRQ) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveLogRQ) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *SaveLogRQ) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *SaveLogRQ) SetMessage(v string) {
	o.Message = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *SaveLogRQ) GetLevel() string {
	if o == nil || IsNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveLogRQ) GetLevelOk() (*string, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *SaveLogRQ) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *SaveLogRQ) SetLevel(v string) {
	o.Level = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *SaveLogRQ) GetFile() File {
	if o == nil || IsNil(o.File) {
		var ret File
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveLogRQ) GetFileOk() (*File, bool) {
	if o == nil || IsNil(o.File) {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *SaveLogRQ) HasFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given File and assigns it to the File field.
func (o *SaveLogRQ) SetFile(v File) {
	o.File = &v
}

func (o SaveLogRQ) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SaveLogRQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ItemUuid) {
		toSerialize["itemUuid"] = o.ItemUuid
	}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	toSerialize["launchUuid"] = o.LaunchUuid
	toSerialize["time"] = o.Time
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	return toSerialize, nil
}

func (o *SaveLogRQ) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"launchUuid",
		"time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSaveLogRQ := _SaveLogRQ{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSaveLogRQ)

	if err != nil {
		return err
	}

	*o = SaveLogRQ(varSaveLogRQ)

	return err
}

type NullableSaveLogRQ struct {
	value *SaveLogRQ
	isSet bool
}

func (v NullableSaveLogRQ) Get() *SaveLogRQ {
	return v.value
}

func (v *NullableSaveLogRQ) Set(val *SaveLogRQ) {
	v.value = val
	v.isSet = true
}

func (v NullableSaveLogRQ) IsSet() bool {
	return v.isSet
}

func (v *NullableSaveLogRQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSaveLogRQ(val *SaveLogRQ) *NullableSaveLogRQ {
	return &NullableSaveLogRQ{value: val, isSet: true}
}

func (v NullableSaveLogRQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSaveLogRQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
