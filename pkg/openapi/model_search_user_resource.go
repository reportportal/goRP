/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SearchUserResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchUserResource{}

// SearchUserResource struct for SearchUserResource
type SearchUserResource struct {
	Uuid       *string `json:"uuid,omitempty"`
	ExternalId *string `json:"externalId,omitempty"`
	Active     *bool   `json:"active,omitempty"`
	Id         int64   `json:"id"`
	Login      string  `json:"login"`
	Email      string  `json:"email"`
	FullName   *string `json:"fullName,omitempty"`
}

type _SearchUserResource SearchUserResource

// NewSearchUserResource instantiates a new SearchUserResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchUserResource(id int64, login string, email string) *SearchUserResource {
	this := SearchUserResource{}
	this.Id = id
	this.Login = login
	this.Email = email
	return &this
}

// NewSearchUserResourceWithDefaults instantiates a new SearchUserResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchUserResourceWithDefaults() *SearchUserResource {
	this := SearchUserResource{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *SearchUserResource) GetUuid() string {
	if o == nil || IsNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchUserResource) GetUuidOk() (*string, bool) {
	if o == nil || IsNil(o.Uuid) {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *SearchUserResource) HasUuid() bool {
	if o != nil && !IsNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *SearchUserResource) SetUuid(v string) {
	o.Uuid = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *SearchUserResource) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchUserResource) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *SearchUserResource) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *SearchUserResource) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *SearchUserResource) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchUserResource) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *SearchUserResource) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *SearchUserResource) SetActive(v bool) {
	o.Active = &v
}

// GetId returns the Id field value
func (o *SearchUserResource) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SearchUserResource) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SearchUserResource) SetId(v int64) {
	o.Id = v
}

// GetLogin returns the Login field value
func (o *SearchUserResource) GetLogin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Login
}

// GetLoginOk returns a tuple with the Login field value
// and a boolean to check if the value has been set.
func (o *SearchUserResource) GetLoginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Login, true
}

// SetLogin sets field value
func (o *SearchUserResource) SetLogin(v string) {
	o.Login = v
}

// GetEmail returns the Email field value
func (o *SearchUserResource) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *SearchUserResource) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *SearchUserResource) SetEmail(v string) {
	o.Email = v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *SearchUserResource) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchUserResource) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *SearchUserResource) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *SearchUserResource) SetFullName(v string) {
	o.FullName = &v
}

func (o SearchUserResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchUserResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["id"] = o.Id
	toSerialize["login"] = o.Login
	toSerialize["email"] = o.Email
	if !IsNil(o.FullName) {
		toSerialize["fullName"] = o.FullName
	}
	return toSerialize, nil
}

func (o *SearchUserResource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"login",
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchUserResource := _SearchUserResource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchUserResource)

	if err != nil {
		return err
	}

	*o = SearchUserResource(varSearchUserResource)

	return err
}

type NullableSearchUserResource struct {
	value *SearchUserResource
	isSet bool
}

func (v NullableSearchUserResource) Get() *SearchUserResource {
	return v.value
}

func (v *NullableSearchUserResource) Set(val *SearchUserResource) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchUserResource) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchUserResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchUserResource(val *SearchUserResource) *NullableSearchUserResource {
	return &NullableSearchUserResource{value: val, isSet: true}
}

func (v NullableSearchUserResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchUserResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
