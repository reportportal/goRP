/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Description type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Description{}

// Description struct for Description
type Description struct {
	Comment *string `json:"comment,omitempty"`
	Action  *string `json:"action,omitempty"`
}

// NewDescription instantiates a new Description object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescription() *Description {
	this := Description{}
	return &this
}

// NewDescriptionWithDefaults instantiates a new Description object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescriptionWithDefaults() *Description {
	this := Description{}
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Description) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Description) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Description) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Description) SetComment(v string) {
	o.Comment = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *Description) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Description) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *Description) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *Description) SetAction(v string) {
	o.Action = &v
}

func (o Description) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Description) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	return toSerialize, nil
}

type NullableDescription struct {
	value *Description
	isSet bool
}

func (v NullableDescription) Get() *Description {
	return v.value
}

func (v *NullableDescription) Set(val *Description) {
	v.value = val
	v.isSet = true
}

func (v NullableDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescription(val *Description) *NullableDescription {
	return &NullableDescription{value: val, isSet: true}
}

func (v NullableDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
