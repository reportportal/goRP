/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Issue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Issue{}

// Issue struct for Issue
type Issue struct {
	IssueType            string                `json:"issueType"`
	Comment              *string               `json:"comment,omitempty"`
	AutoAnalyzed         *bool                 `json:"autoAnalyzed,omitempty"`
	IgnoreAnalyzer       *bool                 `json:"ignoreAnalyzer,omitempty"`
	ExternalSystemIssues []ExternalSystemIssue `json:"externalSystemIssues,omitempty"`
}

type _Issue Issue

// NewIssue instantiates a new Issue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssue(issueType string) *Issue {
	this := Issue{}
	this.IssueType = issueType
	return &this
}

// NewIssueWithDefaults instantiates a new Issue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueWithDefaults() *Issue {
	this := Issue{}
	return &this
}

// GetIssueType returns the IssueType field value
func (o *Issue) GetIssueType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssueType
}

// GetIssueTypeOk returns a tuple with the IssueType field value
// and a boolean to check if the value has been set.
func (o *Issue) GetIssueTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IssueType, true
}

// SetIssueType sets field value
func (o *Issue) SetIssueType(v string) {
	o.IssueType = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Issue) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Issue) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Issue) SetComment(v string) {
	o.Comment = &v
}

// GetAutoAnalyzed returns the AutoAnalyzed field value if set, zero value otherwise.
func (o *Issue) GetAutoAnalyzed() bool {
	if o == nil || IsNil(o.AutoAnalyzed) {
		var ret bool
		return ret
	}
	return *o.AutoAnalyzed
}

// GetAutoAnalyzedOk returns a tuple with the AutoAnalyzed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetAutoAnalyzedOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoAnalyzed) {
		return nil, false
	}
	return o.AutoAnalyzed, true
}

// HasAutoAnalyzed returns a boolean if a field has been set.
func (o *Issue) HasAutoAnalyzed() bool {
	if o != nil && !IsNil(o.AutoAnalyzed) {
		return true
	}

	return false
}

// SetAutoAnalyzed gets a reference to the given bool and assigns it to the AutoAnalyzed field.
func (o *Issue) SetAutoAnalyzed(v bool) {
	o.AutoAnalyzed = &v
}

// GetIgnoreAnalyzer returns the IgnoreAnalyzer field value if set, zero value otherwise.
func (o *Issue) GetIgnoreAnalyzer() bool {
	if o == nil || IsNil(o.IgnoreAnalyzer) {
		var ret bool
		return ret
	}
	return *o.IgnoreAnalyzer
}

// GetIgnoreAnalyzerOk returns a tuple with the IgnoreAnalyzer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetIgnoreAnalyzerOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreAnalyzer) {
		return nil, false
	}
	return o.IgnoreAnalyzer, true
}

// HasIgnoreAnalyzer returns a boolean if a field has been set.
func (o *Issue) HasIgnoreAnalyzer() bool {
	if o != nil && !IsNil(o.IgnoreAnalyzer) {
		return true
	}

	return false
}

// SetIgnoreAnalyzer gets a reference to the given bool and assigns it to the IgnoreAnalyzer field.
func (o *Issue) SetIgnoreAnalyzer(v bool) {
	o.IgnoreAnalyzer = &v
}

// GetExternalSystemIssues returns the ExternalSystemIssues field value if set, zero value otherwise.
func (o *Issue) GetExternalSystemIssues() []ExternalSystemIssue {
	if o == nil || IsNil(o.ExternalSystemIssues) {
		var ret []ExternalSystemIssue
		return ret
	}
	return o.ExternalSystemIssues
}

// GetExternalSystemIssuesOk returns a tuple with the ExternalSystemIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Issue) GetExternalSystemIssuesOk() ([]ExternalSystemIssue, bool) {
	if o == nil || IsNil(o.ExternalSystemIssues) {
		return nil, false
	}
	return o.ExternalSystemIssues, true
}

// HasExternalSystemIssues returns a boolean if a field has been set.
func (o *Issue) HasExternalSystemIssues() bool {
	if o != nil && !IsNil(o.ExternalSystemIssues) {
		return true
	}

	return false
}

// SetExternalSystemIssues gets a reference to the given []ExternalSystemIssue and assigns it to the ExternalSystemIssues field.
func (o *Issue) SetExternalSystemIssues(v []ExternalSystemIssue) {
	o.ExternalSystemIssues = v
}

func (o Issue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Issue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["issueType"] = o.IssueType
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.AutoAnalyzed) {
		toSerialize["autoAnalyzed"] = o.AutoAnalyzed
	}
	if !IsNil(o.IgnoreAnalyzer) {
		toSerialize["ignoreAnalyzer"] = o.IgnoreAnalyzer
	}
	if !IsNil(o.ExternalSystemIssues) {
		toSerialize["externalSystemIssues"] = o.ExternalSystemIssues
	}
	return toSerialize, nil
}

func (o *Issue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"issueType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIssue := _Issue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIssue)

	if err != nil {
		return err
	}

	*o = Issue(varIssue)

	return err
}

type NullableIssue struct {
	value *Issue
	isSet bool
}

func (v NullableIssue) Get() *Issue {
	return v.value
}

func (v *NullableIssue) Set(val *Issue) {
	v.value = val
	v.isSet = true
}

func (v NullableIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssue(val *Issue) *NullableIssue {
	return &NullableIssue{value: val, isSet: true}
}

func (v NullableIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
