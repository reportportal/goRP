/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BulkUpdateFilterRQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BulkUpdateFilterRQ{}

// BulkUpdateFilterRQ struct for BulkUpdateFilterRQ
type BulkUpdateFilterRQ struct {
	Description *string               `json:"description,omitempty"`
	Name        string                `json:"name"`
	Type        string                `json:"type"`
	Conditions  []UserFilterCondition `json:"conditions"`
	Orders      []Order               `json:"orders"`
	Id          string                `json:"id"`
}

type _BulkUpdateFilterRQ BulkUpdateFilterRQ

// NewBulkUpdateFilterRQ instantiates a new BulkUpdateFilterRQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBulkUpdateFilterRQ(name string, type_ string, conditions []UserFilterCondition, orders []Order, id string) *BulkUpdateFilterRQ {
	this := BulkUpdateFilterRQ{}
	this.Name = name
	this.Type = type_
	this.Conditions = conditions
	this.Orders = orders
	this.Id = id
	return &this
}

// NewBulkUpdateFilterRQWithDefaults instantiates a new BulkUpdateFilterRQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBulkUpdateFilterRQWithDefaults() *BulkUpdateFilterRQ {
	this := BulkUpdateFilterRQ{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *BulkUpdateFilterRQ) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BulkUpdateFilterRQ) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *BulkUpdateFilterRQ) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *BulkUpdateFilterRQ) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *BulkUpdateFilterRQ) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BulkUpdateFilterRQ) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BulkUpdateFilterRQ) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *BulkUpdateFilterRQ) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BulkUpdateFilterRQ) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BulkUpdateFilterRQ) SetType(v string) {
	o.Type = v
}

// GetConditions returns the Conditions field value
func (o *BulkUpdateFilterRQ) GetConditions() []UserFilterCondition {
	if o == nil {
		var ret []UserFilterCondition
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *BulkUpdateFilterRQ) GetConditionsOk() ([]UserFilterCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Conditions, true
}

// SetConditions sets field value
func (o *BulkUpdateFilterRQ) SetConditions(v []UserFilterCondition) {
	o.Conditions = v
}

// GetOrders returns the Orders field value
func (o *BulkUpdateFilterRQ) GetOrders() []Order {
	if o == nil {
		var ret []Order
		return ret
	}

	return o.Orders
}

// GetOrdersOk returns a tuple with the Orders field value
// and a boolean to check if the value has been set.
func (o *BulkUpdateFilterRQ) GetOrdersOk() ([]Order, bool) {
	if o == nil {
		return nil, false
	}
	return o.Orders, true
}

// SetOrders sets field value
func (o *BulkUpdateFilterRQ) SetOrders(v []Order) {
	o.Orders = v
}

// GetId returns the Id field value
func (o *BulkUpdateFilterRQ) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BulkUpdateFilterRQ) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BulkUpdateFilterRQ) SetId(v string) {
	o.Id = v
}

func (o BulkUpdateFilterRQ) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BulkUpdateFilterRQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["conditions"] = o.Conditions
	toSerialize["orders"] = o.Orders
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *BulkUpdateFilterRQ) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"conditions",
		"orders",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBulkUpdateFilterRQ := _BulkUpdateFilterRQ{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBulkUpdateFilterRQ)

	if err != nil {
		return err
	}

	*o = BulkUpdateFilterRQ(varBulkUpdateFilterRQ)

	return err
}

type NullableBulkUpdateFilterRQ struct {
	value *BulkUpdateFilterRQ
	isSet bool
}

func (v NullableBulkUpdateFilterRQ) Get() *BulkUpdateFilterRQ {
	return v.value
}

func (v *NullableBulkUpdateFilterRQ) Set(val *BulkUpdateFilterRQ) {
	v.value = val
	v.isSet = true
}

func (v NullableBulkUpdateFilterRQ) IsSet() bool {
	return v.isSet
}

func (v *NullableBulkUpdateFilterRQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBulkUpdateFilterRQ(val *BulkUpdateFilterRQ) *NullableBulkUpdateFilterRQ {
	return &NullableBulkUpdateFilterRQ{value: val, isSet: true}
}

func (v NullableBulkUpdateFilterRQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBulkUpdateFilterRQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
