/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProjectSettingsResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectSettingsResource{}

// ProjectSettingsResource struct for ProjectSettingsResource
type ProjectSettingsResource struct {
	Project  int64                             `json:"project"`
	SubTypes map[string][]IssueSubTypeResource `json:"subTypes"`
}

type _ProjectSettingsResource ProjectSettingsResource

// NewProjectSettingsResource instantiates a new ProjectSettingsResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectSettingsResource(project int64, subTypes map[string][]IssueSubTypeResource) *ProjectSettingsResource {
	this := ProjectSettingsResource{}
	this.Project = project
	this.SubTypes = subTypes
	return &this
}

// NewProjectSettingsResourceWithDefaults instantiates a new ProjectSettingsResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectSettingsResourceWithDefaults() *ProjectSettingsResource {
	this := ProjectSettingsResource{}
	return &this
}

// GetProject returns the Project field value
func (o *ProjectSettingsResource) GetProject() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Project
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
func (o *ProjectSettingsResource) GetProjectOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Project, true
}

// SetProject sets field value
func (o *ProjectSettingsResource) SetProject(v int64) {
	o.Project = v
}

// GetSubTypes returns the SubTypes field value
func (o *ProjectSettingsResource) GetSubTypes() map[string][]IssueSubTypeResource {
	if o == nil {
		var ret map[string][]IssueSubTypeResource
		return ret
	}

	return o.SubTypes
}

// GetSubTypesOk returns a tuple with the SubTypes field value
// and a boolean to check if the value has been set.
func (o *ProjectSettingsResource) GetSubTypesOk() (map[string][]IssueSubTypeResource, bool) {
	if o == nil {
		return map[string][]IssueSubTypeResource{}, false
	}
	return o.SubTypes, true
}

// SetSubTypes sets field value
func (o *ProjectSettingsResource) SetSubTypes(v map[string][]IssueSubTypeResource) {
	o.SubTypes = v
}

func (o ProjectSettingsResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectSettingsResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["project"] = o.Project
	toSerialize["subTypes"] = o.SubTypes
	return toSerialize, nil
}

func (o *ProjectSettingsResource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"project",
		"subTypes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectSettingsResource := _ProjectSettingsResource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectSettingsResource)

	if err != nil {
		return err
	}

	*o = ProjectSettingsResource(varProjectSettingsResource)

	return err
}

type NullableProjectSettingsResource struct {
	value *ProjectSettingsResource
	isSet bool
}

func (v NullableProjectSettingsResource) Get() *ProjectSettingsResource {
	return v.value
}

func (v *NullableProjectSettingsResource) Set(val *ProjectSettingsResource) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectSettingsResource) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectSettingsResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectSettingsResource(val *ProjectSettingsResource) *NullableProjectSettingsResource {
	return &NullableProjectSettingsResource{value: val, isSet: true}
}

func (v NullableProjectSettingsResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectSettingsResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
