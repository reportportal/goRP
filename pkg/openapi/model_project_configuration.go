/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProjectConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectConfiguration{}

// ProjectConfiguration struct for ProjectConfiguration
type ProjectConfiguration struct {
	Attributes                 map[string]string                 `json:"attributes"`
	SubTypes                   map[string][]IssueSubTypeResource `json:"subTypes,omitempty"`
	NotificationsConfiguration *ProjectNotificationConfigDTO     `json:"notificationsConfiguration,omitempty"`
	Patterns                   []PatternTemplateResource         `json:"patterns,omitempty"`
}

type _ProjectConfiguration ProjectConfiguration

// NewProjectConfiguration instantiates a new ProjectConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectConfiguration(attributes map[string]string) *ProjectConfiguration {
	this := ProjectConfiguration{}
	this.Attributes = attributes
	return &this
}

// NewProjectConfigurationWithDefaults instantiates a new ProjectConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectConfigurationWithDefaults() *ProjectConfiguration {
	this := ProjectConfiguration{}
	return &this
}

// GetAttributes returns the Attributes field value
func (o *ProjectConfiguration) GetAttributes() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *ProjectConfiguration) GetAttributesOk() (map[string]string, bool) {
	if o == nil {
		return map[string]string{}, false
	}
	return o.Attributes, true
}

// SetAttributes sets field value
func (o *ProjectConfiguration) SetAttributes(v map[string]string) {
	o.Attributes = v
}

// GetSubTypes returns the SubTypes field value if set, zero value otherwise.
func (o *ProjectConfiguration) GetSubTypes() map[string][]IssueSubTypeResource {
	if o == nil || IsNil(o.SubTypes) {
		var ret map[string][]IssueSubTypeResource
		return ret
	}
	return o.SubTypes
}

// GetSubTypesOk returns a tuple with the SubTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectConfiguration) GetSubTypesOk() (map[string][]IssueSubTypeResource, bool) {
	if o == nil || IsNil(o.SubTypes) {
		return map[string][]IssueSubTypeResource{}, false
	}
	return o.SubTypes, true
}

// HasSubTypes returns a boolean if a field has been set.
func (o *ProjectConfiguration) HasSubTypes() bool {
	if o != nil && !IsNil(o.SubTypes) {
		return true
	}

	return false
}

// SetSubTypes gets a reference to the given map[string][]IssueSubTypeResource and assigns it to the SubTypes field.
func (o *ProjectConfiguration) SetSubTypes(v map[string][]IssueSubTypeResource) {
	o.SubTypes = v
}

// GetNotificationsConfiguration returns the NotificationsConfiguration field value if set, zero value otherwise.
func (o *ProjectConfiguration) GetNotificationsConfiguration() ProjectNotificationConfigDTO {
	if o == nil || IsNil(o.NotificationsConfiguration) {
		var ret ProjectNotificationConfigDTO
		return ret
	}
	return *o.NotificationsConfiguration
}

// GetNotificationsConfigurationOk returns a tuple with the NotificationsConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectConfiguration) GetNotificationsConfigurationOk() (*ProjectNotificationConfigDTO, bool) {
	if o == nil || IsNil(o.NotificationsConfiguration) {
		return nil, false
	}
	return o.NotificationsConfiguration, true
}

// HasNotificationsConfiguration returns a boolean if a field has been set.
func (o *ProjectConfiguration) HasNotificationsConfiguration() bool {
	if o != nil && !IsNil(o.NotificationsConfiguration) {
		return true
	}

	return false
}

// SetNotificationsConfiguration gets a reference to the given ProjectNotificationConfigDTO and assigns it to the NotificationsConfiguration field.
func (o *ProjectConfiguration) SetNotificationsConfiguration(v ProjectNotificationConfigDTO) {
	o.NotificationsConfiguration = &v
}

// GetPatterns returns the Patterns field value if set, zero value otherwise.
func (o *ProjectConfiguration) GetPatterns() []PatternTemplateResource {
	if o == nil || IsNil(o.Patterns) {
		var ret []PatternTemplateResource
		return ret
	}
	return o.Patterns
}

// GetPatternsOk returns a tuple with the Patterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectConfiguration) GetPatternsOk() ([]PatternTemplateResource, bool) {
	if o == nil || IsNil(o.Patterns) {
		return nil, false
	}
	return o.Patterns, true
}

// HasPatterns returns a boolean if a field has been set.
func (o *ProjectConfiguration) HasPatterns() bool {
	if o != nil && !IsNil(o.Patterns) {
		return true
	}

	return false
}

// SetPatterns gets a reference to the given []PatternTemplateResource and assigns it to the Patterns field.
func (o *ProjectConfiguration) SetPatterns(v []PatternTemplateResource) {
	o.Patterns = v
}

func (o ProjectConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attributes"] = o.Attributes
	if !IsNil(o.SubTypes) {
		toSerialize["subTypes"] = o.SubTypes
	}
	if !IsNil(o.NotificationsConfiguration) {
		toSerialize["notificationsConfiguration"] = o.NotificationsConfiguration
	}
	if !IsNil(o.Patterns) {
		toSerialize["patterns"] = o.Patterns
	}
	return toSerialize, nil
}

func (o *ProjectConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attributes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectConfiguration := _ProjectConfiguration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectConfiguration)

	if err != nil {
		return err
	}

	*o = ProjectConfiguration(varProjectConfiguration)

	return err
}

type NullableProjectConfiguration struct {
	value *ProjectConfiguration
	isSet bool
}

func (v NullableProjectConfiguration) Get() *ProjectConfiguration {
	return v.value
}

func (v *NullableProjectConfiguration) Set(val *ProjectConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectConfiguration(val *ProjectConfiguration) *NullableProjectConfiguration {
	return &NullableProjectConfiguration{value: val, isSet: true}
}

func (v NullableProjectConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
