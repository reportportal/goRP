/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the WidgetRQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WidgetRQ{}

// WidgetRQ struct for WidgetRQ
type WidgetRQ struct {
	Description       *string            `json:"description,omitempty"`
	Name              string             `json:"name"`
	WidgetType        string             `json:"widgetType"`
	ContentParameters *ContentParameters `json:"contentParameters,omitempty"`
	FilterIds         []int64            `json:"filterIds,omitempty"`
}

type _WidgetRQ WidgetRQ

// NewWidgetRQ instantiates a new WidgetRQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWidgetRQ(name string, widgetType string) *WidgetRQ {
	this := WidgetRQ{}
	this.Name = name
	this.WidgetType = widgetType
	return &this
}

// NewWidgetRQWithDefaults instantiates a new WidgetRQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWidgetRQWithDefaults() *WidgetRQ {
	this := WidgetRQ{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *WidgetRQ) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetRQ) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *WidgetRQ) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *WidgetRQ) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *WidgetRQ) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WidgetRQ) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WidgetRQ) SetName(v string) {
	o.Name = v
}

// GetWidgetType returns the WidgetType field value
func (o *WidgetRQ) GetWidgetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WidgetType
}

// GetWidgetTypeOk returns a tuple with the WidgetType field value
// and a boolean to check if the value has been set.
func (o *WidgetRQ) GetWidgetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WidgetType, true
}

// SetWidgetType sets field value
func (o *WidgetRQ) SetWidgetType(v string) {
	o.WidgetType = v
}

// GetContentParameters returns the ContentParameters field value if set, zero value otherwise.
func (o *WidgetRQ) GetContentParameters() ContentParameters {
	if o == nil || IsNil(o.ContentParameters) {
		var ret ContentParameters
		return ret
	}
	return *o.ContentParameters
}

// GetContentParametersOk returns a tuple with the ContentParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetRQ) GetContentParametersOk() (*ContentParameters, bool) {
	if o == nil || IsNil(o.ContentParameters) {
		return nil, false
	}
	return o.ContentParameters, true
}

// HasContentParameters returns a boolean if a field has been set.
func (o *WidgetRQ) HasContentParameters() bool {
	if o != nil && !IsNil(o.ContentParameters) {
		return true
	}

	return false
}

// SetContentParameters gets a reference to the given ContentParameters and assigns it to the ContentParameters field.
func (o *WidgetRQ) SetContentParameters(v ContentParameters) {
	o.ContentParameters = &v
}

// GetFilterIds returns the FilterIds field value if set, zero value otherwise.
func (o *WidgetRQ) GetFilterIds() []int64 {
	if o == nil || IsNil(o.FilterIds) {
		var ret []int64
		return ret
	}
	return o.FilterIds
}

// GetFilterIdsOk returns a tuple with the FilterIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WidgetRQ) GetFilterIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.FilterIds) {
		return nil, false
	}
	return o.FilterIds, true
}

// HasFilterIds returns a boolean if a field has been set.
func (o *WidgetRQ) HasFilterIds() bool {
	if o != nil && !IsNil(o.FilterIds) {
		return true
	}

	return false
}

// SetFilterIds gets a reference to the given []int64 and assigns it to the FilterIds field.
func (o *WidgetRQ) SetFilterIds(v []int64) {
	o.FilterIds = v
}

func (o WidgetRQ) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WidgetRQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	toSerialize["widgetType"] = o.WidgetType
	if !IsNil(o.ContentParameters) {
		toSerialize["contentParameters"] = o.ContentParameters
	}
	if !IsNil(o.FilterIds) {
		toSerialize["filterIds"] = o.FilterIds
	}
	return toSerialize, nil
}

func (o *WidgetRQ) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"widgetType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWidgetRQ := _WidgetRQ{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWidgetRQ)

	if err != nil {
		return err
	}

	*o = WidgetRQ(varWidgetRQ)

	return err
}

type NullableWidgetRQ struct {
	value *WidgetRQ
	isSet bool
}

func (v NullableWidgetRQ) Get() *WidgetRQ {
	return v.value
}

func (v *NullableWidgetRQ) Set(val *WidgetRQ) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetRQ) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetRQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetRQ(val *WidgetRQ) *NullableWidgetRQ {
	return &NullableWidgetRQ{value: val, isSet: true}
}

func (v NullableWidgetRQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetRQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
