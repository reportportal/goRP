/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateIssueSubTypeRQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateIssueSubTypeRQ{}

// CreateIssueSubTypeRQ struct for CreateIssueSubTypeRQ
type CreateIssueSubTypeRQ struct {
	TypeRef   string `json:"typeRef"`
	LongName  string `json:"longName"`
	ShortName string `json:"shortName"`
	Color     string `json:"color" validate:"regexp=#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"`
}

type _CreateIssueSubTypeRQ CreateIssueSubTypeRQ

// NewCreateIssueSubTypeRQ instantiates a new CreateIssueSubTypeRQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateIssueSubTypeRQ(typeRef string, longName string, shortName string, color string) *CreateIssueSubTypeRQ {
	this := CreateIssueSubTypeRQ{}
	this.TypeRef = typeRef
	this.LongName = longName
	this.ShortName = shortName
	this.Color = color
	return &this
}

// NewCreateIssueSubTypeRQWithDefaults instantiates a new CreateIssueSubTypeRQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateIssueSubTypeRQWithDefaults() *CreateIssueSubTypeRQ {
	this := CreateIssueSubTypeRQ{}
	return &this
}

// GetTypeRef returns the TypeRef field value
func (o *CreateIssueSubTypeRQ) GetTypeRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeRef
}

// GetTypeRefOk returns a tuple with the TypeRef field value
// and a boolean to check if the value has been set.
func (o *CreateIssueSubTypeRQ) GetTypeRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeRef, true
}

// SetTypeRef sets field value
func (o *CreateIssueSubTypeRQ) SetTypeRef(v string) {
	o.TypeRef = v
}

// GetLongName returns the LongName field value
func (o *CreateIssueSubTypeRQ) GetLongName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LongName
}

// GetLongNameOk returns a tuple with the LongName field value
// and a boolean to check if the value has been set.
func (o *CreateIssueSubTypeRQ) GetLongNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LongName, true
}

// SetLongName sets field value
func (o *CreateIssueSubTypeRQ) SetLongName(v string) {
	o.LongName = v
}

// GetShortName returns the ShortName field value
func (o *CreateIssueSubTypeRQ) GetShortName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value
// and a boolean to check if the value has been set.
func (o *CreateIssueSubTypeRQ) GetShortNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShortName, true
}

// SetShortName sets field value
func (o *CreateIssueSubTypeRQ) SetShortName(v string) {
	o.ShortName = v
}

// GetColor returns the Color field value
func (o *CreateIssueSubTypeRQ) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *CreateIssueSubTypeRQ) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *CreateIssueSubTypeRQ) SetColor(v string) {
	o.Color = v
}

func (o CreateIssueSubTypeRQ) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateIssueSubTypeRQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["typeRef"] = o.TypeRef
	toSerialize["longName"] = o.LongName
	toSerialize["shortName"] = o.ShortName
	toSerialize["color"] = o.Color
	return toSerialize, nil
}

func (o *CreateIssueSubTypeRQ) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"typeRef",
		"longName",
		"shortName",
		"color",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateIssueSubTypeRQ := _CreateIssueSubTypeRQ{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateIssueSubTypeRQ)

	if err != nil {
		return err
	}

	*o = CreateIssueSubTypeRQ(varCreateIssueSubTypeRQ)

	return err
}

type NullableCreateIssueSubTypeRQ struct {
	value *CreateIssueSubTypeRQ
	isSet bool
}

func (v NullableCreateIssueSubTypeRQ) Get() *CreateIssueSubTypeRQ {
	return v.value
}

func (v *NullableCreateIssueSubTypeRQ) Set(val *CreateIssueSubTypeRQ) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateIssueSubTypeRQ) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateIssueSubTypeRQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateIssueSubTypeRQ(val *CreateIssueSubTypeRQ) *NullableCreateIssueSubTypeRQ {
	return &NullableCreateIssueSubTypeRQ{value: val, isSet: true}
}

func (v NullableCreateIssueSubTypeRQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateIssueSubTypeRQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
