/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ProjectResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectResource{}

// ProjectResource struct for ProjectResource
type ProjectResource struct {
	ProjectId        int64                 `json:"projectId"`
	ProjectName      string                `json:"projectName"`
	EntryType        string                `json:"entryType"`
	Configuration    ProjectConfiguration  `json:"configuration"`
	Users            []ProjectUser         `json:"users,omitempty"`
	Integrations     []IntegrationResource `json:"integrations,omitempty"`
	Organization     *string               `json:"organization,omitempty"`
	AllocatedStorage *int64                `json:"allocatedStorage,omitempty"`
	CreationDate     time.Time             `json:"creationDate"`
}

type _ProjectResource ProjectResource

// NewProjectResource instantiates a new ProjectResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectResource(projectId int64, projectName, entryType string, configuration ProjectConfiguration, creationDate time.Time) *ProjectResource {
	this := ProjectResource{}
	this.ProjectId = projectId
	this.ProjectName = projectName
	this.EntryType = entryType
	this.Configuration = configuration
	this.CreationDate = creationDate
	return &this
}

// NewProjectResourceWithDefaults instantiates a new ProjectResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectResourceWithDefaults() *ProjectResource {
	this := ProjectResource{}
	return &this
}

// GetProjectId returns the ProjectId field value
func (o *ProjectResource) GetProjectId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *ProjectResource) GetProjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *ProjectResource) SetProjectId(v int64) {
	o.ProjectId = v
}

// GetProjectName returns the ProjectName field value
func (o *ProjectResource) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *ProjectResource) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *ProjectResource) SetProjectName(v string) {
	o.ProjectName = v
}

// GetEntryType returns the EntryType field value
func (o *ProjectResource) GetEntryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntryType
}

// GetEntryTypeOk returns a tuple with the EntryType field value
// and a boolean to check if the value has been set.
func (o *ProjectResource) GetEntryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntryType, true
}

// SetEntryType sets field value
func (o *ProjectResource) SetEntryType(v string) {
	o.EntryType = v
}

// GetConfiguration returns the Configuration field value
func (o *ProjectResource) GetConfiguration() ProjectConfiguration {
	if o == nil {
		var ret ProjectConfiguration
		return ret
	}

	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value
// and a boolean to check if the value has been set.
func (o *ProjectResource) GetConfigurationOk() (*ProjectConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Configuration, true
}

// SetConfiguration sets field value
func (o *ProjectResource) SetConfiguration(v ProjectConfiguration) {
	o.Configuration = v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *ProjectResource) GetUsers() []ProjectUser {
	if o == nil || IsNil(o.Users) {
		var ret []ProjectUser
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectResource) GetUsersOk() ([]ProjectUser, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *ProjectResource) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []ProjectUser and assigns it to the Users field.
func (o *ProjectResource) SetUsers(v []ProjectUser) {
	o.Users = v
}

// GetIntegrations returns the Integrations field value if set, zero value otherwise.
func (o *ProjectResource) GetIntegrations() []IntegrationResource {
	if o == nil || IsNil(o.Integrations) {
		var ret []IntegrationResource
		return ret
	}
	return o.Integrations
}

// GetIntegrationsOk returns a tuple with the Integrations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectResource) GetIntegrationsOk() ([]IntegrationResource, bool) {
	if o == nil || IsNil(o.Integrations) {
		return nil, false
	}
	return o.Integrations, true
}

// HasIntegrations returns a boolean if a field has been set.
func (o *ProjectResource) HasIntegrations() bool {
	if o != nil && !IsNil(o.Integrations) {
		return true
	}

	return false
}

// SetIntegrations gets a reference to the given []IntegrationResource and assigns it to the Integrations field.
func (o *ProjectResource) SetIntegrations(v []IntegrationResource) {
	o.Integrations = v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *ProjectResource) GetOrganization() string {
	if o == nil || IsNil(o.Organization) {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectResource) GetOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *ProjectResource) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *ProjectResource) SetOrganization(v string) {
	o.Organization = &v
}

// GetAllocatedStorage returns the AllocatedStorage field value if set, zero value otherwise.
func (o *ProjectResource) GetAllocatedStorage() int64 {
	if o == nil || IsNil(o.AllocatedStorage) {
		var ret int64
		return ret
	}
	return *o.AllocatedStorage
}

// GetAllocatedStorageOk returns a tuple with the AllocatedStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectResource) GetAllocatedStorageOk() (*int64, bool) {
	if o == nil || IsNil(o.AllocatedStorage) {
		return nil, false
	}
	return o.AllocatedStorage, true
}

// HasAllocatedStorage returns a boolean if a field has been set.
func (o *ProjectResource) HasAllocatedStorage() bool {
	if o != nil && !IsNil(o.AllocatedStorage) {
		return true
	}

	return false
}

// SetAllocatedStorage gets a reference to the given int64 and assigns it to the AllocatedStorage field.
func (o *ProjectResource) SetAllocatedStorage(v int64) {
	o.AllocatedStorage = &v
}

// GetCreationDate returns the CreationDate field value
func (o *ProjectResource) GetCreationDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value
// and a boolean to check if the value has been set.
func (o *ProjectResource) GetCreationDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationDate, true
}

// SetCreationDate sets field value
func (o *ProjectResource) SetCreationDate(v time.Time) {
	o.CreationDate = v
}

func (o ProjectResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["projectId"] = o.ProjectId
	toSerialize["projectName"] = o.ProjectName
	toSerialize["entryType"] = o.EntryType
	toSerialize["configuration"] = o.Configuration
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	if !IsNil(o.Integrations) {
		toSerialize["integrations"] = o.Integrations
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.AllocatedStorage) {
		toSerialize["allocatedStorage"] = o.AllocatedStorage
	}
	toSerialize["creationDate"] = o.CreationDate
	return toSerialize, nil
}

func (o *ProjectResource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"projectId",
		"projectName",
		"entryType",
		"configuration",
		"creationDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectResource := _ProjectResource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectResource)

	if err != nil {
		return err
	}

	*o = ProjectResource(varProjectResource)

	return err
}

type NullableProjectResource struct {
	value *ProjectResource
	isSet bool
}

func (v NullableProjectResource) Get() *ProjectResource {
	return v.value
}

func (v *NullableProjectResource) Set(val *ProjectResource) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectResource) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectResource(val *ProjectResource) *NullableProjectResource {
	return &NullableProjectResource{value: val, isSet: true}
}

func (v NullableProjectResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
