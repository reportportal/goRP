/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LinkExternalIssueRQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkExternalIssueRQ{}

// LinkExternalIssueRQ struct for LinkExternalIssueRQ
type LinkExternalIssueRQ struct {
	TestItemIds []int64             `json:"testItemIds"`
	Issues      ExternalSystemIssue `json:"issues"`
}

type _LinkExternalIssueRQ LinkExternalIssueRQ

// NewLinkExternalIssueRQ instantiates a new LinkExternalIssueRQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkExternalIssueRQ(testItemIds []int64, issues ExternalSystemIssue) *LinkExternalIssueRQ {
	this := LinkExternalIssueRQ{}
	this.TestItemIds = testItemIds
	this.Issues = issues
	return &this
}

// NewLinkExternalIssueRQWithDefaults instantiates a new LinkExternalIssueRQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkExternalIssueRQWithDefaults() *LinkExternalIssueRQ {
	this := LinkExternalIssueRQ{}
	return &this
}

// GetTestItemIds returns the TestItemIds field value
func (o *LinkExternalIssueRQ) GetTestItemIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.TestItemIds
}

// GetTestItemIdsOk returns a tuple with the TestItemIds field value
// and a boolean to check if the value has been set.
func (o *LinkExternalIssueRQ) GetTestItemIdsOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestItemIds, true
}

// SetTestItemIds sets field value
func (o *LinkExternalIssueRQ) SetTestItemIds(v []int64) {
	o.TestItemIds = v
}

// GetIssues returns the Issues field value
func (o *LinkExternalIssueRQ) GetIssues() ExternalSystemIssue {
	if o == nil {
		var ret ExternalSystemIssue
		return ret
	}

	return o.Issues
}

// GetIssuesOk returns a tuple with the Issues field value
// and a boolean to check if the value has been set.
func (o *LinkExternalIssueRQ) GetIssuesOk() (*ExternalSystemIssue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issues, true
}

// SetIssues sets field value
func (o *LinkExternalIssueRQ) SetIssues(v ExternalSystemIssue) {
	o.Issues = v
}

func (o LinkExternalIssueRQ) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkExternalIssueRQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["testItemIds"] = o.TestItemIds
	toSerialize["issues"] = o.Issues
	return toSerialize, nil
}

func (o *LinkExternalIssueRQ) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"testItemIds",
		"issues",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLinkExternalIssueRQ := _LinkExternalIssueRQ{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLinkExternalIssueRQ)

	if err != nil {
		return err
	}

	*o = LinkExternalIssueRQ(varLinkExternalIssueRQ)

	return err
}

type NullableLinkExternalIssueRQ struct {
	value *LinkExternalIssueRQ
	isSet bool
}

func (v NullableLinkExternalIssueRQ) Get() *LinkExternalIssueRQ {
	return v.value
}

func (v *NullableLinkExternalIssueRQ) Set(val *LinkExternalIssueRQ) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkExternalIssueRQ) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkExternalIssueRQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkExternalIssueRQ(val *LinkExternalIssueRQ) *NullableLinkExternalIssueRQ {
	return &NullableLinkExternalIssueRQ{value: val, isSet: true}
}

func (v NullableLinkExternalIssueRQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkExternalIssueRQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
