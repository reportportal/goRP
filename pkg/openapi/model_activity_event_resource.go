/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ActivityEventResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityEventResource{}

// ActivityEventResource struct for ActivityEventResource
type ActivityEventResource struct {
	// The unique ID of the activity
	Id int64 `json:"id"`
	// The time the activity was created
	CreatedAt time.Time `json:"created_at"`
	// The name of the event
	EventName string `json:"event_name"`
	// The ID of the object on which activity was performed
	ObjectId int64 `json:"object_id"`
	// The name of the object on which activity was performed
	ObjectName string `json:"object_name"`
	// The type of the object on which activity was performed
	ObjectType string `json:"object_type"`
	// The ID of the project
	ProjectId int64 `json:"project_id"`
	// The name of the project
	ProjectName string `json:"project_name"`
	// The name of the subject who performed the activity
	SubjectName string `json:"subject_name"`
	// The type of the subject who performed the activity
	SubjectType string `json:"subject_type"`
	// The ID of the subject who performed the activity
	SubjectId string `json:"subject_id"`
	// The details of the activity, for example history of value
	Details map[string]interface{} `json:"details,omitempty"`
}

type _ActivityEventResource ActivityEventResource

// NewActivityEventResource instantiates a new ActivityEventResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityEventResource(id int64, createdAt time.Time, eventName string, objectId int64, objectName, objectType string, projectId int64, projectName, subjectName, subjectType, subjectId string) *ActivityEventResource {
	this := ActivityEventResource{}
	this.Id = id
	this.CreatedAt = createdAt
	this.EventName = eventName
	this.ObjectId = objectId
	this.ObjectName = objectName
	this.ObjectType = objectType
	this.ProjectId = projectId
	this.ProjectName = projectName
	this.SubjectName = subjectName
	this.SubjectType = subjectType
	this.SubjectId = subjectId
	return &this
}

// NewActivityEventResourceWithDefaults instantiates a new ActivityEventResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityEventResourceWithDefaults() *ActivityEventResource {
	this := ActivityEventResource{}
	return &this
}

// GetId returns the Id field value
func (o *ActivityEventResource) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ActivityEventResource) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ActivityEventResource) SetId(v int64) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ActivityEventResource) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ActivityEventResource) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ActivityEventResource) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetEventName returns the EventName field value
func (o *ActivityEventResource) GetEventName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *ActivityEventResource) GetEventNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventName, true
}

// SetEventName sets field value
func (o *ActivityEventResource) SetEventName(v string) {
	o.EventName = v
}

// GetObjectId returns the ObjectId field value
func (o *ActivityEventResource) GetObjectId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
func (o *ActivityEventResource) GetObjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectId, true
}

// SetObjectId sets field value
func (o *ActivityEventResource) SetObjectId(v int64) {
	o.ObjectId = v
}

// GetObjectName returns the ObjectName field value
func (o *ActivityEventResource) GetObjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectName
}

// GetObjectNameOk returns a tuple with the ObjectName field value
// and a boolean to check if the value has been set.
func (o *ActivityEventResource) GetObjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectName, true
}

// SetObjectName sets field value
func (o *ActivityEventResource) SetObjectName(v string) {
	o.ObjectName = v
}

// GetObjectType returns the ObjectType field value
func (o *ActivityEventResource) GetObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value
// and a boolean to check if the value has been set.
func (o *ActivityEventResource) GetObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectType, true
}

// SetObjectType sets field value
func (o *ActivityEventResource) SetObjectType(v string) {
	o.ObjectType = v
}

// GetProjectId returns the ProjectId field value
func (o *ActivityEventResource) GetProjectId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *ActivityEventResource) GetProjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *ActivityEventResource) SetProjectId(v int64) {
	o.ProjectId = v
}

// GetProjectName returns the ProjectName field value
func (o *ActivityEventResource) GetProjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
func (o *ActivityEventResource) GetProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectName, true
}

// SetProjectName sets field value
func (o *ActivityEventResource) SetProjectName(v string) {
	o.ProjectName = v
}

// GetSubjectName returns the SubjectName field value
func (o *ActivityEventResource) GetSubjectName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectName
}

// GetSubjectNameOk returns a tuple with the SubjectName field value
// and a boolean to check if the value has been set.
func (o *ActivityEventResource) GetSubjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectName, true
}

// SetSubjectName sets field value
func (o *ActivityEventResource) SetSubjectName(v string) {
	o.SubjectName = v
}

// GetSubjectType returns the SubjectType field value
func (o *ActivityEventResource) GetSubjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectType
}

// GetSubjectTypeOk returns a tuple with the SubjectType field value
// and a boolean to check if the value has been set.
func (o *ActivityEventResource) GetSubjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectType, true
}

// SetSubjectType sets field value
func (o *ActivityEventResource) SetSubjectType(v string) {
	o.SubjectType = v
}

// GetSubjectId returns the SubjectId field value
func (o *ActivityEventResource) GetSubjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectId
}

// GetSubjectIdOk returns a tuple with the SubjectId field value
// and a boolean to check if the value has been set.
func (o *ActivityEventResource) GetSubjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectId, true
}

// SetSubjectId sets field value
func (o *ActivityEventResource) SetSubjectId(v string) {
	o.SubjectId = v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ActivityEventResource) GetDetails() map[string]interface{} {
	if o == nil || IsNil(o.Details) {
		var ret map[string]interface{}
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityEventResource) GetDetailsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Details) {
		return map[string]interface{}{}, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ActivityEventResource) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given map[string]interface{} and assigns it to the Details field.
func (o *ActivityEventResource) SetDetails(v map[string]interface{}) {
	o.Details = v
}

func (o ActivityEventResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityEventResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["event_name"] = o.EventName
	toSerialize["object_id"] = o.ObjectId
	toSerialize["object_name"] = o.ObjectName
	toSerialize["object_type"] = o.ObjectType
	toSerialize["project_id"] = o.ProjectId
	toSerialize["project_name"] = o.ProjectName
	toSerialize["subject_name"] = o.SubjectName
	toSerialize["subject_type"] = o.SubjectType
	toSerialize["subject_id"] = o.SubjectId
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	return toSerialize, nil
}

func (o *ActivityEventResource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"event_name",
		"object_id",
		"object_name",
		"object_type",
		"project_id",
		"project_name",
		"subject_name",
		"subject_type",
		"subject_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActivityEventResource := _ActivityEventResource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActivityEventResource)

	if err != nil {
		return err
	}

	*o = ActivityEventResource(varActivityEventResource)

	return err
}

type NullableActivityEventResource struct {
	value *ActivityEventResource
	isSet bool
}

func (v NullableActivityEventResource) Get() *ActivityEventResource {
	return v.value
}

func (v *NullableActivityEventResource) Set(val *ActivityEventResource) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityEventResource) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityEventResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityEventResource(val *ActivityEventResource) *NullableActivityEventResource {
	return &NullableActivityEventResource{value: val, isSet: true}
}

func (v NullableActivityEventResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityEventResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
