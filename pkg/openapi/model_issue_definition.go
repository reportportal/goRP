/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the IssueDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssueDefinition{}

// IssueDefinition struct for IssueDefinition
type IssueDefinition struct {
	TestItemId int64 `json:"testItemId"`
	Issue      Issue `json:"issue"`
}

type _IssueDefinition IssueDefinition

// NewIssueDefinition instantiates a new IssueDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueDefinition(testItemId int64, issue Issue) *IssueDefinition {
	this := IssueDefinition{}
	this.TestItemId = testItemId
	this.Issue = issue
	return &this
}

// NewIssueDefinitionWithDefaults instantiates a new IssueDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueDefinitionWithDefaults() *IssueDefinition {
	this := IssueDefinition{}
	return &this
}

// GetTestItemId returns the TestItemId field value
func (o *IssueDefinition) GetTestItemId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TestItemId
}

// GetTestItemIdOk returns a tuple with the TestItemId field value
// and a boolean to check if the value has been set.
func (o *IssueDefinition) GetTestItemIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestItemId, true
}

// SetTestItemId sets field value
func (o *IssueDefinition) SetTestItemId(v int64) {
	o.TestItemId = v
}

// GetIssue returns the Issue field value
func (o *IssueDefinition) GetIssue() Issue {
	if o == nil {
		var ret Issue
		return ret
	}

	return o.Issue
}

// GetIssueOk returns a tuple with the Issue field value
// and a boolean to check if the value has been set.
func (o *IssueDefinition) GetIssueOk() (*Issue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issue, true
}

// SetIssue sets field value
func (o *IssueDefinition) SetIssue(v Issue) {
	o.Issue = v
}

func (o IssueDefinition) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["testItemId"] = o.TestItemId
	toSerialize["issue"] = o.Issue
	return toSerialize, nil
}

func (o *IssueDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"testItemId",
		"issue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIssueDefinition := _IssueDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIssueDefinition)

	if err != nil {
		return err
	}

	*o = IssueDefinition(varIssueDefinition)

	return err
}

type NullableIssueDefinition struct {
	value *IssueDefinition
	isSet bool
}

func (v NullableIssueDefinition) Get() *IssueDefinition {
	return v.value
}

func (v *NullableIssueDefinition) Set(val *IssueDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueDefinition(val *IssueDefinition) *NullableIssueDefinition {
	return &NullableIssueDefinition{value: val, isSet: true}
}

func (v NullableIssueDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
