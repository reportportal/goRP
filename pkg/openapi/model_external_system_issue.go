/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ExternalSystemIssue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalSystemIssue{}

// ExternalSystemIssue struct for ExternalSystemIssue
type ExternalSystemIssue struct {
	TicketId   string     `json:"ticketId"`
	SubmitDate *time.Time `json:"submitDate,omitempty"`
	BtsUrl     string     `json:"btsUrl"`
	BtsProject string     `json:"btsProject"`
	Url        string     `json:"url"`
	PluginName *string    `json:"pluginName,omitempty"`
}

type _ExternalSystemIssue ExternalSystemIssue

// NewExternalSystemIssue instantiates a new ExternalSystemIssue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalSystemIssue(ticketId, btsUrl, btsProject, url string) *ExternalSystemIssue {
	this := ExternalSystemIssue{}
	this.TicketId = ticketId
	this.BtsUrl = btsUrl
	this.BtsProject = btsProject
	this.Url = url
	return &this
}

// NewExternalSystemIssueWithDefaults instantiates a new ExternalSystemIssue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalSystemIssueWithDefaults() *ExternalSystemIssue {
	this := ExternalSystemIssue{}
	return &this
}

// GetTicketId returns the TicketId field value
func (o *ExternalSystemIssue) GetTicketId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TicketId
}

// GetTicketIdOk returns a tuple with the TicketId field value
// and a boolean to check if the value has been set.
func (o *ExternalSystemIssue) GetTicketIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TicketId, true
}

// SetTicketId sets field value
func (o *ExternalSystemIssue) SetTicketId(v string) {
	o.TicketId = v
}

// GetSubmitDate returns the SubmitDate field value if set, zero value otherwise.
func (o *ExternalSystemIssue) GetSubmitDate() time.Time {
	if o == nil || IsNil(o.SubmitDate) {
		var ret time.Time
		return ret
	}
	return *o.SubmitDate
}

// GetSubmitDateOk returns a tuple with the SubmitDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalSystemIssue) GetSubmitDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.SubmitDate) {
		return nil, false
	}
	return o.SubmitDate, true
}

// HasSubmitDate returns a boolean if a field has been set.
func (o *ExternalSystemIssue) HasSubmitDate() bool {
	if o != nil && !IsNil(o.SubmitDate) {
		return true
	}

	return false
}

// SetSubmitDate gets a reference to the given time.Time and assigns it to the SubmitDate field.
func (o *ExternalSystemIssue) SetSubmitDate(v time.Time) {
	o.SubmitDate = &v
}

// GetBtsUrl returns the BtsUrl field value
func (o *ExternalSystemIssue) GetBtsUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BtsUrl
}

// GetBtsUrlOk returns a tuple with the BtsUrl field value
// and a boolean to check if the value has been set.
func (o *ExternalSystemIssue) GetBtsUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BtsUrl, true
}

// SetBtsUrl sets field value
func (o *ExternalSystemIssue) SetBtsUrl(v string) {
	o.BtsUrl = v
}

// GetBtsProject returns the BtsProject field value
func (o *ExternalSystemIssue) GetBtsProject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BtsProject
}

// GetBtsProjectOk returns a tuple with the BtsProject field value
// and a boolean to check if the value has been set.
func (o *ExternalSystemIssue) GetBtsProjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BtsProject, true
}

// SetBtsProject sets field value
func (o *ExternalSystemIssue) SetBtsProject(v string) {
	o.BtsProject = v
}

// GetUrl returns the Url field value
func (o *ExternalSystemIssue) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ExternalSystemIssue) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ExternalSystemIssue) SetUrl(v string) {
	o.Url = v
}

// GetPluginName returns the PluginName field value if set, zero value otherwise.
func (o *ExternalSystemIssue) GetPluginName() string {
	if o == nil || IsNil(o.PluginName) {
		var ret string
		return ret
	}
	return *o.PluginName
}

// GetPluginNameOk returns a tuple with the PluginName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalSystemIssue) GetPluginNameOk() (*string, bool) {
	if o == nil || IsNil(o.PluginName) {
		return nil, false
	}
	return o.PluginName, true
}

// HasPluginName returns a boolean if a field has been set.
func (o *ExternalSystemIssue) HasPluginName() bool {
	if o != nil && !IsNil(o.PluginName) {
		return true
	}

	return false
}

// SetPluginName gets a reference to the given string and assigns it to the PluginName field.
func (o *ExternalSystemIssue) SetPluginName(v string) {
	o.PluginName = &v
}

func (o ExternalSystemIssue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalSystemIssue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ticketId"] = o.TicketId
	if !IsNil(o.SubmitDate) {
		toSerialize["submitDate"] = o.SubmitDate
	}
	toSerialize["btsUrl"] = o.BtsUrl
	toSerialize["btsProject"] = o.BtsProject
	toSerialize["url"] = o.Url
	if !IsNil(o.PluginName) {
		toSerialize["pluginName"] = o.PluginName
	}
	return toSerialize, nil
}

func (o *ExternalSystemIssue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ticketId",
		"btsUrl",
		"btsProject",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExternalSystemIssue := _ExternalSystemIssue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExternalSystemIssue)

	if err != nil {
		return err
	}

	*o = ExternalSystemIssue(varExternalSystemIssue)

	return err
}

type NullableExternalSystemIssue struct {
	value *ExternalSystemIssue
	isSet bool
}

func (v NullableExternalSystemIssue) Get() *ExternalSystemIssue {
	return v.value
}

func (v *NullableExternalSystemIssue) Set(val *ExternalSystemIssue) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalSystemIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalSystemIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalSystemIssue(val *ExternalSystemIssue) *NullableExternalSystemIssue {
	return &NullableExternalSystemIssue{value: val, isSet: true}
}

func (v NullableExternalSystemIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalSystemIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
