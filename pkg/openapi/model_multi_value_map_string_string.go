/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MultiValueMapStringString type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultiValueMapStringString{}

// MultiValueMapStringString struct for MultiValueMapStringString
type MultiValueMapStringString struct {
	All                  map[string]string `json:"all,omitempty"`
	Empty                *bool             `json:"empty,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MultiValueMapStringString MultiValueMapStringString

// NewMultiValueMapStringString instantiates a new MultiValueMapStringString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiValueMapStringString() *MultiValueMapStringString {
	this := MultiValueMapStringString{}
	return &this
}

// NewMultiValueMapStringStringWithDefaults instantiates a new MultiValueMapStringString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiValueMapStringStringWithDefaults() *MultiValueMapStringString {
	this := MultiValueMapStringString{}
	return &this
}

// GetAll returns the All field value if set, zero value otherwise.
func (o *MultiValueMapStringString) GetAll() map[string]string {
	if o == nil || IsNil(o.All) {
		var ret map[string]string
		return ret
	}
	return o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiValueMapStringString) GetAllOk() (map[string]string, bool) {
	if o == nil || IsNil(o.All) {
		return map[string]string{}, false
	}
	return o.All, true
}

// HasAll returns a boolean if a field has been set.
func (o *MultiValueMapStringString) HasAll() bool {
	if o != nil && !IsNil(o.All) {
		return true
	}

	return false
}

// SetAll gets a reference to the given map[string]string and assigns it to the All field.
func (o *MultiValueMapStringString) SetAll(v map[string]string) {
	o.All = v
}

// GetEmpty returns the Empty field value if set, zero value otherwise.
func (o *MultiValueMapStringString) GetEmpty() bool {
	if o == nil || IsNil(o.Empty) {
		var ret bool
		return ret
	}
	return *o.Empty
}

// GetEmptyOk returns a tuple with the Empty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiValueMapStringString) GetEmptyOk() (*bool, bool) {
	if o == nil || IsNil(o.Empty) {
		return nil, false
	}
	return o.Empty, true
}

// HasEmpty returns a boolean if a field has been set.
func (o *MultiValueMapStringString) HasEmpty() bool {
	if o != nil && !IsNil(o.Empty) {
		return true
	}

	return false
}

// SetEmpty gets a reference to the given bool and assigns it to the Empty field.
func (o *MultiValueMapStringString) SetEmpty(v bool) {
	o.Empty = &v
}

func (o MultiValueMapStringString) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultiValueMapStringString) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.All) {
		toSerialize["all"] = o.All
	}
	if !IsNil(o.Empty) {
		toSerialize["empty"] = o.Empty
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MultiValueMapStringString) UnmarshalJSON(data []byte) (err error) {
	varMultiValueMapStringString := _MultiValueMapStringString{}

	err = json.Unmarshal(data, &varMultiValueMapStringString)

	if err != nil {
		return err
	}

	*o = MultiValueMapStringString(varMultiValueMapStringString)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "all")
		delete(additionalProperties, "empty")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMultiValueMapStringString struct {
	value *MultiValueMapStringString
	isSet bool
}

func (v NullableMultiValueMapStringString) Get() *MultiValueMapStringString {
	return v.value
}

func (v *NullableMultiValueMapStringString) Set(val *MultiValueMapStringString) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiValueMapStringString) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiValueMapStringString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiValueMapStringString(val *MultiValueMapStringString) *NullableMultiValueMapStringString {
	return &NullableMultiValueMapStringString{value: val, isSet: true}
}

func (v NullableMultiValueMapStringString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiValueMapStringString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
