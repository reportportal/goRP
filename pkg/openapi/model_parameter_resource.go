/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ParameterResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParameterResource{}

// ParameterResource struct for ParameterResource
type ParameterResource struct {
	Key   string  `json:"key"`
	Value *string `json:"value,omitempty"`
}

type _ParameterResource ParameterResource

// NewParameterResource instantiates a new ParameterResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParameterResource(key string) *ParameterResource {
	this := ParameterResource{}
	this.Key = key
	return &this
}

// NewParameterResourceWithDefaults instantiates a new ParameterResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParameterResourceWithDefaults() *ParameterResource {
	this := ParameterResource{}
	return &this
}

// GetKey returns the Key field value
func (o *ParameterResource) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ParameterResource) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ParameterResource) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ParameterResource) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParameterResource) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ParameterResource) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ParameterResource) SetValue(v string) {
	o.Value = &v
}

func (o ParameterResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParameterResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

func (o *ParameterResource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParameterResource := _ParameterResource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParameterResource)

	if err != nil {
		return err
	}

	*o = ParameterResource(varParameterResource)

	return err
}

type NullableParameterResource struct {
	value *ParameterResource
	isSet bool
}

func (v NullableParameterResource) Get() *ParameterResource {
	return v.value
}

func (v *NullableParameterResource) Set(val *ParameterResource) {
	v.value = val
	v.isSet = true
}

func (v NullableParameterResource) IsSet() bool {
	return v.isSet
}

func (v *NullableParameterResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParameterResource(val *ParameterResource) *NullableParameterResource {
	return &NullableParameterResource{value: val, isSet: true}
}

func (v NullableParameterResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParameterResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
