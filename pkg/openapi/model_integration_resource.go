/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the IntegrationResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationResource{}

// IntegrationResource struct for IntegrationResource
type IntegrationResource struct {
	Id                    *int64                   `json:"id,omitempty"`
	ProjectId             *int64                   `json:"projectId,omitempty"`
	Name                  *string                  `json:"name,omitempty"`
	IntegrationType       *IntegrationTypeResource `json:"integrationType,omitempty"`
	IntegrationParameters map[string]interface{}   `json:"integrationParameters,omitempty"`
	Enabled               *bool                    `json:"enabled,omitempty"`
	Creator               *string                  `json:"creator,omitempty"`
	CreationDate          *time.Time               `json:"creationDate,omitempty"`
}

// NewIntegrationResource instantiates a new IntegrationResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationResource() *IntegrationResource {
	this := IntegrationResource{}
	return &this
}

// NewIntegrationResourceWithDefaults instantiates a new IntegrationResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationResourceWithDefaults() *IntegrationResource {
	this := IntegrationResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IntegrationResource) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationResource) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IntegrationResource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *IntegrationResource) SetId(v int64) {
	o.Id = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *IntegrationResource) GetProjectId() int64 {
	if o == nil || IsNil(o.ProjectId) {
		var ret int64
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationResource) GetProjectIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *IntegrationResource) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int64 and assigns it to the ProjectId field.
func (o *IntegrationResource) SetProjectId(v int64) {
	o.ProjectId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IntegrationResource) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationResource) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IntegrationResource) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IntegrationResource) SetName(v string) {
	o.Name = &v
}

// GetIntegrationType returns the IntegrationType field value if set, zero value otherwise.
func (o *IntegrationResource) GetIntegrationType() IntegrationTypeResource {
	if o == nil || IsNil(o.IntegrationType) {
		var ret IntegrationTypeResource
		return ret
	}
	return *o.IntegrationType
}

// GetIntegrationTypeOk returns a tuple with the IntegrationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationResource) GetIntegrationTypeOk() (*IntegrationTypeResource, bool) {
	if o == nil || IsNil(o.IntegrationType) {
		return nil, false
	}
	return o.IntegrationType, true
}

// HasIntegrationType returns a boolean if a field has been set.
func (o *IntegrationResource) HasIntegrationType() bool {
	if o != nil && !IsNil(o.IntegrationType) {
		return true
	}

	return false
}

// SetIntegrationType gets a reference to the given IntegrationTypeResource and assigns it to the IntegrationType field.
func (o *IntegrationResource) SetIntegrationType(v IntegrationTypeResource) {
	o.IntegrationType = &v
}

// GetIntegrationParameters returns the IntegrationParameters field value if set, zero value otherwise.
func (o *IntegrationResource) GetIntegrationParameters() map[string]interface{} {
	if o == nil || IsNil(o.IntegrationParameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.IntegrationParameters
}

// GetIntegrationParametersOk returns a tuple with the IntegrationParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationResource) GetIntegrationParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.IntegrationParameters) {
		return map[string]interface{}{}, false
	}
	return o.IntegrationParameters, true
}

// HasIntegrationParameters returns a boolean if a field has been set.
func (o *IntegrationResource) HasIntegrationParameters() bool {
	if o != nil && !IsNil(o.IntegrationParameters) {
		return true
	}

	return false
}

// SetIntegrationParameters gets a reference to the given map[string]interface{} and assigns it to the IntegrationParameters field.
func (o *IntegrationResource) SetIntegrationParameters(v map[string]interface{}) {
	o.IntegrationParameters = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *IntegrationResource) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationResource) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *IntegrationResource) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *IntegrationResource) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *IntegrationResource) GetCreator() string {
	if o == nil || IsNil(o.Creator) {
		var ret string
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationResource) GetCreatorOk() (*string, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *IntegrationResource) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given string and assigns it to the Creator field.
func (o *IntegrationResource) SetCreator(v string) {
	o.Creator = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *IntegrationResource) GetCreationDate() time.Time {
	if o == nil || IsNil(o.CreationDate) {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationResource) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *IntegrationResource) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *IntegrationResource) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

func (o IntegrationResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IntegrationType) {
		toSerialize["integrationType"] = o.IntegrationType
	}
	if !IsNil(o.IntegrationParameters) {
		toSerialize["integrationParameters"] = o.IntegrationParameters
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	return toSerialize, nil
}

type NullableIntegrationResource struct {
	value *IntegrationResource
	isSet bool
}

func (v NullableIntegrationResource) Get() *IntegrationResource {
	return v.value
}

func (v *NullableIntegrationResource) Set(val *IntegrationResource) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationResource) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationResource(val *IntegrationResource) *NullableIntegrationResource {
	return &NullableIntegrationResource{value: val, isSet: true}
}

func (v NullableIntegrationResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
