/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ClusterInfoResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterInfoResource{}

// ClusterInfoResource struct for ClusterInfoResource
type ClusterInfoResource struct {
	Id           *int64                 `json:"id,omitempty"`
	Index        *int64                 `json:"index,omitempty"`
	LaunchId     *int64                 `json:"launchId,omitempty"`
	Message      *string                `json:"message,omitempty"`
	Metadata     map[string]interface{} `json:"metadata,omitempty"`
	MatchedTests *int64                 `json:"matchedTests,omitempty"`
}

// NewClusterInfoResource instantiates a new ClusterInfoResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterInfoResource() *ClusterInfoResource {
	this := ClusterInfoResource{}
	return &this
}

// NewClusterInfoResourceWithDefaults instantiates a new ClusterInfoResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterInfoResourceWithDefaults() *ClusterInfoResource {
	this := ClusterInfoResource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ClusterInfoResource) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterInfoResource) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ClusterInfoResource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ClusterInfoResource) SetId(v int64) {
	o.Id = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ClusterInfoResource) GetIndex() int64 {
	if o == nil || IsNil(o.Index) {
		var ret int64
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterInfoResource) GetIndexOk() (*int64, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ClusterInfoResource) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int64 and assigns it to the Index field.
func (o *ClusterInfoResource) SetIndex(v int64) {
	o.Index = &v
}

// GetLaunchId returns the LaunchId field value if set, zero value otherwise.
func (o *ClusterInfoResource) GetLaunchId() int64 {
	if o == nil || IsNil(o.LaunchId) {
		var ret int64
		return ret
	}
	return *o.LaunchId
}

// GetLaunchIdOk returns a tuple with the LaunchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterInfoResource) GetLaunchIdOk() (*int64, bool) {
	if o == nil || IsNil(o.LaunchId) {
		return nil, false
	}
	return o.LaunchId, true
}

// HasLaunchId returns a boolean if a field has been set.
func (o *ClusterInfoResource) HasLaunchId() bool {
	if o != nil && !IsNil(o.LaunchId) {
		return true
	}

	return false
}

// SetLaunchId gets a reference to the given int64 and assigns it to the LaunchId field.
func (o *ClusterInfoResource) SetLaunchId(v int64) {
	o.LaunchId = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ClusterInfoResource) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterInfoResource) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ClusterInfoResource) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ClusterInfoResource) SetMessage(v string) {
	o.Message = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ClusterInfoResource) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterInfoResource) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ClusterInfoResource) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *ClusterInfoResource) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetMatchedTests returns the MatchedTests field value if set, zero value otherwise.
func (o *ClusterInfoResource) GetMatchedTests() int64 {
	if o == nil || IsNil(o.MatchedTests) {
		var ret int64
		return ret
	}
	return *o.MatchedTests
}

// GetMatchedTestsOk returns a tuple with the MatchedTests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterInfoResource) GetMatchedTestsOk() (*int64, bool) {
	if o == nil || IsNil(o.MatchedTests) {
		return nil, false
	}
	return o.MatchedTests, true
}

// HasMatchedTests returns a boolean if a field has been set.
func (o *ClusterInfoResource) HasMatchedTests() bool {
	if o != nil && !IsNil(o.MatchedTests) {
		return true
	}

	return false
}

// SetMatchedTests gets a reference to the given int64 and assigns it to the MatchedTests field.
func (o *ClusterInfoResource) SetMatchedTests(v int64) {
	o.MatchedTests = &v
}

func (o ClusterInfoResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterInfoResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.LaunchId) {
		toSerialize["launchId"] = o.LaunchId
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.MatchedTests) {
		toSerialize["matchedTests"] = o.MatchedTests
	}
	return toSerialize, nil
}

type NullableClusterInfoResource struct {
	value *ClusterInfoResource
	isSet bool
}

func (v NullableClusterInfoResource) Get() *ClusterInfoResource {
	return v.value
}

func (v *NullableClusterInfoResource) Set(val *ClusterInfoResource) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterInfoResource) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterInfoResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterInfoResource(val *ClusterInfoResource) *NullableClusterInfoResource {
	return &NullableClusterInfoResource{value: val, isSet: true}
}

func (v NullableClusterInfoResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterInfoResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
