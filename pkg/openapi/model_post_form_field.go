/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PostFormField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostFormField{}

// PostFormField struct for PostFormField
type PostFormField struct {
	FieldName     *string        `json:"fieldName,omitempty"`
	Description   *string        `json:"description,omitempty"`
	Id            string         `json:"id"`
	FieldType     *string        `json:"fieldType,omitempty"`
	Required      bool           `json:"required"`
	Value         []string       `json:"value,omitempty"`
	NamedValue    []NamedValue   `json:"namedValue,omitempty"`
	CommandName   *string        `json:"commandName,omitempty"`
	DefinedValues []AllowedValue `json:"definedValues,omitempty"`
}

type _PostFormField PostFormField

// NewPostFormField instantiates a new PostFormField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostFormField(id string, required bool) *PostFormField {
	this := PostFormField{}
	this.Id = id
	this.Required = required
	return &this
}

// NewPostFormFieldWithDefaults instantiates a new PostFormField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostFormFieldWithDefaults() *PostFormField {
	this := PostFormField{}
	return &this
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *PostFormField) GetFieldName() string {
	if o == nil || IsNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFormField) GetFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *PostFormField) HasFieldName() bool {
	if o != nil && !IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *PostFormField) SetFieldName(v string) {
	o.FieldName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PostFormField) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFormField) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PostFormField) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PostFormField) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value
func (o *PostFormField) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PostFormField) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PostFormField) SetId(v string) {
	o.Id = v
}

// GetFieldType returns the FieldType field value if set, zero value otherwise.
func (o *PostFormField) GetFieldType() string {
	if o == nil || IsNil(o.FieldType) {
		var ret string
		return ret
	}
	return *o.FieldType
}

// GetFieldTypeOk returns a tuple with the FieldType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFormField) GetFieldTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FieldType) {
		return nil, false
	}
	return o.FieldType, true
}

// HasFieldType returns a boolean if a field has been set.
func (o *PostFormField) HasFieldType() bool {
	if o != nil && !IsNil(o.FieldType) {
		return true
	}

	return false
}

// SetFieldType gets a reference to the given string and assigns it to the FieldType field.
func (o *PostFormField) SetFieldType(v string) {
	o.FieldType = &v
}

// GetRequired returns the Required field value
func (o *PostFormField) GetRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *PostFormField) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Required, true
}

// SetRequired sets field value
func (o *PostFormField) SetRequired(v bool) {
	o.Required = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PostFormField) GetValue() []string {
	if o == nil || IsNil(o.Value) {
		var ret []string
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFormField) GetValueOk() ([]string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PostFormField) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given []string and assigns it to the Value field.
func (o *PostFormField) SetValue(v []string) {
	o.Value = v
}

// GetNamedValue returns the NamedValue field value if set, zero value otherwise.
func (o *PostFormField) GetNamedValue() []NamedValue {
	if o == nil || IsNil(o.NamedValue) {
		var ret []NamedValue
		return ret
	}
	return o.NamedValue
}

// GetNamedValueOk returns a tuple with the NamedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFormField) GetNamedValueOk() ([]NamedValue, bool) {
	if o == nil || IsNil(o.NamedValue) {
		return nil, false
	}
	return o.NamedValue, true
}

// HasNamedValue returns a boolean if a field has been set.
func (o *PostFormField) HasNamedValue() bool {
	if o != nil && !IsNil(o.NamedValue) {
		return true
	}

	return false
}

// SetNamedValue gets a reference to the given []NamedValue and assigns it to the NamedValue field.
func (o *PostFormField) SetNamedValue(v []NamedValue) {
	o.NamedValue = v
}

// GetCommandName returns the CommandName field value if set, zero value otherwise.
func (o *PostFormField) GetCommandName() string {
	if o == nil || IsNil(o.CommandName) {
		var ret string
		return ret
	}
	return *o.CommandName
}

// GetCommandNameOk returns a tuple with the CommandName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFormField) GetCommandNameOk() (*string, bool) {
	if o == nil || IsNil(o.CommandName) {
		return nil, false
	}
	return o.CommandName, true
}

// HasCommandName returns a boolean if a field has been set.
func (o *PostFormField) HasCommandName() bool {
	if o != nil && !IsNil(o.CommandName) {
		return true
	}

	return false
}

// SetCommandName gets a reference to the given string and assigns it to the CommandName field.
func (o *PostFormField) SetCommandName(v string) {
	o.CommandName = &v
}

// GetDefinedValues returns the DefinedValues field value if set, zero value otherwise.
func (o *PostFormField) GetDefinedValues() []AllowedValue {
	if o == nil || IsNil(o.DefinedValues) {
		var ret []AllowedValue
		return ret
	}
	return o.DefinedValues
}

// GetDefinedValuesOk returns a tuple with the DefinedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostFormField) GetDefinedValuesOk() ([]AllowedValue, bool) {
	if o == nil || IsNil(o.DefinedValues) {
		return nil, false
	}
	return o.DefinedValues, true
}

// HasDefinedValues returns a boolean if a field has been set.
func (o *PostFormField) HasDefinedValues() bool {
	if o != nil && !IsNil(o.DefinedValues) {
		return true
	}

	return false
}

// SetDefinedValues gets a reference to the given []AllowedValue and assigns it to the DefinedValues field.
func (o *PostFormField) SetDefinedValues(v []AllowedValue) {
	o.DefinedValues = v
}

func (o PostFormField) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostFormField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FieldName) {
		toSerialize["fieldName"] = o.FieldName
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.FieldType) {
		toSerialize["fieldType"] = o.FieldType
	}
	toSerialize["required"] = o.Required
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.NamedValue) {
		toSerialize["namedValue"] = o.NamedValue
	}
	if !IsNil(o.CommandName) {
		toSerialize["commandName"] = o.CommandName
	}
	if !IsNil(o.DefinedValues) {
		toSerialize["definedValues"] = o.DefinedValues
	}
	return toSerialize, nil
}

func (o *PostFormField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"required",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostFormField := _PostFormField{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostFormField)

	if err != nil {
		return err
	}

	*o = PostFormField(varPostFormField)

	return err
}

type NullablePostFormField struct {
	value *PostFormField
	isSet bool
}

func (v NullablePostFormField) Get() *PostFormField {
	return v.value
}

func (v *NullablePostFormField) Set(val *PostFormField) {
	v.value = val
	v.isSet = true
}

func (v NullablePostFormField) IsSet() bool {
	return v.isSet
}

func (v *NullablePostFormField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostFormField(val *PostFormField) *NullablePostFormField {
	return &NullablePostFormField{value: val, isSet: true}
}

func (v NullablePostFormField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostFormField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
