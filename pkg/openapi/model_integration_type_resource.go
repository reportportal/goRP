/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the IntegrationTypeResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationTypeResource{}

// IntegrationTypeResource struct for IntegrationTypeResource
type IntegrationTypeResource struct {
	Type         *int64                 `json:"type,omitempty"`
	Name         *string                `json:"name,omitempty"`
	Enabled      *bool                  `json:"enabled,omitempty"`
	AuthFlow     *string                `json:"authFlow,omitempty"`
	CreationDate *time.Time             `json:"creationDate,omitempty"`
	PluginType   *string                `json:"pluginType,omitempty"`
	GroupType    *string                `json:"groupType,omitempty"`
	Details      map[string]interface{} `json:"details,omitempty"`
}

// NewIntegrationTypeResource instantiates a new IntegrationTypeResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationTypeResource() *IntegrationTypeResource {
	this := IntegrationTypeResource{}
	return &this
}

// NewIntegrationTypeResourceWithDefaults instantiates a new IntegrationTypeResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationTypeResourceWithDefaults() *IntegrationTypeResource {
	this := IntegrationTypeResource{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IntegrationTypeResource) GetType() int64 {
	if o == nil || IsNil(o.Type) {
		var ret int64
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationTypeResource) GetTypeOk() (*int64, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IntegrationTypeResource) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int64 and assigns it to the Type field.
func (o *IntegrationTypeResource) SetType(v int64) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IntegrationTypeResource) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationTypeResource) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IntegrationTypeResource) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IntegrationTypeResource) SetName(v string) {
	o.Name = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *IntegrationTypeResource) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationTypeResource) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *IntegrationTypeResource) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *IntegrationTypeResource) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAuthFlow returns the AuthFlow field value if set, zero value otherwise.
func (o *IntegrationTypeResource) GetAuthFlow() string {
	if o == nil || IsNil(o.AuthFlow) {
		var ret string
		return ret
	}
	return *o.AuthFlow
}

// GetAuthFlowOk returns a tuple with the AuthFlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationTypeResource) GetAuthFlowOk() (*string, bool) {
	if o == nil || IsNil(o.AuthFlow) {
		return nil, false
	}
	return o.AuthFlow, true
}

// HasAuthFlow returns a boolean if a field has been set.
func (o *IntegrationTypeResource) HasAuthFlow() bool {
	if o != nil && !IsNil(o.AuthFlow) {
		return true
	}

	return false
}

// SetAuthFlow gets a reference to the given string and assigns it to the AuthFlow field.
func (o *IntegrationTypeResource) SetAuthFlow(v string) {
	o.AuthFlow = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *IntegrationTypeResource) GetCreationDate() time.Time {
	if o == nil || IsNil(o.CreationDate) {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationTypeResource) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *IntegrationTypeResource) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *IntegrationTypeResource) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetPluginType returns the PluginType field value if set, zero value otherwise.
func (o *IntegrationTypeResource) GetPluginType() string {
	if o == nil || IsNil(o.PluginType) {
		var ret string
		return ret
	}
	return *o.PluginType
}

// GetPluginTypeOk returns a tuple with the PluginType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationTypeResource) GetPluginTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PluginType) {
		return nil, false
	}
	return o.PluginType, true
}

// HasPluginType returns a boolean if a field has been set.
func (o *IntegrationTypeResource) HasPluginType() bool {
	if o != nil && !IsNil(o.PluginType) {
		return true
	}

	return false
}

// SetPluginType gets a reference to the given string and assigns it to the PluginType field.
func (o *IntegrationTypeResource) SetPluginType(v string) {
	o.PluginType = &v
}

// GetGroupType returns the GroupType field value if set, zero value otherwise.
func (o *IntegrationTypeResource) GetGroupType() string {
	if o == nil || IsNil(o.GroupType) {
		var ret string
		return ret
	}
	return *o.GroupType
}

// GetGroupTypeOk returns a tuple with the GroupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationTypeResource) GetGroupTypeOk() (*string, bool) {
	if o == nil || IsNil(o.GroupType) {
		return nil, false
	}
	return o.GroupType, true
}

// HasGroupType returns a boolean if a field has been set.
func (o *IntegrationTypeResource) HasGroupType() bool {
	if o != nil && !IsNil(o.GroupType) {
		return true
	}

	return false
}

// SetGroupType gets a reference to the given string and assigns it to the GroupType field.
func (o *IntegrationTypeResource) SetGroupType(v string) {
	o.GroupType = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *IntegrationTypeResource) GetDetails() map[string]interface{} {
	if o == nil || IsNil(o.Details) {
		var ret map[string]interface{}
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationTypeResource) GetDetailsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Details) {
		return map[string]interface{}{}, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *IntegrationTypeResource) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given map[string]interface{} and assigns it to the Details field.
func (o *IntegrationTypeResource) SetDetails(v map[string]interface{}) {
	o.Details = v
}

func (o IntegrationTypeResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationTypeResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.AuthFlow) {
		toSerialize["authFlow"] = o.AuthFlow
	}
	if !IsNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	if !IsNil(o.PluginType) {
		toSerialize["pluginType"] = o.PluginType
	}
	if !IsNil(o.GroupType) {
		toSerialize["groupType"] = o.GroupType
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	return toSerialize, nil
}

type NullableIntegrationTypeResource struct {
	value *IntegrationTypeResource
	isSet bool
}

func (v NullableIntegrationTypeResource) Get() *IntegrationTypeResource {
	return v.value
}

func (v *NullableIntegrationTypeResource) Set(val *IntegrationTypeResource) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationTypeResource) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationTypeResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationTypeResource(val *IntegrationTypeResource) *NullableIntegrationTypeResource {
	return &NullableIntegrationTypeResource{value: val, isSet: true}
}

func (v NullableIntegrationTypeResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationTypeResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
