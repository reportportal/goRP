/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the GroupProjectInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupProjectInfo{}

// GroupProjectInfo Information about a project as a group member.
type GroupProjectInfo struct {
	// Resource identifier.
	Id *int64 `json:"id,omitempty"`
	// Display name.
	Name       *string `json:"name,omitempty" validate:"regexp=^[A-Za-z0-9.'_\\\\- ]+$"`
	Permission *string `json:"permission,omitempty"`
	// Timestamp of project adding to group.
	AddedAt *time.Time `json:"added_at,omitempty"`
	// Timestamp of project updating in group.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewGroupProjectInfo instantiates a new GroupProjectInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupProjectInfo() *GroupProjectInfo {
	this := GroupProjectInfo{}
	return &this
}

// NewGroupProjectInfoWithDefaults instantiates a new GroupProjectInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupProjectInfoWithDefaults() *GroupProjectInfo {
	this := GroupProjectInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GroupProjectInfo) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupProjectInfo) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GroupProjectInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *GroupProjectInfo) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GroupProjectInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupProjectInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GroupProjectInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GroupProjectInfo) SetName(v string) {
	o.Name = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *GroupProjectInfo) GetPermission() string {
	if o == nil || IsNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupProjectInfo) GetPermissionOk() (*string, bool) {
	if o == nil || IsNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *GroupProjectInfo) HasPermission() bool {
	if o != nil && !IsNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *GroupProjectInfo) SetPermission(v string) {
	o.Permission = &v
}

// GetAddedAt returns the AddedAt field value if set, zero value otherwise.
func (o *GroupProjectInfo) GetAddedAt() time.Time {
	if o == nil || IsNil(o.AddedAt) {
		var ret time.Time
		return ret
	}
	return *o.AddedAt
}

// GetAddedAtOk returns a tuple with the AddedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupProjectInfo) GetAddedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AddedAt) {
		return nil, false
	}
	return o.AddedAt, true
}

// HasAddedAt returns a boolean if a field has been set.
func (o *GroupProjectInfo) HasAddedAt() bool {
	if o != nil && !IsNil(o.AddedAt) {
		return true
	}

	return false
}

// SetAddedAt gets a reference to the given time.Time and assigns it to the AddedAt field.
func (o *GroupProjectInfo) SetAddedAt(v time.Time) {
	o.AddedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *GroupProjectInfo) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupProjectInfo) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *GroupProjectInfo) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *GroupProjectInfo) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o GroupProjectInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupProjectInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	if !IsNil(o.AddedAt) {
		toSerialize["added_at"] = o.AddedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableGroupProjectInfo struct {
	value *GroupProjectInfo
	isSet bool
}

func (v NullableGroupProjectInfo) Get() *GroupProjectInfo {
	return v.value
}

func (v *NullableGroupProjectInfo) Set(val *GroupProjectInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupProjectInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupProjectInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupProjectInfo(val *GroupProjectInfo) *NullableGroupProjectInfo {
	return &NullableGroupProjectInfo{value: val, isSet: true}
}

func (v NullableGroupProjectInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupProjectInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
