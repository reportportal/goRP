/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// LaunchAsyncAPIService LaunchAsyncAPI service
type LaunchAsyncAPIService service

type ApiFinishLaunchRequest struct {
	ctx               context.Context
	ApiService        *LaunchAsyncAPIService
	launchId          string
	projectName       string
	finishExecutionRQ *FinishExecutionRQ
}

func (r ApiFinishLaunchRequest) FinishExecutionRQ(finishExecutionRQ FinishExecutionRQ) ApiFinishLaunchRequest {
	r.finishExecutionRQ = &finishExecutionRQ
	return r
}

func (r ApiFinishLaunchRequest) Execute() (*FinishLaunchRS, *http.Response, error) {
	return r.ApiService.FinishLaunchExecute(r)
}

/*
FinishLaunch Finish Launch

Finish launch for specified project

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param launchId
	@param projectName
	@return ApiFinishLaunchRequest
*/
func (a *LaunchAsyncAPIService) FinishLaunch(ctx context.Context, launchId string, projectName string) ApiFinishLaunchRequest {
	return ApiFinishLaunchRequest{
		ApiService:  a,
		ctx:         ctx,
		launchId:    launchId,
		projectName: projectName,
	}
}

// Execute executes the request
//
//	@return FinishLaunchRS
func (a *LaunchAsyncAPIService) FinishLaunchExecute(r ApiFinishLaunchRequest) (*FinishLaunchRS, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FinishLaunchRS
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LaunchAsyncAPIService.FinishLaunch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{projectName}/launch/{launchId}/finish"
	localVarPath = strings.Replace(localVarPath, "{"+"launchId"+"}", url.PathEscape(parameterValueToString(r.launchId, "launchId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectName"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.finishExecutionRQ == nil {
		return localVarReturnValue, nil, reportError("finishExecutionRQ is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.finishExecutionRQ
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMergeLaunchesOldUuidRequest struct {
	ctx             context.Context
	ApiService      *LaunchAsyncAPIService
	projectName     string
	mergeLaunchesRQ *MergeLaunchesRQ
}

func (r ApiMergeLaunchesOldUuidRequest) MergeLaunchesRQ(mergeLaunchesRQ MergeLaunchesRQ) ApiMergeLaunchesOldUuidRequest {
	r.mergeLaunchesRQ = &mergeLaunchesRQ
	return r
}

func (r ApiMergeLaunchesOldUuidRequest) Execute() (*LaunchResourceOld, *http.Response, error) {
	return r.ApiService.MergeLaunchesOldUuidExecute(r)
}

/*
MergeLaunchesOldUuid Merge set of specified launches in common one

This operation merges a set of launches into a common one. The IDs of the launches to be merged should be provided in the 'launches' field of the request body.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectName
	@return ApiMergeLaunchesOldUuidRequest
*/
func (a *LaunchAsyncAPIService) MergeLaunchesOldUuid(ctx context.Context, projectName string) ApiMergeLaunchesOldUuidRequest {
	return ApiMergeLaunchesOldUuidRequest{
		ApiService:  a,
		ctx:         ctx,
		projectName: projectName,
	}
}

// Execute executes the request
//
//	@return LaunchResourceOld
func (a *LaunchAsyncAPIService) MergeLaunchesOldUuidExecute(r ApiMergeLaunchesOldUuidRequest) (*LaunchResourceOld, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LaunchResourceOld
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LaunchAsyncAPIService.MergeLaunchesOldUuid")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{projectName}/launch/merge"
	localVarPath = strings.Replace(localVarPath, "{"+"projectName"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mergeLaunchesRQ == nil {
		return localVarReturnValue, nil, reportError("mergeLaunchesRQ is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/x.reportportal.launch.v2+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.mergeLaunchesRQ
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiStartLaunchRequest struct {
	ctx           context.Context
	ApiService    *LaunchAsyncAPIService
	projectName   string
	startLaunchRQ *StartLaunchRQ
}

func (r ApiStartLaunchRequest) StartLaunchRQ(startLaunchRQ StartLaunchRQ) ApiStartLaunchRequest {
	r.startLaunchRQ = &startLaunchRQ
	return r
}

func (r ApiStartLaunchRequest) Execute() (*StartLaunchRS, *http.Response, error) {
	return r.ApiService.StartLaunchExecute(r)
}

/*
StartLaunch Starts launch for specified project

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectName
	@return ApiStartLaunchRequest
*/
func (a *LaunchAsyncAPIService) StartLaunch(ctx context.Context, projectName string) ApiStartLaunchRequest {
	return ApiStartLaunchRequest{
		ApiService:  a,
		ctx:         ctx,
		projectName: projectName,
	}
}

// Execute executes the request
//
//	@return StartLaunchRS
func (a *LaunchAsyncAPIService) StartLaunchExecute(r ApiStartLaunchRequest) (*StartLaunchRS, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StartLaunchRS
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LaunchAsyncAPIService.StartLaunch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/{projectName}/launch"
	localVarPath = strings.Replace(localVarPath, "{"+"projectName"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startLaunchRQ == nil {
		return localVarReturnValue, nil, reportError("startLaunchRQ is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.startLaunchRQ
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if a.client.cfg.ResponseMiddleware != nil {
		err = a.client.cfg.ResponseMiddleware(localVarHTTPResponse, localVarBody)
		if err != nil {
			return localVarReturnValue, localVarHTTPResponse, err
		}
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
