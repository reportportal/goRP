/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UnassignUsersRQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnassignUsersRQ{}

// UnassignUsersRQ struct for UnassignUsersRQ
type UnassignUsersRQ struct {
	UserNames []string `json:"userNames"`
}

type _UnassignUsersRQ UnassignUsersRQ

// NewUnassignUsersRQ instantiates a new UnassignUsersRQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnassignUsersRQ(userNames []string) *UnassignUsersRQ {
	this := UnassignUsersRQ{}
	this.UserNames = userNames
	return &this
}

// NewUnassignUsersRQWithDefaults instantiates a new UnassignUsersRQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnassignUsersRQWithDefaults() *UnassignUsersRQ {
	this := UnassignUsersRQ{}
	return &this
}

// GetUserNames returns the UserNames field value
func (o *UnassignUsersRQ) GetUserNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.UserNames
}

// GetUserNamesOk returns a tuple with the UserNames field value
// and a boolean to check if the value has been set.
func (o *UnassignUsersRQ) GetUserNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserNames, true
}

// SetUserNames sets field value
func (o *UnassignUsersRQ) SetUserNames(v []string) {
	o.UserNames = v
}

func (o UnassignUsersRQ) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnassignUsersRQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userNames"] = o.UserNames
	return toSerialize, nil
}

func (o *UnassignUsersRQ) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userNames",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnassignUsersRQ := _UnassignUsersRQ{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUnassignUsersRQ)

	if err != nil {
		return err
	}

	*o = UnassignUsersRQ(varUnassignUsersRQ)

	return err
}

type NullableUnassignUsersRQ struct {
	value *UnassignUsersRQ
	isSet bool
}

func (v NullableUnassignUsersRQ) Get() *UnassignUsersRQ {
	return v.value
}

func (v *NullableUnassignUsersRQ) Set(val *UnassignUsersRQ) {
	v.value = val
	v.isSet = true
}

func (v NullableUnassignUsersRQ) IsSet() bool {
	return v.isSet
}

func (v *NullableUnassignUsersRQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnassignUsersRQ(val *UnassignUsersRQ) *NullableUnassignUsersRQ {
	return &NullableUnassignUsersRQ{value: val, isSet: true}
}

func (v NullableUnassignUsersRQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnassignUsersRQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
