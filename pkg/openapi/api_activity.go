/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ActivityAPIService ActivityAPI service
type ActivityAPIService service

type ApiGetActivityRequest struct {
	ctx         context.Context
	ApiService  *ActivityAPIService
	activityId  int64
	projectName string
}

func (r ApiGetActivityRequest) Execute() (*ActivityResource, *http.Response, error) {
	return r.ApiService.GetActivityExecute(r)
}

/*
GetActivity Get an activity by its ID in a specific project

Fetches the activity details by its ID for a specific project.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param activityId The ID of the activity to be searched
	@param projectName The name of the project for which the activity should be searched
	@return ApiGetActivityRequest
*/
func (a *ActivityAPIService) GetActivity(ctx context.Context, activityId int64, projectName string) ApiGetActivityRequest {
	return ApiGetActivityRequest{
		ApiService:  a,
		ctx:         ctx,
		activityId:  activityId,
		projectName: projectName,
	}
}

// Execute executes the request
//
//	@return ActivityResource
func (a *ActivityAPIService) GetActivityExecute(r ApiGetActivityRequest) (*ActivityResource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ActivityResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityAPIService.GetActivity")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{projectName}/activity/{activityId}"
	localVarPath = strings.Replace(localVarPath, "{"+"activityId"+"}", url.PathEscape(parameterValueToString(r.activityId, "activityId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectName"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRS
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorRS
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorRS
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorRS
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorRS
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTestItemActivitiesRequest struct {
	ctx                 context.Context
	ApiService          *ActivityAPIService
	itemId              int64
	projectName         string
	filterEqId          *int32
	filterEqAction      *string
	filterEqObjectId    *int32
	filterEqSubjectName *string
	filterEqProjectName *string
	filterEqUser        *string
	filterEqCreatedAt   *string
	filterEqObjectName  *string
	filterEqSubjectType *string
	filterEqPriority    *string
	filterEqSubjectId   *int32
	filterEqEventName   *string
	filterEqObjectType  *string
	filterEqProjectId   *int32
	pagePage            *int32
	pageSize            *int32
	pageSort            *string
}

// Filters by &#39;id&#39;
func (r ApiGetTestItemActivitiesRequest) FilterEqId(filterEqId int32) ApiGetTestItemActivitiesRequest {
	r.filterEqId = &filterEqId
	return r
}

// Filters by &#39;action&#39;
func (r ApiGetTestItemActivitiesRequest) FilterEqAction(filterEqAction string) ApiGetTestItemActivitiesRequest {
	r.filterEqAction = &filterEqAction
	return r
}

// Filters by &#39;objectId&#39;
func (r ApiGetTestItemActivitiesRequest) FilterEqObjectId(filterEqObjectId int32) ApiGetTestItemActivitiesRequest {
	r.filterEqObjectId = &filterEqObjectId
	return r
}

// Filters by &#39;subjectName&#39;
func (r ApiGetTestItemActivitiesRequest) FilterEqSubjectName(filterEqSubjectName string) ApiGetTestItemActivitiesRequest {
	r.filterEqSubjectName = &filterEqSubjectName
	return r
}

// Filters by &#39;projectName&#39;
func (r ApiGetTestItemActivitiesRequest) FilterEqProjectName(filterEqProjectName string) ApiGetTestItemActivitiesRequest {
	r.filterEqProjectName = &filterEqProjectName
	return r
}

// Filters by &#39;user&#39;
func (r ApiGetTestItemActivitiesRequest) FilterEqUser(filterEqUser string) ApiGetTestItemActivitiesRequest {
	r.filterEqUser = &filterEqUser
	return r
}

// Filters by &#39;createdAt&#39;
func (r ApiGetTestItemActivitiesRequest) FilterEqCreatedAt(filterEqCreatedAt string) ApiGetTestItemActivitiesRequest {
	r.filterEqCreatedAt = &filterEqCreatedAt
	return r
}

// Filters by &#39;objectName&#39;
func (r ApiGetTestItemActivitiesRequest) FilterEqObjectName(filterEqObjectName string) ApiGetTestItemActivitiesRequest {
	r.filterEqObjectName = &filterEqObjectName
	return r
}

// Filters by &#39;subjectType&#39;
func (r ApiGetTestItemActivitiesRequest) FilterEqSubjectType(filterEqSubjectType string) ApiGetTestItemActivitiesRequest {
	r.filterEqSubjectType = &filterEqSubjectType
	return r
}

// Filters by &#39;priority&#39;
func (r ApiGetTestItemActivitiesRequest) FilterEqPriority(filterEqPriority string) ApiGetTestItemActivitiesRequest {
	r.filterEqPriority = &filterEqPriority
	return r
}

// Filters by &#39;subjectId&#39;
func (r ApiGetTestItemActivitiesRequest) FilterEqSubjectId(filterEqSubjectId int32) ApiGetTestItemActivitiesRequest {
	r.filterEqSubjectId = &filterEqSubjectId
	return r
}

// Filters by &#39;eventName&#39;
func (r ApiGetTestItemActivitiesRequest) FilterEqEventName(filterEqEventName string) ApiGetTestItemActivitiesRequest {
	r.filterEqEventName = &filterEqEventName
	return r
}

// Filters by &#39;objectType&#39;
func (r ApiGetTestItemActivitiesRequest) FilterEqObjectType(filterEqObjectType string) ApiGetTestItemActivitiesRequest {
	r.filterEqObjectType = &filterEqObjectType
	return r
}

// Filters by &#39;projectId&#39;
func (r ApiGetTestItemActivitiesRequest) FilterEqProjectId(filterEqProjectId int32) ApiGetTestItemActivitiesRequest {
	r.filterEqProjectId = &filterEqProjectId
	return r
}

// Results page you want to retrieve (0..N)
func (r ApiGetTestItemActivitiesRequest) PagePage(pagePage int32) ApiGetTestItemActivitiesRequest {
	r.pagePage = &pagePage
	return r
}

// Number of records per page
func (r ApiGetTestItemActivitiesRequest) PageSize(pageSize int32) ApiGetTestItemActivitiesRequest {
	r.pageSize = &pageSize
	return r
}

// Sorting criteria in the format: property, (asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiGetTestItemActivitiesRequest) PageSort(pageSort string) ApiGetTestItemActivitiesRequest {
	r.pageSort = &pageSort
	return r
}

func (r ApiGetTestItemActivitiesRequest) Execute() (*Page, *http.Response, error) {
	return r.ApiService.GetTestItemActivitiesExecute(r)
}

/*
GetTestItemActivities Get a list of item activities for a specific project

Fetches a list of item activities for a specific project.
<p>Action field can have these values:</p>
<ul>
<li>'create'</li>
<li>'update'</li>
<li>'delete'</li>
<li>'bulkCreate'</li>
<li>'bulkUpdate'</li>
<li>'bulkDelete'</li>
<li>'analyze'</li>
<li>'start'</li>
<li>'finish'</li>
<li>'post'</li>
<li>'link'</li>
<li>'unlink'</li>
<li>'assign'</li>
<li>'unassign'</li>
<li>'generate'</li>
<li>'match'</li>
<li>'changeRole'</li>
<li>'updateUserRole'</li>
</ul>
<p>Priority field can have these values:</p>
<ul>
<li>'critical'</li>
<li>'high'</li>
<li>'medium'</li>
<li>'low'</li>
<li>'info'</li>
</ul>
<p>Object type field can have these values:</p>
<ul>
<li>'launch'</li>
<li>'dashboard'</li>
<li>'defectType'</li>
<li>'emailConfig'</li>
<li>'filter'</li>
<li>'import'</li>
<li>'integration'</li>
<li>'itemIssue'</li>
<li>'project'</li>
<li>'sharing'</li>
<li>'user'</li>
<li>'widget'</li>
<li>'pattern'</li>
<li>'index'</li>
<li>'plugin'</li>
<li>'invitationLink'</li>
</ul>
<p>Subject type field can have these values:</p>
<ul>
<li>'user'</li>
<li>'application'</li>
<li>'rule'</li>
<li>'custom'</li>
</ul>
<p> You can filter by different operators:
<ul>
<li>eq (Equals condition)</li>
<li>ne (Not equals condition)</li>
<li>cnt (Contains condition)</li>
<li>under</li>
<li>level (Number of labels in path)</li>
<li>ex (Exists condition)</li>
<li>in (Accepts filter value as comma-separated list)</li>
<li>ea (Equals any. Accepts filter value as comma-separated list)</li>
<li>has (Accepts filter value as comma-separated list. Returns 'TRUE' of all
provided values exist in collection)</li>
<li>any (Overlap condition between two arrays)</li>
<li>gt (Greater than condition)</li>
<li>gte (Greater than or Equals condition)</li>
<li>lt (Lower than condition)</li>
<li>lte (Lower than or Equals condition)</li>
<li>btw (Between condition. Include boundaries. 'Between' condition applicable only for
positive Numbers, Dates or specific TimeStamp values)</li>
</ul>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param itemId The ID of the test item for which all its activities should be searched
	@param projectName The name of the project for which the activities should be searched
	@return ApiGetTestItemActivitiesRequest
*/
func (a *ActivityAPIService) GetTestItemActivities(ctx context.Context, itemId int64, projectName string) ApiGetTestItemActivitiesRequest {
	return ApiGetTestItemActivitiesRequest{
		ApiService:  a,
		ctx:         ctx,
		itemId:      itemId,
		projectName: projectName,
	}
}

// Execute executes the request
//
//	@return Page
func (a *ActivityAPIService) GetTestItemActivitiesExecute(r ApiGetTestItemActivitiesRequest) (*Page, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Page
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityAPIService.GetTestItemActivities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/{projectName}/activity/item/{itemId}"
	localVarPath = strings.Replace(localVarPath, "{"+"itemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectName"+"}", url.PathEscape(parameterValueToString(r.projectName, "projectName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterEqId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter.eq.id", r.filterEqId, "form", "")
	}
	if r.filterEqAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter.eq.action", r.filterEqAction, "form", "")
	}
	if r.filterEqObjectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter.eq.objectId", r.filterEqObjectId, "form", "")
	}
	if r.filterEqSubjectName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter.eq.subjectName", r.filterEqSubjectName, "form", "")
	}
	if r.filterEqProjectName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter.eq.projectName", r.filterEqProjectName, "form", "")
	}
	if r.filterEqUser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter.eq.user", r.filterEqUser, "form", "")
	}
	if r.filterEqCreatedAt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter.eq.createdAt", r.filterEqCreatedAt, "form", "")
	}
	if r.filterEqObjectName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter.eq.objectName", r.filterEqObjectName, "form", "")
	}
	if r.filterEqSubjectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter.eq.subjectType", r.filterEqSubjectType, "form", "")
	}
	if r.filterEqPriority != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter.eq.priority", r.filterEqPriority, "form", "")
	}
	if r.filterEqSubjectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter.eq.subjectId", r.filterEqSubjectId, "form", "")
	}
	if r.filterEqEventName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter.eq.eventName", r.filterEqEventName, "form", "")
	}
	if r.filterEqObjectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter.eq.objectType", r.filterEqObjectType, "form", "")
	}
	if r.filterEqProjectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter.eq.projectId", r.filterEqProjectId, "form", "")
	}
	if r.pagePage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page.page", r.pagePage, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page.size", r.pageSize, "form", "")
	}
	if r.pageSort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page.sort", r.pageSort, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorRS
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorRS
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorRS
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorRS
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
