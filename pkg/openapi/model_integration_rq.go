/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the IntegrationRQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationRQ{}

// IntegrationRQ struct for IntegrationRQ
type IntegrationRQ struct {
	Name                  *string                `json:"name,omitempty"`
	IntegrationParameters map[string]interface{} `json:"integrationParameters,omitempty"`
	Enabled               *bool                  `json:"enabled,omitempty"`
}

// NewIntegrationRQ instantiates a new IntegrationRQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationRQ() *IntegrationRQ {
	this := IntegrationRQ{}
	return &this
}

// NewIntegrationRQWithDefaults instantiates a new IntegrationRQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationRQWithDefaults() *IntegrationRQ {
	this := IntegrationRQ{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IntegrationRQ) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationRQ) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IntegrationRQ) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IntegrationRQ) SetName(v string) {
	o.Name = &v
}

// GetIntegrationParameters returns the IntegrationParameters field value if set, zero value otherwise.
func (o *IntegrationRQ) GetIntegrationParameters() map[string]interface{} {
	if o == nil || IsNil(o.IntegrationParameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.IntegrationParameters
}

// GetIntegrationParametersOk returns a tuple with the IntegrationParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationRQ) GetIntegrationParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.IntegrationParameters) {
		return map[string]interface{}{}, false
	}
	return o.IntegrationParameters, true
}

// HasIntegrationParameters returns a boolean if a field has been set.
func (o *IntegrationRQ) HasIntegrationParameters() bool {
	if o != nil && !IsNil(o.IntegrationParameters) {
		return true
	}

	return false
}

// SetIntegrationParameters gets a reference to the given map[string]interface{} and assigns it to the IntegrationParameters field.
func (o *IntegrationRQ) SetIntegrationParameters(v map[string]interface{}) {
	o.IntegrationParameters = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *IntegrationRQ) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationRQ) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *IntegrationRQ) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *IntegrationRQ) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o IntegrationRQ) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationRQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IntegrationParameters) {
		toSerialize["integrationParameters"] = o.IntegrationParameters
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableIntegrationRQ struct {
	value *IntegrationRQ
	isSet bool
}

func (v NullableIntegrationRQ) Get() *IntegrationRQ {
	return v.value
}

func (v *NullableIntegrationRQ) Set(val *IntegrationRQ) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationRQ) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationRQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationRQ(val *IntegrationRQ) *NullableIntegrationRQ {
	return &NullableIntegrationRQ{value: val, isSet: true}
}

func (v NullableIntegrationRQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationRQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
