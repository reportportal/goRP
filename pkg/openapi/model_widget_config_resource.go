/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the WidgetConfigResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WidgetConfigResource{}

// WidgetConfigResource struct for WidgetConfigResource
type WidgetConfigResource struct {
	WidgetObject   WidgetObjectModel `json:"widgetObject"`
	WidgetResource WidgetResource    `json:"widgetResource"`
}

type _WidgetConfigResource WidgetConfigResource

// NewWidgetConfigResource instantiates a new WidgetConfigResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWidgetConfigResource(widgetObject WidgetObjectModel, widgetResource WidgetResource) *WidgetConfigResource {
	this := WidgetConfigResource{}
	this.WidgetObject = widgetObject
	this.WidgetResource = widgetResource
	return &this
}

// NewWidgetConfigResourceWithDefaults instantiates a new WidgetConfigResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWidgetConfigResourceWithDefaults() *WidgetConfigResource {
	this := WidgetConfigResource{}
	return &this
}

// GetWidgetObject returns the WidgetObject field value
func (o *WidgetConfigResource) GetWidgetObject() WidgetObjectModel {
	if o == nil {
		var ret WidgetObjectModel
		return ret
	}

	return o.WidgetObject
}

// GetWidgetObjectOk returns a tuple with the WidgetObject field value
// and a boolean to check if the value has been set.
func (o *WidgetConfigResource) GetWidgetObjectOk() (*WidgetObjectModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WidgetObject, true
}

// SetWidgetObject sets field value
func (o *WidgetConfigResource) SetWidgetObject(v WidgetObjectModel) {
	o.WidgetObject = v
}

// GetWidgetResource returns the WidgetResource field value
func (o *WidgetConfigResource) GetWidgetResource() WidgetResource {
	if o == nil {
		var ret WidgetResource
		return ret
	}

	return o.WidgetResource
}

// GetWidgetResourceOk returns a tuple with the WidgetResource field value
// and a boolean to check if the value has been set.
func (o *WidgetConfigResource) GetWidgetResourceOk() (*WidgetResource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WidgetResource, true
}

// SetWidgetResource sets field value
func (o *WidgetConfigResource) SetWidgetResource(v WidgetResource) {
	o.WidgetResource = v
}

func (o WidgetConfigResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WidgetConfigResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["widgetObject"] = o.WidgetObject
	toSerialize["widgetResource"] = o.WidgetResource
	return toSerialize, nil
}

func (o *WidgetConfigResource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"widgetObject",
		"widgetResource",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWidgetConfigResource := _WidgetConfigResource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWidgetConfigResource)

	if err != nil {
		return err
	}

	*o = WidgetConfigResource(varWidgetConfigResource)

	return err
}

type NullableWidgetConfigResource struct {
	value *WidgetConfigResource
	isSet bool
}

func (v NullableWidgetConfigResource) Get() *WidgetConfigResource {
	return v.value
}

func (v *NullableWidgetConfigResource) Set(val *WidgetConfigResource) {
	v.value = val
	v.isSet = true
}

func (v NullableWidgetConfigResource) IsSet() bool {
	return v.isSet
}

func (v *NullableWidgetConfigResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidgetConfigResource(val *WidgetConfigResource) *NullableWidgetConfigResource {
	return &NullableWidgetConfigResource{value: val, isSet: true}
}

func (v NullableWidgetConfigResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidgetConfigResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
