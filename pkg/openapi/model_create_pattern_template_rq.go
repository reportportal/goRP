/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreatePatternTemplateRQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePatternTemplateRQ{}

// CreatePatternTemplateRQ struct for CreatePatternTemplateRQ
type CreatePatternTemplateRQ struct {
	Name    string `json:"name"`
	Value   string `json:"value"`
	Type    string `json:"type"`
	Enabled bool   `json:"enabled"`
}

type _CreatePatternTemplateRQ CreatePatternTemplateRQ

// NewCreatePatternTemplateRQ instantiates a new CreatePatternTemplateRQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePatternTemplateRQ(name string, value string, type_ string, enabled bool) *CreatePatternTemplateRQ {
	this := CreatePatternTemplateRQ{}
	this.Name = name
	this.Value = value
	this.Type = type_
	this.Enabled = enabled
	return &this
}

// NewCreatePatternTemplateRQWithDefaults instantiates a new CreatePatternTemplateRQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePatternTemplateRQWithDefaults() *CreatePatternTemplateRQ {
	this := CreatePatternTemplateRQ{}
	return &this
}

// GetName returns the Name field value
func (o *CreatePatternTemplateRQ) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreatePatternTemplateRQ) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreatePatternTemplateRQ) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *CreatePatternTemplateRQ) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CreatePatternTemplateRQ) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CreatePatternTemplateRQ) SetValue(v string) {
	o.Value = v
}

// GetType returns the Type field value
func (o *CreatePatternTemplateRQ) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreatePatternTemplateRQ) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreatePatternTemplateRQ) SetType(v string) {
	o.Type = v
}

// GetEnabled returns the Enabled field value
func (o *CreatePatternTemplateRQ) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *CreatePatternTemplateRQ) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *CreatePatternTemplateRQ) SetEnabled(v bool) {
	o.Enabled = v
}

func (o CreatePatternTemplateRQ) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePatternTemplateRQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["value"] = o.Value
	toSerialize["type"] = o.Type
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

func (o *CreatePatternTemplateRQ) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"value",
		"type",
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreatePatternTemplateRQ := _CreatePatternTemplateRQ{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreatePatternTemplateRQ)

	if err != nil {
		return err
	}

	*o = CreatePatternTemplateRQ(varCreatePatternTemplateRQ)

	return err
}

type NullableCreatePatternTemplateRQ struct {
	value *CreatePatternTemplateRQ
	isSet bool
}

func (v NullableCreatePatternTemplateRQ) Get() *CreatePatternTemplateRQ {
	return v.value
}

func (v *NullableCreatePatternTemplateRQ) Set(val *CreatePatternTemplateRQ) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePatternTemplateRQ) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePatternTemplateRQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePatternTemplateRQ(val *CreatePatternTemplateRQ) *NullableCreatePatternTemplateRQ {
	return &NullableCreatePatternTemplateRQ{value: val, isSet: true}
}

func (v NullableCreatePatternTemplateRQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePatternTemplateRQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
