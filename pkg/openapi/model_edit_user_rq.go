/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EditUserRQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditUserRQ{}

// EditUserRQ struct for EditUserRQ
type EditUserRQ struct {
	Email       *string `json:"email,omitempty"`
	ExternalId  *string `json:"externalId,omitempty"`
	Active      *bool   `json:"active,omitempty"`
	Role        *string `json:"role,omitempty"`
	AccountType *string `json:"accountType,omitempty"`
	FullName    string  `json:"fullName" validate:"regexp=(\\\\s*[\\\\pL0-9-_\\\\.]+\\\\s*)+"`
}

type _EditUserRQ EditUserRQ

// NewEditUserRQ instantiates a new EditUserRQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditUserRQ(fullName string) *EditUserRQ {
	this := EditUserRQ{}
	this.FullName = fullName
	return &this
}

// NewEditUserRQWithDefaults instantiates a new EditUserRQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditUserRQWithDefaults() *EditUserRQ {
	this := EditUserRQ{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *EditUserRQ) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserRQ) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *EditUserRQ) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *EditUserRQ) SetEmail(v string) {
	o.Email = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *EditUserRQ) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserRQ) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *EditUserRQ) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *EditUserRQ) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *EditUserRQ) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserRQ) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *EditUserRQ) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *EditUserRQ) SetActive(v bool) {
	o.Active = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *EditUserRQ) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserRQ) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *EditUserRQ) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *EditUserRQ) SetRole(v string) {
	o.Role = &v
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *EditUserRQ) GetAccountType() string {
	if o == nil || IsNil(o.AccountType) {
		var ret string
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditUserRQ) GetAccountTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AccountType) {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *EditUserRQ) HasAccountType() bool {
	if o != nil && !IsNil(o.AccountType) {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given string and assigns it to the AccountType field.
func (o *EditUserRQ) SetAccountType(v string) {
	o.AccountType = &v
}

// GetFullName returns the FullName field value
func (o *EditUserRQ) GetFullName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value
// and a boolean to check if the value has been set.
func (o *EditUserRQ) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FullName, true
}

// SetFullName sets field value
func (o *EditUserRQ) SetFullName(v string) {
	o.FullName = v
}

func (o EditUserRQ) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditUserRQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.AccountType) {
		toSerialize["accountType"] = o.AccountType
	}
	toSerialize["fullName"] = o.FullName
	return toSerialize, nil
}

func (o *EditUserRQ) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fullName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEditUserRQ := _EditUserRQ{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEditUserRQ)

	if err != nil {
		return err
	}

	*o = EditUserRQ(varEditUserRQ)

	return err
}

type NullableEditUserRQ struct {
	value *EditUserRQ
	isSet bool
}

func (v NullableEditUserRQ) Get() *EditUserRQ {
	return v.value
}

func (v *NullableEditUserRQ) Set(val *EditUserRQ) {
	v.value = val
	v.isSet = true
}

func (v NullableEditUserRQ) IsSet() bool {
	return v.isSet
}

func (v *NullableEditUserRQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditUserRQ(val *EditUserRQ) *NullableEditUserRQ {
	return &NullableEditUserRQ{value: val, isSet: true}
}

func (v NullableEditUserRQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditUserRQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
