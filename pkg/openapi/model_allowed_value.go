/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AllowedValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllowedValue{}

// AllowedValue struct for AllowedValue
type AllowedValue struct {
	ValueId   *string `json:"valueId,omitempty"`
	ValueName *string `json:"valueName,omitempty"`
}

// NewAllowedValue instantiates a new AllowedValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowedValue() *AllowedValue {
	this := AllowedValue{}
	return &this
}

// NewAllowedValueWithDefaults instantiates a new AllowedValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowedValueWithDefaults() *AllowedValue {
	this := AllowedValue{}
	return &this
}

// GetValueId returns the ValueId field value if set, zero value otherwise.
func (o *AllowedValue) GetValueId() string {
	if o == nil || IsNil(o.ValueId) {
		var ret string
		return ret
	}
	return *o.ValueId
}

// GetValueIdOk returns a tuple with the ValueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedValue) GetValueIdOk() (*string, bool) {
	if o == nil || IsNil(o.ValueId) {
		return nil, false
	}
	return o.ValueId, true
}

// HasValueId returns a boolean if a field has been set.
func (o *AllowedValue) HasValueId() bool {
	if o != nil && !IsNil(o.ValueId) {
		return true
	}

	return false
}

// SetValueId gets a reference to the given string and assigns it to the ValueId field.
func (o *AllowedValue) SetValueId(v string) {
	o.ValueId = &v
}

// GetValueName returns the ValueName field value if set, zero value otherwise.
func (o *AllowedValue) GetValueName() string {
	if o == nil || IsNil(o.ValueName) {
		var ret string
		return ret
	}
	return *o.ValueName
}

// GetValueNameOk returns a tuple with the ValueName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowedValue) GetValueNameOk() (*string, bool) {
	if o == nil || IsNil(o.ValueName) {
		return nil, false
	}
	return o.ValueName, true
}

// HasValueName returns a boolean if a field has been set.
func (o *AllowedValue) HasValueName() bool {
	if o != nil && !IsNil(o.ValueName) {
		return true
	}

	return false
}

// SetValueName gets a reference to the given string and assigns it to the ValueName field.
func (o *AllowedValue) SetValueName(v string) {
	o.ValueName = &v
}

func (o AllowedValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllowedValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ValueId) {
		toSerialize["valueId"] = o.ValueId
	}
	if !IsNil(o.ValueName) {
		toSerialize["valueName"] = o.ValueName
	}
	return toSerialize, nil
}

type NullableAllowedValue struct {
	value *AllowedValue
	isSet bool
}

func (v NullableAllowedValue) Get() *AllowedValue {
	return v.value
}

func (v *NullableAllowedValue) Set(val *AllowedValue) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowedValue) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowedValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowedValue(val *AllowedValue) *NullableAllowedValue {
	return &NullableAllowedValue{value: val, isSet: true}
}

func (v NullableAllowedValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowedValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
