/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateOneIssueSubTypeRQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateOneIssueSubTypeRQ{}

// UpdateOneIssueSubTypeRQ struct for UpdateOneIssueSubTypeRQ
type UpdateOneIssueSubTypeRQ struct {
	Locator   string `json:"locator"`
	TypeRef   string `json:"typeRef"`
	LongName  string `json:"longName"`
	ShortName string `json:"shortName"`
	Color     string `json:"color" validate:"regexp=#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$"`
}

type _UpdateOneIssueSubTypeRQ UpdateOneIssueSubTypeRQ

// NewUpdateOneIssueSubTypeRQ instantiates a new UpdateOneIssueSubTypeRQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateOneIssueSubTypeRQ(locator, typeRef, longName, shortName, color string) *UpdateOneIssueSubTypeRQ {
	this := UpdateOneIssueSubTypeRQ{}
	this.Locator = locator
	this.TypeRef = typeRef
	this.LongName = longName
	this.ShortName = shortName
	this.Color = color
	return &this
}

// NewUpdateOneIssueSubTypeRQWithDefaults instantiates a new UpdateOneIssueSubTypeRQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateOneIssueSubTypeRQWithDefaults() *UpdateOneIssueSubTypeRQ {
	this := UpdateOneIssueSubTypeRQ{}
	return &this
}

// GetLocator returns the Locator field value
func (o *UpdateOneIssueSubTypeRQ) GetLocator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locator
}

// GetLocatorOk returns a tuple with the Locator field value
// and a boolean to check if the value has been set.
func (o *UpdateOneIssueSubTypeRQ) GetLocatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locator, true
}

// SetLocator sets field value
func (o *UpdateOneIssueSubTypeRQ) SetLocator(v string) {
	o.Locator = v
}

// GetTypeRef returns the TypeRef field value
func (o *UpdateOneIssueSubTypeRQ) GetTypeRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeRef
}

// GetTypeRefOk returns a tuple with the TypeRef field value
// and a boolean to check if the value has been set.
func (o *UpdateOneIssueSubTypeRQ) GetTypeRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeRef, true
}

// SetTypeRef sets field value
func (o *UpdateOneIssueSubTypeRQ) SetTypeRef(v string) {
	o.TypeRef = v
}

// GetLongName returns the LongName field value
func (o *UpdateOneIssueSubTypeRQ) GetLongName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LongName
}

// GetLongNameOk returns a tuple with the LongName field value
// and a boolean to check if the value has been set.
func (o *UpdateOneIssueSubTypeRQ) GetLongNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LongName, true
}

// SetLongName sets field value
func (o *UpdateOneIssueSubTypeRQ) SetLongName(v string) {
	o.LongName = v
}

// GetShortName returns the ShortName field value
func (o *UpdateOneIssueSubTypeRQ) GetShortName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value
// and a boolean to check if the value has been set.
func (o *UpdateOneIssueSubTypeRQ) GetShortNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShortName, true
}

// SetShortName sets field value
func (o *UpdateOneIssueSubTypeRQ) SetShortName(v string) {
	o.ShortName = v
}

// GetColor returns the Color field value
func (o *UpdateOneIssueSubTypeRQ) GetColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *UpdateOneIssueSubTypeRQ) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *UpdateOneIssueSubTypeRQ) SetColor(v string) {
	o.Color = v
}

func (o UpdateOneIssueSubTypeRQ) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateOneIssueSubTypeRQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locator"] = o.Locator
	toSerialize["typeRef"] = o.TypeRef
	toSerialize["longName"] = o.LongName
	toSerialize["shortName"] = o.ShortName
	toSerialize["color"] = o.Color
	return toSerialize, nil
}

func (o *UpdateOneIssueSubTypeRQ) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locator",
		"typeRef",
		"longName",
		"shortName",
		"color",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateOneIssueSubTypeRQ := _UpdateOneIssueSubTypeRQ{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateOneIssueSubTypeRQ)

	if err != nil {
		return err
	}

	*o = UpdateOneIssueSubTypeRQ(varUpdateOneIssueSubTypeRQ)

	return err
}

type NullableUpdateOneIssueSubTypeRQ struct {
	value *UpdateOneIssueSubTypeRQ
	isSet bool
}

func (v NullableUpdateOneIssueSubTypeRQ) Get() *UpdateOneIssueSubTypeRQ {
	return v.value
}

func (v *NullableUpdateOneIssueSubTypeRQ) Set(val *UpdateOneIssueSubTypeRQ) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateOneIssueSubTypeRQ) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateOneIssueSubTypeRQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateOneIssueSubTypeRQ(val *UpdateOneIssueSubTypeRQ) *NullableUpdateOneIssueSubTypeRQ {
	return &NullableUpdateOneIssueSubTypeRQ{value: val, isSet: true}
}

func (v NullableUpdateOneIssueSubTypeRQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateOneIssueSubTypeRQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
