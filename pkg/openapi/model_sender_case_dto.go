/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SenderCaseDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SenderCaseDTO{}

// SenderCaseDTO struct for SenderCaseDTO
type SenderCaseDTO struct {
	Id                 *int64                            `json:"id,omitempty"`
	RuleName           string                            `json:"ruleName"`
	Recipients         []string                          `json:"recipients,omitempty"`
	SendCase           string                            `json:"sendCase"`
	LaunchNames        []string                          `json:"launchNames,omitempty"`
	Attributes         []ItemAttributeResource           `json:"attributes,omitempty"`
	Enabled            *bool                             `json:"enabled,omitempty"`
	Type               *string                           `json:"type,omitempty"`
	RuleDetails        map[string]map[string]interface{} `json:"ruleDetails,omitempty"`
	AttributesOperator string                            `json:"attributesOperator"`
}

type _SenderCaseDTO SenderCaseDTO

// NewSenderCaseDTO instantiates a new SenderCaseDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSenderCaseDTO(ruleName string, sendCase string, attributesOperator string) *SenderCaseDTO {
	this := SenderCaseDTO{}
	this.RuleName = ruleName
	this.SendCase = sendCase
	this.AttributesOperator = attributesOperator
	return &this
}

// NewSenderCaseDTOWithDefaults instantiates a new SenderCaseDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSenderCaseDTOWithDefaults() *SenderCaseDTO {
	this := SenderCaseDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SenderCaseDTO) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderCaseDTO) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SenderCaseDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *SenderCaseDTO) SetId(v int64) {
	o.Id = &v
}

// GetRuleName returns the RuleName field value
func (o *SenderCaseDTO) GetRuleName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleName
}

// GetRuleNameOk returns a tuple with the RuleName field value
// and a boolean to check if the value has been set.
func (o *SenderCaseDTO) GetRuleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleName, true
}

// SetRuleName sets field value
func (o *SenderCaseDTO) SetRuleName(v string) {
	o.RuleName = v
}

// GetRecipients returns the Recipients field value if set, zero value otherwise.
func (o *SenderCaseDTO) GetRecipients() []string {
	if o == nil || IsNil(o.Recipients) {
		var ret []string
		return ret
	}
	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderCaseDTO) GetRecipientsOk() ([]string, bool) {
	if o == nil || IsNil(o.Recipients) {
		return nil, false
	}
	return o.Recipients, true
}

// HasRecipients returns a boolean if a field has been set.
func (o *SenderCaseDTO) HasRecipients() bool {
	if o != nil && !IsNil(o.Recipients) {
		return true
	}

	return false
}

// SetRecipients gets a reference to the given []string and assigns it to the Recipients field.
func (o *SenderCaseDTO) SetRecipients(v []string) {
	o.Recipients = v
}

// GetSendCase returns the SendCase field value
func (o *SenderCaseDTO) GetSendCase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SendCase
}

// GetSendCaseOk returns a tuple with the SendCase field value
// and a boolean to check if the value has been set.
func (o *SenderCaseDTO) GetSendCaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SendCase, true
}

// SetSendCase sets field value
func (o *SenderCaseDTO) SetSendCase(v string) {
	o.SendCase = v
}

// GetLaunchNames returns the LaunchNames field value if set, zero value otherwise.
func (o *SenderCaseDTO) GetLaunchNames() []string {
	if o == nil || IsNil(o.LaunchNames) {
		var ret []string
		return ret
	}
	return o.LaunchNames
}

// GetLaunchNamesOk returns a tuple with the LaunchNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderCaseDTO) GetLaunchNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.LaunchNames) {
		return nil, false
	}
	return o.LaunchNames, true
}

// HasLaunchNames returns a boolean if a field has been set.
func (o *SenderCaseDTO) HasLaunchNames() bool {
	if o != nil && !IsNil(o.LaunchNames) {
		return true
	}

	return false
}

// SetLaunchNames gets a reference to the given []string and assigns it to the LaunchNames field.
func (o *SenderCaseDTO) SetLaunchNames(v []string) {
	o.LaunchNames = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *SenderCaseDTO) GetAttributes() []ItemAttributeResource {
	if o == nil || IsNil(o.Attributes) {
		var ret []ItemAttributeResource
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderCaseDTO) GetAttributesOk() ([]ItemAttributeResource, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *SenderCaseDTO) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []ItemAttributeResource and assigns it to the Attributes field.
func (o *SenderCaseDTO) SetAttributes(v []ItemAttributeResource) {
	o.Attributes = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SenderCaseDTO) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderCaseDTO) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SenderCaseDTO) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SenderCaseDTO) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SenderCaseDTO) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderCaseDTO) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SenderCaseDTO) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SenderCaseDTO) SetType(v string) {
	o.Type = &v
}

// GetRuleDetails returns the RuleDetails field value if set, zero value otherwise.
func (o *SenderCaseDTO) GetRuleDetails() map[string]map[string]interface{} {
	if o == nil || IsNil(o.RuleDetails) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.RuleDetails
}

// GetRuleDetailsOk returns a tuple with the RuleDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenderCaseDTO) GetRuleDetailsOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.RuleDetails) {
		return map[string]map[string]interface{}{}, false
	}
	return o.RuleDetails, true
}

// HasRuleDetails returns a boolean if a field has been set.
func (o *SenderCaseDTO) HasRuleDetails() bool {
	if o != nil && !IsNil(o.RuleDetails) {
		return true
	}

	return false
}

// SetRuleDetails gets a reference to the given map[string]map[string]interface{} and assigns it to the RuleDetails field.
func (o *SenderCaseDTO) SetRuleDetails(v map[string]map[string]interface{}) {
	o.RuleDetails = v
}

// GetAttributesOperator returns the AttributesOperator field value
func (o *SenderCaseDTO) GetAttributesOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AttributesOperator
}

// GetAttributesOperatorOk returns a tuple with the AttributesOperator field value
// and a boolean to check if the value has been set.
func (o *SenderCaseDTO) GetAttributesOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AttributesOperator, true
}

// SetAttributesOperator sets field value
func (o *SenderCaseDTO) SetAttributesOperator(v string) {
	o.AttributesOperator = v
}

func (o SenderCaseDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SenderCaseDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["ruleName"] = o.RuleName
	if !IsNil(o.Recipients) {
		toSerialize["recipients"] = o.Recipients
	}
	toSerialize["sendCase"] = o.SendCase
	if !IsNil(o.LaunchNames) {
		toSerialize["launchNames"] = o.LaunchNames
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.RuleDetails) {
		toSerialize["ruleDetails"] = o.RuleDetails
	}
	toSerialize["attributesOperator"] = o.AttributesOperator
	return toSerialize, nil
}

func (o *SenderCaseDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ruleName",
		"sendCase",
		"attributesOperator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSenderCaseDTO := _SenderCaseDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSenderCaseDTO)

	if err != nil {
		return err
	}

	*o = SenderCaseDTO(varSenderCaseDTO)

	return err
}

type NullableSenderCaseDTO struct {
	value *SenderCaseDTO
	isSet bool
}

func (v NullableSenderCaseDTO) Get() *SenderCaseDTO {
	return v.value
}

func (v *NullableSenderCaseDTO) Set(val *SenderCaseDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSenderCaseDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSenderCaseDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSenderCaseDTO(val *SenderCaseDTO) *NullableSenderCaseDTO {
	return &NullableSenderCaseDTO{value: val, isSet: true}
}

func (v NullableSenderCaseDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSenderCaseDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
