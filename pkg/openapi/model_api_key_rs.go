/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ApiKeyRS type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiKeyRS{}

// ApiKeyRS struct for ApiKeyRS
type ApiKeyRS struct {
	Id         int64      `json:"id"`
	Name       string     `json:"name"`
	UserId     int64      `json:"user_id"`
	CreatedAt  time.Time  `json:"created_at"`
	LastUsedAt *time.Time `json:"last_used_at,omitempty"`
	ApiKey     *string    `json:"api_key,omitempty"`
}

type _ApiKeyRS ApiKeyRS

// NewApiKeyRS instantiates a new ApiKeyRS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiKeyRS(id int64, name string, userId int64, createdAt time.Time) *ApiKeyRS {
	this := ApiKeyRS{}
	this.Id = id
	this.Name = name
	this.UserId = userId
	this.CreatedAt = createdAt
	return &this
}

// NewApiKeyRSWithDefaults instantiates a new ApiKeyRS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiKeyRSWithDefaults() *ApiKeyRS {
	this := ApiKeyRS{}
	return &this
}

// GetId returns the Id field value
func (o *ApiKeyRS) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ApiKeyRS) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ApiKeyRS) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ApiKeyRS) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiKeyRS) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiKeyRS) SetName(v string) {
	o.Name = v
}

// GetUserId returns the UserId field value
func (o *ApiKeyRS) GetUserId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *ApiKeyRS) GetUserIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *ApiKeyRS) SetUserId(v int64) {
	o.UserId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ApiKeyRS) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ApiKeyRS) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ApiKeyRS) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetLastUsedAt returns the LastUsedAt field value if set, zero value otherwise.
func (o *ApiKeyRS) GetLastUsedAt() time.Time {
	if o == nil || IsNil(o.LastUsedAt) {
		var ret time.Time
		return ret
	}
	return *o.LastUsedAt
}

// GetLastUsedAtOk returns a tuple with the LastUsedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKeyRS) GetLastUsedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUsedAt) {
		return nil, false
	}
	return o.LastUsedAt, true
}

// HasLastUsedAt returns a boolean if a field has been set.
func (o *ApiKeyRS) HasLastUsedAt() bool {
	if o != nil && !IsNil(o.LastUsedAt) {
		return true
	}

	return false
}

// SetLastUsedAt gets a reference to the given time.Time and assigns it to the LastUsedAt field.
func (o *ApiKeyRS) SetLastUsedAt(v time.Time) {
	o.LastUsedAt = &v
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *ApiKeyRS) GetApiKey() string {
	if o == nil || IsNil(o.ApiKey) {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKeyRS) GetApiKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKey) {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *ApiKeyRS) HasApiKey() bool {
	if o != nil && !IsNil(o.ApiKey) {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *ApiKeyRS) SetApiKey(v string) {
	o.ApiKey = &v
}

func (o ApiKeyRS) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiKeyRS) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["user_id"] = o.UserId
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.LastUsedAt) {
		toSerialize["last_used_at"] = o.LastUsedAt
	}
	if !IsNil(o.ApiKey) {
		toSerialize["api_key"] = o.ApiKey
	}
	return toSerialize, nil
}

func (o *ApiKeyRS) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"user_id",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiKeyRS := _ApiKeyRS{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiKeyRS)

	if err != nil {
		return err
	}

	*o = ApiKeyRS(varApiKeyRS)

	return err
}

type NullableApiKeyRS struct {
	value *ApiKeyRS
	isSet bool
}

func (v NullableApiKeyRS) Get() *ApiKeyRS {
	return v.value
}

func (v *NullableApiKeyRS) Set(val *ApiKeyRS) {
	v.value = val
	v.isSet = true
}

func (v NullableApiKeyRS) IsSet() bool {
	return v.isSet
}

func (v *NullableApiKeyRS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiKeyRS(val *ApiKeyRS) *NullableApiKeyRS {
	return &NullableApiKeyRS{value: val, isSet: true}
}

func (v NullableApiKeyRS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiKeyRS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
