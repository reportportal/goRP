/*
ReportPortal

ReportPortal API documentation

API version: develop-322
Contact: support@reportportal.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PreferenceResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PreferenceResource{}

// PreferenceResource struct for PreferenceResource
type PreferenceResource struct {
	UserId    *int64               `json:"userId,omitempty"`
	ProjectId int64                `json:"projectId"`
	Filters   []UserFilterResource `json:"filters,omitempty"`
}

type _PreferenceResource PreferenceResource

// NewPreferenceResource instantiates a new PreferenceResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreferenceResource(projectId int64) *PreferenceResource {
	this := PreferenceResource{}
	this.ProjectId = projectId
	return &this
}

// NewPreferenceResourceWithDefaults instantiates a new PreferenceResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreferenceResourceWithDefaults() *PreferenceResource {
	this := PreferenceResource{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *PreferenceResource) GetUserId() int64 {
	if o == nil || IsNil(o.UserId) {
		var ret int64
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferenceResource) GetUserIdOk() (*int64, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *PreferenceResource) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int64 and assigns it to the UserId field.
func (o *PreferenceResource) SetUserId(v int64) {
	o.UserId = &v
}

// GetProjectId returns the ProjectId field value
func (o *PreferenceResource) GetProjectId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *PreferenceResource) GetProjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *PreferenceResource) SetProjectId(v int64) {
	o.ProjectId = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *PreferenceResource) GetFilters() []UserFilterResource {
	if o == nil || IsNil(o.Filters) {
		var ret []UserFilterResource
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreferenceResource) GetFiltersOk() ([]UserFilterResource, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *PreferenceResource) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []UserFilterResource and assigns it to the Filters field.
func (o *PreferenceResource) SetFilters(v []UserFilterResource) {
	o.Filters = v
}

func (o PreferenceResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PreferenceResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	toSerialize["projectId"] = o.ProjectId
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	return toSerialize, nil
}

func (o *PreferenceResource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"projectId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPreferenceResource := _PreferenceResource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPreferenceResource)

	if err != nil {
		return err
	}

	*o = PreferenceResource(varPreferenceResource)

	return err
}

type NullablePreferenceResource struct {
	value *PreferenceResource
	isSet bool
}

func (v NullablePreferenceResource) Get() *PreferenceResource {
	return v.value
}

func (v *NullablePreferenceResource) Set(val *PreferenceResource) {
	v.value = val
	v.isSet = true
}

func (v NullablePreferenceResource) IsSet() bool {
	return v.isSet
}

func (v *NullablePreferenceResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreferenceResource(val *PreferenceResource) *NullablePreferenceResource {
	return &NullablePreferenceResource{value: val, isSet: true}
}

func (v NullablePreferenceResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreferenceResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
